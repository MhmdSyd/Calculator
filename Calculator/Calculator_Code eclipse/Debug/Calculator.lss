
Calculator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002b54  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000c  00800060  00002b54  00002be8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000e  0080006c  0080006c  00002bf4  2**0
                  ALLOC
  3 .stab         00002c1c  00000000  00000000  00002bf4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000010c8  00000000  00000000  00005810  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .comment      00000011  00000000  00000000  000068d8  2**0
                  CONTENTS, READONLY
  6 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000068ec  2**2
                  CONTENTS, READONLY
  7 .debug_aranges 00000140  00000000  00000000  00006928  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   000006aa  00000000  00000000  00006a68  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 000005af  00000000  00000000  00007112  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00000651  00000000  00000000  000076c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000020d  00000000  00000000  00007d12  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e5       	ldi	r30, 0x54	; 84
      68:	fb e2       	ldi	r31, 0x2B	; 43
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	ac 36       	cpi	r26, 0x6C	; 108
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	20 e0       	ldi	r18, 0x00	; 0
      78:	ac e6       	ldi	r26, 0x6C	; 108
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	aa 37       	cpi	r26, 0x7A	; 122
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 49 00 	call	0x92	; 0x92 <main>
      8a:	0c 94 98 15 	jmp	0x2b30	; 0x2b30 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:

/* that variable use to store the result of equation that enter by user*/
sint32 result = 0;

/*				main Calculator Function		*/
int main(void) {
      92:	0f 93       	push	r16
      94:	1f 93       	push	r17
      96:	cf 93       	push	r28
      98:	df 93       	push	r29
      9a:	cd b7       	in	r28, 0x3d	; 61
      9c:	de b7       	in	r29, 0x3e	; 62
      9e:	c8 58       	subi	r28, 0x88	; 136
      a0:	d1 09       	sbc	r29, r1
      a2:	0f b6       	in	r0, 0x3f	; 63
      a4:	f8 94       	cli
      a6:	de bf       	out	0x3e, r29	; 62
      a8:	0f be       	out	0x3f, r0	; 63
      aa:	cd bf       	out	0x3d, r28	; 61
	LCD_init();		/* initialize LCD module*/
      ac:	0e 94 be 0f 	call	0x1f7c	; 0x1f7c <LCD_init>
	LCD_goToRowColumn(0, 3);		/*send cursor to row 0 , column 3*/
      b0:	63 e0       	ldi	r22, 0x03	; 3
      b2:	80 e0       	ldi	r24, 0x00	; 0
      b4:	0e 94 b8 10 	call	0x2170	; 0x2170 <LCD_goToRowColumn>
	LCD_displayString("Calculator");	/*print "Calculator" on screen */
      b8:	80 e6       	ldi	r24, 0x60	; 96
      ba:	90 e0       	ldi	r25, 0x00	; 0
      bc:	0e 94 9f 0f 	call	0x1f3e	; 0x1f3e <LCD_displayString>
      c0:	80 e0       	ldi	r24, 0x00	; 0
      c2:	90 e0       	ldi	r25, 0x00	; 0
      c4:	a6 e9       	ldi	r26, 0x96	; 150
      c6:	b3 e4       	ldi	r27, 0x43	; 67
      c8:	89 83       	std	Y+1, r24	; 0x01
      ca:	9a 83       	std	Y+2, r25	; 0x02
      cc:	ab 83       	std	Y+3, r26	; 0x03
      ce:	bc 83       	std	Y+4, r27	; 0x04

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
      d0:	20 e0       	ldi	r18, 0x00	; 0
      d2:	30 e0       	ldi	r19, 0x00	; 0
      d4:	4a e7       	ldi	r20, 0x7A	; 122
      d6:	53 e4       	ldi	r21, 0x43	; 67
      d8:	69 81       	ldd	r22, Y+1	; 0x01
      da:	7a 81       	ldd	r23, Y+2	; 0x02
      dc:	8b 81       	ldd	r24, Y+3	; 0x03
      de:	9c 81       	ldd	r25, Y+4	; 0x04
      e0:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <__mulsf3>
      e4:	2d 96       	adiw	r28, 0x0d	; 13
      e6:	6c af       	std	Y+60, r22	; 0x3c
      e8:	7d af       	std	Y+61, r23	; 0x3d
      ea:	8e af       	std	Y+62, r24	; 0x3e
      ec:	9f af       	std	Y+63, r25	; 0x3f
      ee:	2d 97       	sbiw	r28, 0x0d	; 13
      f0:	2d 96       	adiw	r28, 0x0d	; 13
      f2:	8c ad       	ldd	r24, Y+60	; 0x3c
      f4:	9d ad       	ldd	r25, Y+61	; 0x3d
      f6:	ae ad       	ldd	r26, Y+62	; 0x3e
      f8:	bf ad       	ldd	r27, Y+63	; 0x3f
      fa:	2d 97       	sbiw	r28, 0x0d	; 13
      fc:	8d 83       	std	Y+5, r24	; 0x05
      fe:	9e 83       	std	Y+6, r25	; 0x06
     100:	af 83       	std	Y+7, r26	; 0x07
     102:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
     104:	20 e0       	ldi	r18, 0x00	; 0
     106:	30 e0       	ldi	r19, 0x00	; 0
     108:	40 e8       	ldi	r20, 0x80	; 128
     10a:	5f e3       	ldi	r21, 0x3F	; 63
     10c:	6d 81       	ldd	r22, Y+5	; 0x05
     10e:	7e 81       	ldd	r23, Y+6	; 0x06
     110:	8f 81       	ldd	r24, Y+7	; 0x07
     112:	98 85       	ldd	r25, Y+8	; 0x08
     114:	0e 94 cb 13 	call	0x2796	; 0x2796 <__cmpsf2>
     118:	88 23       	and	r24, r24
     11a:	2c f4       	brge	.+10     	; 0x126 <main+0x94>
		__ticks = 1;
     11c:	81 e0       	ldi	r24, 0x01	; 1
     11e:	90 e0       	ldi	r25, 0x00	; 0
     120:	9a 87       	std	Y+10, r25	; 0x0a
     122:	89 87       	std	Y+9, r24	; 0x09
     124:	61 c0       	rjmp	.+194    	; 0x1e8 <main+0x156>
	else if (__tmp > 65535)
     126:	20 e0       	ldi	r18, 0x00	; 0
     128:	3f ef       	ldi	r19, 0xFF	; 255
     12a:	4f e7       	ldi	r20, 0x7F	; 127
     12c:	57 e4       	ldi	r21, 0x47	; 71
     12e:	6d 81       	ldd	r22, Y+5	; 0x05
     130:	7e 81       	ldd	r23, Y+6	; 0x06
     132:	8f 81       	ldd	r24, Y+7	; 0x07
     134:	98 85       	ldd	r25, Y+8	; 0x08
     136:	0e 94 e6 14 	call	0x29cc	; 0x29cc <__gesf2>
     13a:	18 16       	cp	r1, r24
     13c:	0c f0       	brlt	.+2      	; 0x140 <main+0xae>
     13e:	42 c0       	rjmp	.+132    	; 0x1c4 <main+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     140:	20 e0       	ldi	r18, 0x00	; 0
     142:	30 e0       	ldi	r19, 0x00	; 0
     144:	40 e2       	ldi	r20, 0x20	; 32
     146:	51 e4       	ldi	r21, 0x41	; 65
     148:	69 81       	ldd	r22, Y+1	; 0x01
     14a:	7a 81       	ldd	r23, Y+2	; 0x02
     14c:	8b 81       	ldd	r24, Y+3	; 0x03
     14e:	9c 81       	ldd	r25, Y+4	; 0x04
     150:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <__mulsf3>
     154:	61 96       	adiw	r28, 0x11	; 17
     156:	6c af       	std	Y+60, r22	; 0x3c
     158:	7d af       	std	Y+61, r23	; 0x3d
     15a:	8e af       	std	Y+62, r24	; 0x3e
     15c:	9f af       	std	Y+63, r25	; 0x3f
     15e:	61 97       	sbiw	r28, 0x11	; 17
     160:	61 96       	adiw	r28, 0x11	; 17
     162:	8c ad       	ldd	r24, Y+60	; 0x3c
     164:	9d ad       	ldd	r25, Y+61	; 0x3d
     166:	ae ad       	ldd	r26, Y+62	; 0x3e
     168:	bf ad       	ldd	r27, Y+63	; 0x3f
     16a:	61 97       	sbiw	r28, 0x11	; 17
     16c:	89 af       	std	Y+57, r24	; 0x39
     16e:	9a af       	std	Y+58, r25	; 0x3a
     170:	ab af       	std	Y+59, r26	; 0x3b
     172:	bc af       	std	Y+60, r27	; 0x3c
     174:	69 ad       	ldd	r22, Y+57	; 0x39
     176:	7a ad       	ldd	r23, Y+58	; 0x3a
     178:	8b ad       	ldd	r24, Y+59	; 0x3b
     17a:	9c ad       	ldd	r25, Y+60	; 0x3c
     17c:	0e 94 42 14 	call	0x2884	; 0x2884 <__fixunssfsi>
     180:	65 96       	adiw	r28, 0x15	; 21
     182:	6c af       	std	Y+60, r22	; 0x3c
     184:	7d af       	std	Y+61, r23	; 0x3d
     186:	8e af       	std	Y+62, r24	; 0x3e
     188:	9f af       	std	Y+63, r25	; 0x3f
     18a:	65 97       	sbiw	r28, 0x15	; 21
     18c:	63 96       	adiw	r28, 0x13	; 19
     18e:	ae ad       	ldd	r26, Y+62	; 0x3e
     190:	bf ad       	ldd	r27, Y+63	; 0x3f
     192:	63 97       	sbiw	r28, 0x13	; 19
     194:	ba 87       	std	Y+10, r27	; 0x0a
     196:	a9 87       	std	Y+9, r26	; 0x09
		while(__ticks)
     198:	10 c0       	rjmp	.+32     	; 0x1ba <main+0x128>
     19a:	89 e1       	ldi	r24, 0x19	; 25
     19c:	90 e0       	ldi	r25, 0x00	; 0
     19e:	9c 87       	std	Y+12, r25	; 0x0c
     1a0:	8b 87       	std	Y+11, r24	; 0x0b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     1a2:	8b 85       	ldd	r24, Y+11	; 0x0b
     1a4:	9c 85       	ldd	r25, Y+12	; 0x0c
     1a6:	01 97       	sbiw	r24, 0x01	; 1
     1a8:	f1 f7       	brne	.-4      	; 0x1a6 <main+0x114>
     1aa:	9c 87       	std	Y+12, r25	; 0x0c
     1ac:	8b 87       	std	Y+11, r24	; 0x0b
		"1: sbiw %0,1" "\n\t"
		"brne 1b"
		: "=w" (__count)
		: "0" (__count)
	);
}
     1ae:	00 00       	nop
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     1b0:	89 85       	ldd	r24, Y+9	; 0x09
     1b2:	9a 85       	ldd	r25, Y+10	; 0x0a
     1b4:	01 97       	sbiw	r24, 0x01	; 1
     1b6:	9a 87       	std	Y+10, r25	; 0x0a
     1b8:	89 87       	std	Y+9, r24	; 0x09
		while(__ticks)
     1ba:	89 85       	ldd	r24, Y+9	; 0x09
     1bc:	9a 85       	ldd	r25, Y+10	; 0x0a
     1be:	89 2b       	or	r24, r25
     1c0:	61 f7       	brne	.-40     	; 0x19a <main+0x108>
		}
		return;
     1c2:	1d c0       	rjmp	.+58     	; 0x1fe <main+0x16c>
	}
	else
		__ticks = (uint16_t)__tmp;
     1c4:	6d 81       	ldd	r22, Y+5	; 0x05
     1c6:	7e 81       	ldd	r23, Y+6	; 0x06
     1c8:	8f 81       	ldd	r24, Y+7	; 0x07
     1ca:	98 85       	ldd	r25, Y+8	; 0x08
     1cc:	0e 94 42 14 	call	0x2884	; 0x2884 <__fixunssfsi>
     1d0:	69 96       	adiw	r28, 0x19	; 25
     1d2:	6c af       	std	Y+60, r22	; 0x3c
     1d4:	7d af       	std	Y+61, r23	; 0x3d
     1d6:	8e af       	std	Y+62, r24	; 0x3e
     1d8:	9f af       	std	Y+63, r25	; 0x3f
     1da:	69 97       	sbiw	r28, 0x19	; 25
     1dc:	67 96       	adiw	r28, 0x17	; 23
     1de:	8e ad       	ldd	r24, Y+62	; 0x3e
     1e0:	9f ad       	ldd	r25, Y+63	; 0x3f
     1e2:	67 97       	sbiw	r28, 0x17	; 23
     1e4:	9a 87       	std	Y+10, r25	; 0x0a
     1e6:	89 87       	std	Y+9, r24	; 0x09
     1e8:	89 85       	ldd	r24, Y+9	; 0x09
     1ea:	9a 85       	ldd	r25, Y+10	; 0x0a
     1ec:	9e 87       	std	Y+14, r25	; 0x0e
     1ee:	8d 87       	std	Y+13, r24	; 0x0d
	__asm__ volatile (
     1f0:	8d 85       	ldd	r24, Y+13	; 0x0d
     1f2:	9e 85       	ldd	r25, Y+14	; 0x0e
     1f4:	01 97       	sbiw	r24, 0x01	; 1
     1f6:	f1 f7       	brne	.-4      	; 0x1f4 <main+0x162>
     1f8:	9e 87       	std	Y+14, r25	; 0x0e
     1fa:	8d 87       	std	Y+13, r24	; 0x0d
}
     1fc:	00 00       	nop
	_delay_ms(DELAY_TIME);
	LCD_sendCommand(CURSOR_ON);	/* show cursor to kown location of start print */
     1fe:	8e e0       	ldi	r24, 0x0E	; 14
     200:	0e 94 5b 05 	call	0xab6	; 0xab6 <LCD_sendCommand>

	while (1) {
		LCD_clearScreen();	/*  clear LCD Screen to start enter equation */
     204:	0e 94 90 10 	call	0x2120	; 0x2120 <LCD_clearScreen>
		/* return cursor at row 0 , column 0*/
		LCD_sendCommand(CURSOR_HOME_LOCATION);
     208:	80 e8       	ldi	r24, 0x80	; 128
     20a:	0e 94 5b 05 	call	0xab6	; 0xab6 <LCD_sendCommand>

		do {
			/* receive press key from KeyPad */
			key_num = KeyPad_getPressedKey();
     20e:	0e 94 c4 04 	call	0x988	; 0x988 <KeyPad_getPressedKey>
     212:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <__data_end>
			/* check that pressed kry is number or operator */
			if ((key_num <= 57) && (key_num >= 48)) {
     216:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <__data_end>
     21a:	8a 33       	cpi	r24, 0x3A	; 58
     21c:	b8 f5       	brcc	.+110    	; 0x28c <main+0x1fa>
     21e:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <__data_end>
     222:	80 33       	cpi	r24, 0x30	; 48
     224:	98 f1       	brcs	.+102    	; 0x28c <main+0x1fa>
				LCD_displayCharacter(key_num);  	/* if pressed key is number show it in lcd screen */
     226:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <__data_end>
     22a:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <LCD_displayCharacter>
				num1 = (sint32) (key_num - 48) + (num1 * 10); /* and update number 1 value*/
     22e:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <__data_end>
     232:	88 2f       	mov	r24, r24
     234:	90 e0       	ldi	r25, 0x00	; 0
     236:	c0 97       	sbiw	r24, 0x30	; 48
     238:	8c 01       	movw	r16, r24
     23a:	99 0f       	add	r25, r25
     23c:	22 0b       	sbc	r18, r18
     23e:	33 0b       	sbc	r19, r19
     240:	40 91 6d 00 	lds	r20, 0x006D	; 0x80006d <num1>
     244:	50 91 6e 00 	lds	r21, 0x006E	; 0x80006e <num1+0x1>
     248:	60 91 6f 00 	lds	r22, 0x006F	; 0x80006f <num1+0x2>
     24c:	70 91 70 00 	lds	r23, 0x0070	; 0x800070 <num1+0x3>
     250:	db 01       	movw	r26, r22
     252:	ca 01       	movw	r24, r20
     254:	88 0f       	add	r24, r24
     256:	99 1f       	adc	r25, r25
     258:	aa 1f       	adc	r26, r26
     25a:	bb 1f       	adc	r27, r27
     25c:	88 0f       	add	r24, r24
     25e:	99 1f       	adc	r25, r25
     260:	aa 1f       	adc	r26, r26
     262:	bb 1f       	adc	r27, r27
     264:	84 0f       	add	r24, r20
     266:	95 1f       	adc	r25, r21
     268:	a6 1f       	adc	r26, r22
     26a:	b7 1f       	adc	r27, r23
     26c:	88 0f       	add	r24, r24
     26e:	99 1f       	adc	r25, r25
     270:	aa 1f       	adc	r26, r26
     272:	bb 1f       	adc	r27, r27
     274:	80 0f       	add	r24, r16
     276:	91 1f       	adc	r25, r17
     278:	a2 1f       	adc	r26, r18
     27a:	b3 1f       	adc	r27, r19
     27c:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <num1>
     280:	90 93 6e 00 	sts	0x006E, r25	; 0x80006e <num1+0x1>
     284:	a0 93 6f 00 	sts	0x006F, r26	; 0x80006f <num1+0x2>
     288:	b0 93 70 00 	sts	0x0070, r27	; 0x800070 <num1+0x3>
     28c:	80 e0       	ldi	r24, 0x00	; 0
     28e:	90 e0       	ldi	r25, 0x00	; 0
     290:	a6 e9       	ldi	r26, 0x96	; 150
     292:	b3 e4       	ldi	r27, 0x43	; 67
     294:	8f 87       	std	Y+15, r24	; 0x0f
     296:	98 8b       	std	Y+16, r25	; 0x10
     298:	a9 8b       	std	Y+17, r26	; 0x11
     29a:	ba 8b       	std	Y+18, r27	; 0x12
	__tmp = ((F_CPU) / 4e3) * __ms;
     29c:	20 e0       	ldi	r18, 0x00	; 0
     29e:	30 e0       	ldi	r19, 0x00	; 0
     2a0:	4a e7       	ldi	r20, 0x7A	; 122
     2a2:	53 e4       	ldi	r21, 0x43	; 67
     2a4:	6f 85       	ldd	r22, Y+15	; 0x0f
     2a6:	78 89       	ldd	r23, Y+16	; 0x10
     2a8:	89 89       	ldd	r24, Y+17	; 0x11
     2aa:	9a 89       	ldd	r25, Y+18	; 0x12
     2ac:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <__mulsf3>
     2b0:	6d 96       	adiw	r28, 0x1d	; 29
     2b2:	6c af       	std	Y+60, r22	; 0x3c
     2b4:	7d af       	std	Y+61, r23	; 0x3d
     2b6:	8e af       	std	Y+62, r24	; 0x3e
     2b8:	9f af       	std	Y+63, r25	; 0x3f
     2ba:	6d 97       	sbiw	r28, 0x1d	; 29
     2bc:	6d 96       	adiw	r28, 0x1d	; 29
     2be:	8c ad       	ldd	r24, Y+60	; 0x3c
     2c0:	9d ad       	ldd	r25, Y+61	; 0x3d
     2c2:	ae ad       	ldd	r26, Y+62	; 0x3e
     2c4:	bf ad       	ldd	r27, Y+63	; 0x3f
     2c6:	6d 97       	sbiw	r28, 0x1d	; 29
     2c8:	8b 8b       	std	Y+19, r24	; 0x13
     2ca:	9c 8b       	std	Y+20, r25	; 0x14
     2cc:	ad 8b       	std	Y+21, r26	; 0x15
     2ce:	be 8b       	std	Y+22, r27	; 0x16
	if (__tmp < 1.0)
     2d0:	20 e0       	ldi	r18, 0x00	; 0
     2d2:	30 e0       	ldi	r19, 0x00	; 0
     2d4:	40 e8       	ldi	r20, 0x80	; 128
     2d6:	5f e3       	ldi	r21, 0x3F	; 63
     2d8:	6b 89       	ldd	r22, Y+19	; 0x13
     2da:	7c 89       	ldd	r23, Y+20	; 0x14
     2dc:	8d 89       	ldd	r24, Y+21	; 0x15
     2de:	9e 89       	ldd	r25, Y+22	; 0x16
     2e0:	0e 94 cb 13 	call	0x2796	; 0x2796 <__cmpsf2>
     2e4:	88 23       	and	r24, r24
     2e6:	2c f4       	brge	.+10     	; 0x2f2 <main+0x260>
		__ticks = 1;
     2e8:	81 e0       	ldi	r24, 0x01	; 1
     2ea:	90 e0       	ldi	r25, 0x00	; 0
     2ec:	98 8f       	std	Y+24, r25	; 0x18
     2ee:	8f 8b       	std	Y+23, r24	; 0x17
     2f0:	65 c0       	rjmp	.+202    	; 0x3bc <main+0x32a>
	else if (__tmp > 65535)
     2f2:	20 e0       	ldi	r18, 0x00	; 0
     2f4:	3f ef       	ldi	r19, 0xFF	; 255
     2f6:	4f e7       	ldi	r20, 0x7F	; 127
     2f8:	57 e4       	ldi	r21, 0x47	; 71
     2fa:	6b 89       	ldd	r22, Y+19	; 0x13
     2fc:	7c 89       	ldd	r23, Y+20	; 0x14
     2fe:	8d 89       	ldd	r24, Y+21	; 0x15
     300:	9e 89       	ldd	r25, Y+22	; 0x16
     302:	0e 94 e6 14 	call	0x29cc	; 0x29cc <__gesf2>
     306:	18 16       	cp	r1, r24
     308:	0c f0       	brlt	.+2      	; 0x30c <main+0x27a>
     30a:	46 c0       	rjmp	.+140    	; 0x398 <main+0x306>
		__ticks = (uint16_t) (__ms * 10.0);
     30c:	20 e0       	ldi	r18, 0x00	; 0
     30e:	30 e0       	ldi	r19, 0x00	; 0
     310:	40 e2       	ldi	r20, 0x20	; 32
     312:	51 e4       	ldi	r21, 0x41	; 65
     314:	6f 85       	ldd	r22, Y+15	; 0x0f
     316:	78 89       	ldd	r23, Y+16	; 0x10
     318:	89 89       	ldd	r24, Y+17	; 0x11
     31a:	9a 89       	ldd	r25, Y+18	; 0x12
     31c:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <__mulsf3>
     320:	a1 96       	adiw	r28, 0x21	; 33
     322:	6c af       	std	Y+60, r22	; 0x3c
     324:	7d af       	std	Y+61, r23	; 0x3d
     326:	8e af       	std	Y+62, r24	; 0x3e
     328:	9f af       	std	Y+63, r25	; 0x3f
     32a:	a1 97       	sbiw	r28, 0x21	; 33
     32c:	a1 96       	adiw	r28, 0x21	; 33
     32e:	8c ad       	ldd	r24, Y+60	; 0x3c
     330:	9d ad       	ldd	r25, Y+61	; 0x3d
     332:	ae ad       	ldd	r26, Y+62	; 0x3e
     334:	bf ad       	ldd	r27, Y+63	; 0x3f
     336:	a1 97       	sbiw	r28, 0x21	; 33
     338:	21 96       	adiw	r28, 0x01	; 1
     33a:	8c af       	std	Y+60, r24	; 0x3c
     33c:	9d af       	std	Y+61, r25	; 0x3d
     33e:	ae af       	std	Y+62, r26	; 0x3e
     340:	bf af       	std	Y+63, r27	; 0x3f
     342:	21 97       	sbiw	r28, 0x01	; 1
     344:	21 96       	adiw	r28, 0x01	; 1
     346:	6c ad       	ldd	r22, Y+60	; 0x3c
     348:	7d ad       	ldd	r23, Y+61	; 0x3d
     34a:	8e ad       	ldd	r24, Y+62	; 0x3e
     34c:	9f ad       	ldd	r25, Y+63	; 0x3f
     34e:	21 97       	sbiw	r28, 0x01	; 1
     350:	0e 94 42 14 	call	0x2884	; 0x2884 <__fixunssfsi>
     354:	a5 96       	adiw	r28, 0x25	; 37
     356:	6c af       	std	Y+60, r22	; 0x3c
     358:	7d af       	std	Y+61, r23	; 0x3d
     35a:	8e af       	std	Y+62, r24	; 0x3e
     35c:	9f af       	std	Y+63, r25	; 0x3f
     35e:	a5 97       	sbiw	r28, 0x25	; 37
     360:	a3 96       	adiw	r28, 0x23	; 35
     362:	ae ad       	ldd	r26, Y+62	; 0x3e
     364:	bf ad       	ldd	r27, Y+63	; 0x3f
     366:	a3 97       	sbiw	r28, 0x23	; 35
     368:	b8 8f       	std	Y+24, r27	; 0x18
     36a:	af 8b       	std	Y+23, r26	; 0x17
		while(__ticks)
     36c:	10 c0       	rjmp	.+32     	; 0x38e <main+0x2fc>
     36e:	89 e1       	ldi	r24, 0x19	; 25
     370:	90 e0       	ldi	r25, 0x00	; 0
     372:	9a 8f       	std	Y+26, r25	; 0x1a
     374:	89 8f       	std	Y+25, r24	; 0x19
	__asm__ volatile (
     376:	89 8d       	ldd	r24, Y+25	; 0x19
     378:	9a 8d       	ldd	r25, Y+26	; 0x1a
     37a:	01 97       	sbiw	r24, 0x01	; 1
     37c:	f1 f7       	brne	.-4      	; 0x37a <main+0x2e8>
     37e:	9a 8f       	std	Y+26, r25	; 0x1a
     380:	89 8f       	std	Y+25, r24	; 0x19
}
     382:	00 00       	nop
			__ticks --;
     384:	8f 89       	ldd	r24, Y+23	; 0x17
     386:	98 8d       	ldd	r25, Y+24	; 0x18
     388:	01 97       	sbiw	r24, 0x01	; 1
     38a:	98 8f       	std	Y+24, r25	; 0x18
     38c:	8f 8b       	std	Y+23, r24	; 0x17
		while(__ticks)
     38e:	8f 89       	ldd	r24, Y+23	; 0x17
     390:	98 8d       	ldd	r25, Y+24	; 0x18
     392:	89 2b       	or	r24, r25
     394:	61 f7       	brne	.-40     	; 0x36e <main+0x2dc>
		return;
     396:	1d c0       	rjmp	.+58     	; 0x3d2 <main+0x340>
		__ticks = (uint16_t)__tmp;
     398:	6b 89       	ldd	r22, Y+19	; 0x13
     39a:	7c 89       	ldd	r23, Y+20	; 0x14
     39c:	8d 89       	ldd	r24, Y+21	; 0x15
     39e:	9e 89       	ldd	r25, Y+22	; 0x16
     3a0:	0e 94 42 14 	call	0x2884	; 0x2884 <__fixunssfsi>
     3a4:	a9 96       	adiw	r28, 0x29	; 41
     3a6:	6c af       	std	Y+60, r22	; 0x3c
     3a8:	7d af       	std	Y+61, r23	; 0x3d
     3aa:	8e af       	std	Y+62, r24	; 0x3e
     3ac:	9f af       	std	Y+63, r25	; 0x3f
     3ae:	a9 97       	sbiw	r28, 0x29	; 41
     3b0:	a7 96       	adiw	r28, 0x27	; 39
     3b2:	8e ad       	ldd	r24, Y+62	; 0x3e
     3b4:	9f ad       	ldd	r25, Y+63	; 0x3f
     3b6:	a7 97       	sbiw	r28, 0x27	; 39
     3b8:	98 8f       	std	Y+24, r25	; 0x18
     3ba:	8f 8b       	std	Y+23, r24	; 0x17
     3bc:	8f 89       	ldd	r24, Y+23	; 0x17
     3be:	98 8d       	ldd	r25, Y+24	; 0x18
     3c0:	9c 8f       	std	Y+28, r25	; 0x1c
     3c2:	8b 8f       	std	Y+27, r24	; 0x1b
	__asm__ volatile (
     3c4:	8b 8d       	ldd	r24, Y+27	; 0x1b
     3c6:	9c 8d       	ldd	r25, Y+28	; 0x1c
     3c8:	01 97       	sbiw	r24, 0x01	; 1
     3ca:	f1 f7       	brne	.-4      	; 0x3c8 <main+0x336>
     3cc:	9c 8f       	std	Y+28, r25	; 0x1c
     3ce:	8b 8f       	std	Y+27, r24	; 0x1b
}
     3d0:	00 00       	nop
			}
			_delay_ms(DELAY_TIME); /* use delay that can user up his hand fron keypad */

		} while (((key_num <= 57) && (key_num >= 48)) || (num1 == 0));
     3d2:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <__data_end>
     3d6:	8a 33       	cpi	r24, 0x3A	; 58
     3d8:	28 f4       	brcc	.+10     	; 0x3e4 <main+0x352>
     3da:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <__data_end>
     3de:	80 33       	cpi	r24, 0x30	; 48
     3e0:	08 f0       	brcs	.+2      	; 0x3e4 <main+0x352>
     3e2:	15 cf       	rjmp	.-470    	; 0x20e <main+0x17c>
     3e4:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <num1>
     3e8:	90 91 6e 00 	lds	r25, 0x006E	; 0x80006e <num1+0x1>
     3ec:	a0 91 6f 00 	lds	r26, 0x006F	; 0x80006f <num1+0x2>
     3f0:	b0 91 70 00 	lds	r27, 0x0070	; 0x800070 <num1+0x3>
     3f4:	89 2b       	or	r24, r25
     3f6:	8a 2b       	or	r24, r26
     3f8:	8b 2b       	or	r24, r27
     3fa:	09 f4       	brne	.+2      	; 0x3fe <main+0x36c>
     3fc:	08 cf       	rjmp	.-496    	; 0x20e <main+0x17c>
		/* select operator type */
		operator();
     3fe:	0e 94 eb 03 	call	0x7d6	; 0x7d6 <operator>
		LCD_displayCharacter(key_num); /* display operator */
     402:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <__data_end>
     406:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <LCD_displayCharacter>
     40a:	80 e0       	ldi	r24, 0x00	; 0
     40c:	90 e0       	ldi	r25, 0x00	; 0
     40e:	a6 e9       	ldi	r26, 0x96	; 150
     410:	b3 e4       	ldi	r27, 0x43	; 67
     412:	8d 8f       	std	Y+29, r24	; 0x1d
     414:	9e 8f       	std	Y+30, r25	; 0x1e
     416:	af 8f       	std	Y+31, r26	; 0x1f
     418:	b8 a3       	std	Y+32, r27	; 0x20
	__tmp = ((F_CPU) / 4e3) * __ms;
     41a:	20 e0       	ldi	r18, 0x00	; 0
     41c:	30 e0       	ldi	r19, 0x00	; 0
     41e:	4a e7       	ldi	r20, 0x7A	; 122
     420:	53 e4       	ldi	r21, 0x43	; 67
     422:	6d 8d       	ldd	r22, Y+29	; 0x1d
     424:	7e 8d       	ldd	r23, Y+30	; 0x1e
     426:	8f 8d       	ldd	r24, Y+31	; 0x1f
     428:	98 a1       	ldd	r25, Y+32	; 0x20
     42a:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <__mulsf3>
     42e:	ad 96       	adiw	r28, 0x2d	; 45
     430:	6c af       	std	Y+60, r22	; 0x3c
     432:	7d af       	std	Y+61, r23	; 0x3d
     434:	8e af       	std	Y+62, r24	; 0x3e
     436:	9f af       	std	Y+63, r25	; 0x3f
     438:	ad 97       	sbiw	r28, 0x2d	; 45
     43a:	ad 96       	adiw	r28, 0x2d	; 45
     43c:	8c ad       	ldd	r24, Y+60	; 0x3c
     43e:	9d ad       	ldd	r25, Y+61	; 0x3d
     440:	ae ad       	ldd	r26, Y+62	; 0x3e
     442:	bf ad       	ldd	r27, Y+63	; 0x3f
     444:	ad 97       	sbiw	r28, 0x2d	; 45
     446:	89 a3       	std	Y+33, r24	; 0x21
     448:	9a a3       	std	Y+34, r25	; 0x22
     44a:	ab a3       	std	Y+35, r26	; 0x23
     44c:	bc a3       	std	Y+36, r27	; 0x24
	if (__tmp < 1.0)
     44e:	20 e0       	ldi	r18, 0x00	; 0
     450:	30 e0       	ldi	r19, 0x00	; 0
     452:	40 e8       	ldi	r20, 0x80	; 128
     454:	5f e3       	ldi	r21, 0x3F	; 63
     456:	69 a1       	ldd	r22, Y+33	; 0x21
     458:	7a a1       	ldd	r23, Y+34	; 0x22
     45a:	8b a1       	ldd	r24, Y+35	; 0x23
     45c:	9c a1       	ldd	r25, Y+36	; 0x24
     45e:	0e 94 cb 13 	call	0x2796	; 0x2796 <__cmpsf2>
     462:	88 23       	and	r24, r24
     464:	2c f4       	brge	.+10     	; 0x470 <__stack+0x11>
		__ticks = 1;
     466:	81 e0       	ldi	r24, 0x01	; 1
     468:	90 e0       	ldi	r25, 0x00	; 0
     46a:	9e a3       	std	Y+38, r25	; 0x26
     46c:	8d a3       	std	Y+37, r24	; 0x25
     46e:	65 c0       	rjmp	.+202    	; 0x53a <__stack+0xdb>
	else if (__tmp > 65535)
     470:	20 e0       	ldi	r18, 0x00	; 0
     472:	3f ef       	ldi	r19, 0xFF	; 255
     474:	4f e7       	ldi	r20, 0x7F	; 127
     476:	57 e4       	ldi	r21, 0x47	; 71
     478:	69 a1       	ldd	r22, Y+33	; 0x21
     47a:	7a a1       	ldd	r23, Y+34	; 0x22
     47c:	8b a1       	ldd	r24, Y+35	; 0x23
     47e:	9c a1       	ldd	r25, Y+36	; 0x24
     480:	0e 94 e6 14 	call	0x29cc	; 0x29cc <__gesf2>
     484:	18 16       	cp	r1, r24
     486:	0c f0       	brlt	.+2      	; 0x48a <__stack+0x2b>
     488:	46 c0       	rjmp	.+140    	; 0x516 <__stack+0xb7>
		__ticks = (uint16_t) (__ms * 10.0);
     48a:	20 e0       	ldi	r18, 0x00	; 0
     48c:	30 e0       	ldi	r19, 0x00	; 0
     48e:	40 e2       	ldi	r20, 0x20	; 32
     490:	51 e4       	ldi	r21, 0x41	; 65
     492:	6d 8d       	ldd	r22, Y+29	; 0x1d
     494:	7e 8d       	ldd	r23, Y+30	; 0x1e
     496:	8f 8d       	ldd	r24, Y+31	; 0x1f
     498:	98 a1       	ldd	r25, Y+32	; 0x20
     49a:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <__mulsf3>
     49e:	e1 96       	adiw	r28, 0x31	; 49
     4a0:	6c af       	std	Y+60, r22	; 0x3c
     4a2:	7d af       	std	Y+61, r23	; 0x3d
     4a4:	8e af       	std	Y+62, r24	; 0x3e
     4a6:	9f af       	std	Y+63, r25	; 0x3f
     4a8:	e1 97       	sbiw	r28, 0x31	; 49
     4aa:	e1 96       	adiw	r28, 0x31	; 49
     4ac:	8c ad       	ldd	r24, Y+60	; 0x3c
     4ae:	9d ad       	ldd	r25, Y+61	; 0x3d
     4b0:	ae ad       	ldd	r26, Y+62	; 0x3e
     4b2:	bf ad       	ldd	r27, Y+63	; 0x3f
     4b4:	e1 97       	sbiw	r28, 0x31	; 49
     4b6:	25 96       	adiw	r28, 0x05	; 5
     4b8:	8c af       	std	Y+60, r24	; 0x3c
     4ba:	9d af       	std	Y+61, r25	; 0x3d
     4bc:	ae af       	std	Y+62, r26	; 0x3e
     4be:	bf af       	std	Y+63, r27	; 0x3f
     4c0:	25 97       	sbiw	r28, 0x05	; 5
     4c2:	25 96       	adiw	r28, 0x05	; 5
     4c4:	6c ad       	ldd	r22, Y+60	; 0x3c
     4c6:	7d ad       	ldd	r23, Y+61	; 0x3d
     4c8:	8e ad       	ldd	r24, Y+62	; 0x3e
     4ca:	9f ad       	ldd	r25, Y+63	; 0x3f
     4cc:	25 97       	sbiw	r28, 0x05	; 5
     4ce:	0e 94 42 14 	call	0x2884	; 0x2884 <__fixunssfsi>
     4d2:	e5 96       	adiw	r28, 0x35	; 53
     4d4:	6c af       	std	Y+60, r22	; 0x3c
     4d6:	7d af       	std	Y+61, r23	; 0x3d
     4d8:	8e af       	std	Y+62, r24	; 0x3e
     4da:	9f af       	std	Y+63, r25	; 0x3f
     4dc:	e5 97       	sbiw	r28, 0x35	; 53
     4de:	e3 96       	adiw	r28, 0x33	; 51
     4e0:	ae ad       	ldd	r26, Y+62	; 0x3e
     4e2:	bf ad       	ldd	r27, Y+63	; 0x3f
     4e4:	e3 97       	sbiw	r28, 0x33	; 51
     4e6:	be a3       	std	Y+38, r27	; 0x26
     4e8:	ad a3       	std	Y+37, r26	; 0x25
		while(__ticks)
     4ea:	10 c0       	rjmp	.+32     	; 0x50c <__stack+0xad>
     4ec:	89 e1       	ldi	r24, 0x19	; 25
     4ee:	90 e0       	ldi	r25, 0x00	; 0
     4f0:	98 a7       	std	Y+40, r25	; 0x28
     4f2:	8f a3       	std	Y+39, r24	; 0x27
	__asm__ volatile (
     4f4:	8f a1       	ldd	r24, Y+39	; 0x27
     4f6:	98 a5       	ldd	r25, Y+40	; 0x28
     4f8:	01 97       	sbiw	r24, 0x01	; 1
     4fa:	f1 f7       	brne	.-4      	; 0x4f8 <__stack+0x99>
     4fc:	98 a7       	std	Y+40, r25	; 0x28
     4fe:	8f a3       	std	Y+39, r24	; 0x27
}
     500:	00 00       	nop
			__ticks --;
     502:	8d a1       	ldd	r24, Y+37	; 0x25
     504:	9e a1       	ldd	r25, Y+38	; 0x26
     506:	01 97       	sbiw	r24, 0x01	; 1
     508:	9e a3       	std	Y+38, r25	; 0x26
     50a:	8d a3       	std	Y+37, r24	; 0x25
		while(__ticks)
     50c:	8d a1       	ldd	r24, Y+37	; 0x25
     50e:	9e a1       	ldd	r25, Y+38	; 0x26
     510:	89 2b       	or	r24, r25
     512:	61 f7       	brne	.-40     	; 0x4ec <__stack+0x8d>
		return;
     514:	1d c0       	rjmp	.+58     	; 0x550 <__stack+0xf1>
		__ticks = (uint16_t)__tmp;
     516:	69 a1       	ldd	r22, Y+33	; 0x21
     518:	7a a1       	ldd	r23, Y+34	; 0x22
     51a:	8b a1       	ldd	r24, Y+35	; 0x23
     51c:	9c a1       	ldd	r25, Y+36	; 0x24
     51e:	0e 94 42 14 	call	0x2884	; 0x2884 <__fixunssfsi>
     522:	e9 96       	adiw	r28, 0x39	; 57
     524:	6c af       	std	Y+60, r22	; 0x3c
     526:	7d af       	std	Y+61, r23	; 0x3d
     528:	8e af       	std	Y+62, r24	; 0x3e
     52a:	9f af       	std	Y+63, r25	; 0x3f
     52c:	e9 97       	sbiw	r28, 0x39	; 57
     52e:	e7 96       	adiw	r28, 0x37	; 55
     530:	8e ad       	ldd	r24, Y+62	; 0x3e
     532:	9f ad       	ldd	r25, Y+63	; 0x3f
     534:	e7 97       	sbiw	r28, 0x37	; 55
     536:	9e a3       	std	Y+38, r25	; 0x26
     538:	8d a3       	std	Y+37, r24	; 0x25
     53a:	8d a1       	ldd	r24, Y+37	; 0x25
     53c:	9e a1       	ldd	r25, Y+38	; 0x26
     53e:	9a a7       	std	Y+42, r25	; 0x2a
     540:	89 a7       	std	Y+41, r24	; 0x29
	__asm__ volatile (
     542:	89 a5       	ldd	r24, Y+41	; 0x29
     544:	9a a5       	ldd	r25, Y+42	; 0x2a
     546:	01 97       	sbiw	r24, 0x01	; 1
     548:	f1 f7       	brne	.-4      	; 0x546 <__stack+0xe7>
     54a:	9a a7       	std	Y+42, r25	; 0x2a
     54c:	89 a7       	std	Y+41, r24	; 0x29
}
     54e:	00 00       	nop
		/* use delay that can user up his hand fron keypad */
		_delay_ms(DELAY_TIME);

		do {
			key_num = KeyPad_getPressedKey(); /* receive press key from KeyPad */
     550:	0e 94 c4 04 	call	0x988	; 0x988 <KeyPad_getPressedKey>
     554:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <__data_end>
			/* check that pressed kry is number or operator */
			if ((key_num <= 57) && (key_num >= 48)) {
     558:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <__data_end>
     55c:	8a 33       	cpi	r24, 0x3A	; 58
     55e:	b8 f5       	brcc	.+110    	; 0x5ce <__stack+0x16f>
     560:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <__data_end>
     564:	80 33       	cpi	r24, 0x30	; 48
     566:	98 f1       	brcs	.+102    	; 0x5ce <__stack+0x16f>
				LCD_displayCharacter(key_num);		/* if pressed key is number show it in lcd screen */
     568:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <__data_end>
     56c:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <LCD_displayCharacter>
				num2 = (sint32) (key_num - 48) + (num2 * 10);	/* and update number 2 value*/
     570:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <__data_end>
     574:	88 2f       	mov	r24, r24
     576:	90 e0       	ldi	r25, 0x00	; 0
     578:	c0 97       	sbiw	r24, 0x30	; 48
     57a:	8c 01       	movw	r16, r24
     57c:	99 0f       	add	r25, r25
     57e:	22 0b       	sbc	r18, r18
     580:	33 0b       	sbc	r19, r19
     582:	40 91 71 00 	lds	r20, 0x0071	; 0x800071 <num2>
     586:	50 91 72 00 	lds	r21, 0x0072	; 0x800072 <num2+0x1>
     58a:	60 91 73 00 	lds	r22, 0x0073	; 0x800073 <num2+0x2>
     58e:	70 91 74 00 	lds	r23, 0x0074	; 0x800074 <num2+0x3>
     592:	db 01       	movw	r26, r22
     594:	ca 01       	movw	r24, r20
     596:	88 0f       	add	r24, r24
     598:	99 1f       	adc	r25, r25
     59a:	aa 1f       	adc	r26, r26
     59c:	bb 1f       	adc	r27, r27
     59e:	88 0f       	add	r24, r24
     5a0:	99 1f       	adc	r25, r25
     5a2:	aa 1f       	adc	r26, r26
     5a4:	bb 1f       	adc	r27, r27
     5a6:	84 0f       	add	r24, r20
     5a8:	95 1f       	adc	r25, r21
     5aa:	a6 1f       	adc	r26, r22
     5ac:	b7 1f       	adc	r27, r23
     5ae:	88 0f       	add	r24, r24
     5b0:	99 1f       	adc	r25, r25
     5b2:	aa 1f       	adc	r26, r26
     5b4:	bb 1f       	adc	r27, r27
     5b6:	80 0f       	add	r24, r16
     5b8:	91 1f       	adc	r25, r17
     5ba:	a2 1f       	adc	r26, r18
     5bc:	b3 1f       	adc	r27, r19
     5be:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <num2>
     5c2:	90 93 72 00 	sts	0x0072, r25	; 0x800072 <num2+0x1>
     5c6:	a0 93 73 00 	sts	0x0073, r26	; 0x800073 <num2+0x2>
     5ca:	b0 93 74 00 	sts	0x0074, r27	; 0x800074 <num2+0x3>
     5ce:	80 e0       	ldi	r24, 0x00	; 0
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	a6 e9       	ldi	r26, 0x96	; 150
     5d4:	b3 e4       	ldi	r27, 0x43	; 67
     5d6:	8b a7       	std	Y+43, r24	; 0x2b
     5d8:	9c a7       	std	Y+44, r25	; 0x2c
     5da:	ad a7       	std	Y+45, r26	; 0x2d
     5dc:	be a7       	std	Y+46, r27	; 0x2e
	__tmp = ((F_CPU) / 4e3) * __ms;
     5de:	20 e0       	ldi	r18, 0x00	; 0
     5e0:	30 e0       	ldi	r19, 0x00	; 0
     5e2:	4a e7       	ldi	r20, 0x7A	; 122
     5e4:	53 e4       	ldi	r21, 0x43	; 67
     5e6:	6b a5       	ldd	r22, Y+43	; 0x2b
     5e8:	7c a5       	ldd	r23, Y+44	; 0x2c
     5ea:	8d a5       	ldd	r24, Y+45	; 0x2d
     5ec:	9e a5       	ldd	r25, Y+46	; 0x2e
     5ee:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <__mulsf3>
     5f2:	ed 96       	adiw	r28, 0x3d	; 61
     5f4:	6c af       	std	Y+60, r22	; 0x3c
     5f6:	7d af       	std	Y+61, r23	; 0x3d
     5f8:	8e af       	std	Y+62, r24	; 0x3e
     5fa:	9f af       	std	Y+63, r25	; 0x3f
     5fc:	ed 97       	sbiw	r28, 0x3d	; 61
     5fe:	ed 96       	adiw	r28, 0x3d	; 61
     600:	8c ad       	ldd	r24, Y+60	; 0x3c
     602:	9d ad       	ldd	r25, Y+61	; 0x3d
     604:	ae ad       	ldd	r26, Y+62	; 0x3e
     606:	bf ad       	ldd	r27, Y+63	; 0x3f
     608:	ed 97       	sbiw	r28, 0x3d	; 61
     60a:	8f a7       	std	Y+47, r24	; 0x2f
     60c:	98 ab       	std	Y+48, r25	; 0x30
     60e:	a9 ab       	std	Y+49, r26	; 0x31
     610:	ba ab       	std	Y+50, r27	; 0x32
	if (__tmp < 1.0)
     612:	20 e0       	ldi	r18, 0x00	; 0
     614:	30 e0       	ldi	r19, 0x00	; 0
     616:	40 e8       	ldi	r20, 0x80	; 128
     618:	5f e3       	ldi	r21, 0x3F	; 63
     61a:	6f a5       	ldd	r22, Y+47	; 0x2f
     61c:	78 a9       	ldd	r23, Y+48	; 0x30
     61e:	89 a9       	ldd	r24, Y+49	; 0x31
     620:	9a a9       	ldd	r25, Y+50	; 0x32
     622:	0e 94 cb 13 	call	0x2796	; 0x2796 <__cmpsf2>
     626:	88 23       	and	r24, r24
     628:	2c f4       	brge	.+10     	; 0x634 <__stack+0x1d5>
		__ticks = 1;
     62a:	81 e0       	ldi	r24, 0x01	; 1
     62c:	90 e0       	ldi	r25, 0x00	; 0
     62e:	9c ab       	std	Y+52, r25	; 0x34
     630:	8b ab       	std	Y+51, r24	; 0x33
     632:	71 c0       	rjmp	.+226    	; 0x716 <__stack+0x2b7>
	else if (__tmp > 65535)
     634:	20 e0       	ldi	r18, 0x00	; 0
     636:	3f ef       	ldi	r19, 0xFF	; 255
     638:	4f e7       	ldi	r20, 0x7F	; 127
     63a:	57 e4       	ldi	r21, 0x47	; 71
     63c:	6f a5       	ldd	r22, Y+47	; 0x2f
     63e:	78 a9       	ldd	r23, Y+48	; 0x30
     640:	89 a9       	ldd	r24, Y+49	; 0x31
     642:	9a a9       	ldd	r25, Y+50	; 0x32
     644:	0e 94 e6 14 	call	0x29cc	; 0x29cc <__gesf2>
     648:	18 16       	cp	r1, r24
     64a:	0c f0       	brlt	.+2      	; 0x64e <__stack+0x1ef>
     64c:	4e c0       	rjmp	.+156    	; 0x6ea <__stack+0x28b>
		__ticks = (uint16_t) (__ms * 10.0);
     64e:	20 e0       	ldi	r18, 0x00	; 0
     650:	30 e0       	ldi	r19, 0x00	; 0
     652:	40 e2       	ldi	r20, 0x20	; 32
     654:	51 e4       	ldi	r21, 0x41	; 65
     656:	6b a5       	ldd	r22, Y+43	; 0x2b
     658:	7c a5       	ldd	r23, Y+44	; 0x2c
     65a:	8d a5       	ldd	r24, Y+45	; 0x2d
     65c:	9e a5       	ldd	r25, Y+46	; 0x2e
     65e:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <__mulsf3>
     662:	c3 58       	subi	r28, 0x83	; 131
     664:	df 4f       	sbci	r29, 0xFF	; 255
     666:	68 83       	st	Y, r22
     668:	79 83       	std	Y+1, r23	; 0x01
     66a:	8a 83       	std	Y+2, r24	; 0x02
     66c:	9b 83       	std	Y+3, r25	; 0x03
     66e:	cd 57       	subi	r28, 0x7D	; 125
     670:	d0 40       	sbci	r29, 0x00	; 0
     672:	c3 58       	subi	r28, 0x83	; 131
     674:	df 4f       	sbci	r29, 0xFF	; 255
     676:	88 81       	ld	r24, Y
     678:	99 81       	ldd	r25, Y+1	; 0x01
     67a:	aa 81       	ldd	r26, Y+2	; 0x02
     67c:	bb 81       	ldd	r27, Y+3	; 0x03
     67e:	cd 57       	subi	r28, 0x7D	; 125
     680:	d0 40       	sbci	r29, 0x00	; 0
     682:	29 96       	adiw	r28, 0x09	; 9
     684:	8c af       	std	Y+60, r24	; 0x3c
     686:	9d af       	std	Y+61, r25	; 0x3d
     688:	ae af       	std	Y+62, r26	; 0x3e
     68a:	bf af       	std	Y+63, r27	; 0x3f
     68c:	29 97       	sbiw	r28, 0x09	; 9
     68e:	29 96       	adiw	r28, 0x09	; 9
     690:	6c ad       	ldd	r22, Y+60	; 0x3c
     692:	7d ad       	ldd	r23, Y+61	; 0x3d
     694:	8e ad       	ldd	r24, Y+62	; 0x3e
     696:	9f ad       	ldd	r25, Y+63	; 0x3f
     698:	29 97       	sbiw	r28, 0x09	; 9
     69a:	0e 94 42 14 	call	0x2884	; 0x2884 <__fixunssfsi>
     69e:	cf 57       	subi	r28, 0x7F	; 127
     6a0:	df 4f       	sbci	r29, 0xFF	; 255
     6a2:	68 83       	st	Y, r22
     6a4:	79 83       	std	Y+1, r23	; 0x01
     6a6:	8a 83       	std	Y+2, r24	; 0x02
     6a8:	9b 83       	std	Y+3, r25	; 0x03
     6aa:	c1 58       	subi	r28, 0x81	; 129
     6ac:	d0 40       	sbci	r29, 0x00	; 0
     6ae:	cf 57       	subi	r28, 0x7F	; 127
     6b0:	df 4f       	sbci	r29, 0xFF	; 255
     6b2:	a8 81       	ld	r26, Y
     6b4:	b9 81       	ldd	r27, Y+1	; 0x01
     6b6:	c1 58       	subi	r28, 0x81	; 129
     6b8:	d0 40       	sbci	r29, 0x00	; 0
     6ba:	bc ab       	std	Y+52, r27	; 0x34
     6bc:	ab ab       	std	Y+51, r26	; 0x33
		while(__ticks)
     6be:	10 c0       	rjmp	.+32     	; 0x6e0 <__stack+0x281>
     6c0:	89 e1       	ldi	r24, 0x19	; 25
     6c2:	90 e0       	ldi	r25, 0x00	; 0
     6c4:	9e ab       	std	Y+54, r25	; 0x36
     6c6:	8d ab       	std	Y+53, r24	; 0x35
	__asm__ volatile (
     6c8:	8d a9       	ldd	r24, Y+53	; 0x35
     6ca:	9e a9       	ldd	r25, Y+54	; 0x36
     6cc:	01 97       	sbiw	r24, 0x01	; 1
     6ce:	f1 f7       	brne	.-4      	; 0x6cc <__stack+0x26d>
     6d0:	9e ab       	std	Y+54, r25	; 0x36
     6d2:	8d ab       	std	Y+53, r24	; 0x35
}
     6d4:	00 00       	nop
			__ticks --;
     6d6:	8b a9       	ldd	r24, Y+51	; 0x33
     6d8:	9c a9       	ldd	r25, Y+52	; 0x34
     6da:	01 97       	sbiw	r24, 0x01	; 1
     6dc:	9c ab       	std	Y+52, r25	; 0x34
     6de:	8b ab       	std	Y+51, r24	; 0x33
		while(__ticks)
     6e0:	8b a9       	ldd	r24, Y+51	; 0x33
     6e2:	9c a9       	ldd	r25, Y+52	; 0x34
     6e4:	89 2b       	or	r24, r25
     6e6:	61 f7       	brne	.-40     	; 0x6c0 <__stack+0x261>
		return;
     6e8:	21 c0       	rjmp	.+66     	; 0x72c <__stack+0x2cd>
		__ticks = (uint16_t)__tmp;
     6ea:	6f a5       	ldd	r22, Y+47	; 0x2f
     6ec:	78 a9       	ldd	r23, Y+48	; 0x30
     6ee:	89 a9       	ldd	r24, Y+49	; 0x31
     6f0:	9a a9       	ldd	r25, Y+50	; 0x32
     6f2:	0e 94 42 14 	call	0x2884	; 0x2884 <__fixunssfsi>
     6f6:	cb 57       	subi	r28, 0x7B	; 123
     6f8:	df 4f       	sbci	r29, 0xFF	; 255
     6fa:	68 83       	st	Y, r22
     6fc:	79 83       	std	Y+1, r23	; 0x01
     6fe:	8a 83       	std	Y+2, r24	; 0x02
     700:	9b 83       	std	Y+3, r25	; 0x03
     702:	c5 58       	subi	r28, 0x85	; 133
     704:	d0 40       	sbci	r29, 0x00	; 0
     706:	cb 57       	subi	r28, 0x7B	; 123
     708:	df 4f       	sbci	r29, 0xFF	; 255
     70a:	88 81       	ld	r24, Y
     70c:	99 81       	ldd	r25, Y+1	; 0x01
     70e:	c5 58       	subi	r28, 0x85	; 133
     710:	d0 40       	sbci	r29, 0x00	; 0
     712:	9c ab       	std	Y+52, r25	; 0x34
     714:	8b ab       	std	Y+51, r24	; 0x33
     716:	8b a9       	ldd	r24, Y+51	; 0x33
     718:	9c a9       	ldd	r25, Y+52	; 0x34
     71a:	98 af       	std	Y+56, r25	; 0x38
     71c:	8f ab       	std	Y+55, r24	; 0x37
	__asm__ volatile (
     71e:	8f a9       	ldd	r24, Y+55	; 0x37
     720:	98 ad       	ldd	r25, Y+56	; 0x38
     722:	01 97       	sbiw	r24, 0x01	; 1
     724:	f1 f7       	brne	.-4      	; 0x722 <__stack+0x2c3>
     726:	98 af       	std	Y+56, r25	; 0x38
     728:	8f ab       	std	Y+55, r24	; 0x37
}
     72a:	00 00       	nop
			}
			/* use delay that can user up his hand fron keypad */
			_delay_ms(DELAY_TIME);

		} while (((key_num <= 57) && (key_num >= 48)) || (num2 == 0));
     72c:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <__data_end>
     730:	8a 33       	cpi	r24, 0x3A	; 58
     732:	28 f4       	brcc	.+10     	; 0x73e <__stack+0x2df>
     734:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <__data_end>
     738:	80 33       	cpi	r24, 0x30	; 48
     73a:	08 f0       	brcs	.+2      	; 0x73e <__stack+0x2df>
     73c:	09 cf       	rjmp	.-494    	; 0x550 <__stack+0xf1>
     73e:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <num2>
     742:	90 91 72 00 	lds	r25, 0x0072	; 0x800072 <num2+0x1>
     746:	a0 91 73 00 	lds	r26, 0x0073	; 0x800073 <num2+0x2>
     74a:	b0 91 74 00 	lds	r27, 0x0074	; 0x800074 <num2+0x3>
     74e:	89 2b       	or	r24, r25
     750:	8a 2b       	or	r24, r26
     752:	8b 2b       	or	r24, r27
     754:	09 f4       	brne	.+2      	; 0x758 <__stack+0x2f9>
     756:	fc ce       	rjmp	.-520    	; 0x550 <__stack+0xf1>

		/* stay in while loop untill user pressed on equal key*/
		while (key_num != '=') {
     758:	04 c0       	rjmp	.+8      	; 0x762 <__stack+0x303>
			key_num = KeyPad_getPressedKey();  /* receive press key from KeyPad */
     75a:	0e 94 c4 04 	call	0x988	; 0x988 <KeyPad_getPressedKey>
     75e:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <__data_end>
		while (key_num != '=') {
     762:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <__data_end>
     766:	8d 33       	cpi	r24, 0x3D	; 61
     768:	c1 f7       	brne	.-16     	; 0x75a <__stack+0x2fb>
		}
		LCD_displayCharacter(key_num);		/* display equal operator on lcd screen*/
     76a:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <__data_end>
     76e:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <LCD_displayCharacter>
		resultfun(); /* calculate the result */
     772:	0e 94 f7 03 	call	0x7ee	; 0x7ee <resultfun>
		LCD_intgerToString(result);	/* print the result on lcd screen */
     776:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <result>
     77a:	90 91 77 00 	lds	r25, 0x0077	; 0x800077 <result+0x1>
     77e:	a0 91 78 00 	lds	r26, 0x0078	; 0x800078 <result+0x2>
     782:	b0 91 79 00 	lds	r27, 0x0079	; 0x800079 <result+0x3>
     786:	0e 94 ef 10 	call	0x21de	; 0x21de <LCD_intgerToString>
		/* stay in this while loop untill clear key */
		while (key_num != 8) {
     78a:	04 c0       	rjmp	.+8      	; 0x794 <__stack+0x335>
			key_num = KeyPad_getPressedKey();	/* receive press key from KeyPad */
     78c:	0e 94 c4 04 	call	0x988	; 0x988 <KeyPad_getPressedKey>
     790:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <__data_end>
		while (key_num != 8) {
     794:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <__data_end>
     798:	88 30       	cpi	r24, 0x08	; 8
     79a:	c1 f7       	brne	.-16     	; 0x78c <__stack+0x32d>
		}

		/* initalize all varable again*/
		key_num = 0;
     79c:	10 92 6c 00 	sts	0x006C, r1	; 0x80006c <__data_end>
		num1 = 0;
     7a0:	10 92 6d 00 	sts	0x006D, r1	; 0x80006d <num1>
     7a4:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <num1+0x1>
     7a8:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <num1+0x2>
     7ac:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <num1+0x3>
		num2 = 0;
     7b0:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <num2>
     7b4:	10 92 72 00 	sts	0x0072, r1	; 0x800072 <num2+0x1>
     7b8:	10 92 73 00 	sts	0x0073, r1	; 0x800073 <num2+0x2>
     7bc:	10 92 74 00 	sts	0x0074, r1	; 0x800074 <num2+0x3>
		operand = 0;
     7c0:	10 92 75 00 	sts	0x0075, r1	; 0x800075 <operand>
		result = 0;
     7c4:	10 92 76 00 	sts	0x0076, r1	; 0x800076 <result>
     7c8:	10 92 77 00 	sts	0x0077, r1	; 0x800077 <result+0x1>
     7cc:	10 92 78 00 	sts	0x0078, r1	; 0x800078 <result+0x2>
     7d0:	10 92 79 00 	sts	0x0079, r1	; 0x800079 <result+0x3>
		LCD_clearScreen();	/*  clear LCD Screen to start enter equation */
     7d4:	17 cd       	rjmp	.-1490   	; 0x204 <main+0x172>

000007d6 <operator>:
}

/*
 * Description: Function to store operator type .
 */
void operator(void) {
     7d6:	cf 93       	push	r28
     7d8:	df 93       	push	r29
     7da:	cd b7       	in	r28, 0x3d	; 61
     7dc:	de b7       	in	r29, 0x3e	; 62
	operand = key_num; /* stor operator type */
     7de:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <__data_end>
     7e2:	80 93 75 00 	sts	0x0075, r24	; 0x800075 <operand>

	return;
     7e6:	00 00       	nop
}
     7e8:	df 91       	pop	r29
     7ea:	cf 91       	pop	r28
     7ec:	08 95       	ret

000007ee <resultfun>:

/*
 * Description: Function to calculate the result of equation that enter by user .
 */
void resultfun(void) {
     7ee:	0f 93       	push	r16
     7f0:	1f 93       	push	r17
     7f2:	cf 93       	push	r28
     7f4:	df 93       	push	r29
     7f6:	cd b7       	in	r28, 0x3d	; 61
     7f8:	de b7       	in	r29, 0x3e	; 62
     7fa:	2c 97       	sbiw	r28, 0x0c	; 12
     7fc:	0f b6       	in	r0, 0x3f	; 63
     7fe:	f8 94       	cli
     800:	de bf       	out	0x3e, r29	; 62
     802:	0f be       	out	0x3f, r0	; 63
     804:	cd bf       	out	0x3d, r28	; 61

	switch (operand) {
     806:	80 91 75 00 	lds	r24, 0x0075	; 0x800075 <operand>
     80a:	88 2f       	mov	r24, r24
     80c:	90 e0       	ldi	r25, 0x00	; 0
     80e:	8f 32       	cpi	r24, 0x2F	; 47
     810:	91 05       	cpc	r25, r1
     812:	09 f4       	brne	.+2      	; 0x816 <resultfun+0x28>
     814:	7d c0       	rjmp	.+250    	; 0x910 <resultfun+0x122>
     816:	80 33       	cpi	r24, 0x30	; 48
     818:	91 05       	cpc	r25, r1
     81a:	0c f0       	brlt	.+2      	; 0x81e <resultfun+0x30>
     81c:	a0 c0       	rjmp	.+320    	; 0x95e <resultfun+0x170>
     81e:	8d 32       	cpi	r24, 0x2D	; 45
     820:	91 05       	cpc	r25, r1
     822:	41 f1       	breq	.+80     	; 0x874 <resultfun+0x86>
     824:	8e 32       	cpi	r24, 0x2E	; 46
     826:	91 05       	cpc	r25, r1
     828:	0c f0       	brlt	.+2      	; 0x82c <resultfun+0x3e>
     82a:	99 c0       	rjmp	.+306    	; 0x95e <resultfun+0x170>
     82c:	8a 32       	cpi	r24, 0x2A	; 42
     82e:	91 05       	cpc	r25, r1
     830:	09 f4       	brne	.+2      	; 0x834 <resultfun+0x46>
     832:	41 c0       	rjmp	.+130    	; 0x8b6 <resultfun+0xc8>
     834:	8b 97       	sbiw	r24, 0x2b	; 43
     836:	09 f0       	breq	.+2      	; 0x83a <resultfun+0x4c>
     838:	92 c0       	rjmp	.+292    	; 0x95e <resultfun+0x170>
	case 43:
		result = num1 + num2;
     83a:	40 91 6d 00 	lds	r20, 0x006D	; 0x80006d <num1>
     83e:	50 91 6e 00 	lds	r21, 0x006E	; 0x80006e <num1+0x1>
     842:	60 91 6f 00 	lds	r22, 0x006F	; 0x80006f <num1+0x2>
     846:	70 91 70 00 	lds	r23, 0x0070	; 0x800070 <num1+0x3>
     84a:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <num2>
     84e:	90 91 72 00 	lds	r25, 0x0072	; 0x800072 <num2+0x1>
     852:	a0 91 73 00 	lds	r26, 0x0073	; 0x800073 <num2+0x2>
     856:	b0 91 74 00 	lds	r27, 0x0074	; 0x800074 <num2+0x3>
     85a:	84 0f       	add	r24, r20
     85c:	95 1f       	adc	r25, r21
     85e:	a6 1f       	adc	r26, r22
     860:	b7 1f       	adc	r27, r23
     862:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <result>
     866:	90 93 77 00 	sts	0x0077, r25	; 0x800077 <result+0x1>
     86a:	a0 93 78 00 	sts	0x0078, r26	; 0x800078 <result+0x2>
     86e:	b0 93 79 00 	sts	0x0079, r27	; 0x800079 <result+0x3>
		break;
     872:	7e c0       	rjmp	.+252    	; 0x970 <resultfun+0x182>
	case 45:
		result = num1 - num2;
     874:	40 91 6d 00 	lds	r20, 0x006D	; 0x80006d <num1>
     878:	50 91 6e 00 	lds	r21, 0x006E	; 0x80006e <num1+0x1>
     87c:	60 91 6f 00 	lds	r22, 0x006F	; 0x80006f <num1+0x2>
     880:	70 91 70 00 	lds	r23, 0x0070	; 0x800070 <num1+0x3>
     884:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <num2>
     888:	90 91 72 00 	lds	r25, 0x0072	; 0x800072 <num2+0x1>
     88c:	a0 91 73 00 	lds	r26, 0x0073	; 0x800073 <num2+0x2>
     890:	b0 91 74 00 	lds	r27, 0x0074	; 0x800074 <num2+0x3>
     894:	8a 01       	movw	r16, r20
     896:	9b 01       	movw	r18, r22
     898:	08 1b       	sub	r16, r24
     89a:	19 0b       	sbc	r17, r25
     89c:	2a 0b       	sbc	r18, r26
     89e:	3b 0b       	sbc	r19, r27
     8a0:	d9 01       	movw	r26, r18
     8a2:	c8 01       	movw	r24, r16
     8a4:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <result>
     8a8:	90 93 77 00 	sts	0x0077, r25	; 0x800077 <result+0x1>
     8ac:	a0 93 78 00 	sts	0x0078, r26	; 0x800078 <result+0x2>
     8b0:	b0 93 79 00 	sts	0x0079, r27	; 0x800079 <result+0x3>
		break;
     8b4:	5d c0       	rjmp	.+186    	; 0x970 <resultfun+0x182>
	case 42:
		result = num1 * num2;
     8b6:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <num1>
     8ba:	90 91 6e 00 	lds	r25, 0x006E	; 0x80006e <num1+0x1>
     8be:	a0 91 6f 00 	lds	r26, 0x006F	; 0x80006f <num1+0x2>
     8c2:	b0 91 70 00 	lds	r27, 0x0070	; 0x800070 <num1+0x3>
     8c6:	20 91 71 00 	lds	r18, 0x0071	; 0x800071 <num2>
     8ca:	30 91 72 00 	lds	r19, 0x0072	; 0x800072 <num2+0x1>
     8ce:	40 91 73 00 	lds	r20, 0x0073	; 0x800073 <num2+0x2>
     8d2:	50 91 74 00 	lds	r21, 0x0074	; 0x800074 <num2+0x3>
     8d6:	29 83       	std	Y+1, r18	; 0x01
     8d8:	3a 83       	std	Y+2, r19	; 0x02
     8da:	4b 83       	std	Y+3, r20	; 0x03
     8dc:	5c 83       	std	Y+4, r21	; 0x04
     8de:	9c 01       	movw	r18, r24
     8e0:	ad 01       	movw	r20, r26
     8e2:	69 81       	ldd	r22, Y+1	; 0x01
     8e4:	7a 81       	ldd	r23, Y+2	; 0x02
     8e6:	8b 81       	ldd	r24, Y+3	; 0x03
     8e8:	9c 81       	ldd	r25, Y+4	; 0x04
     8ea:	0e 94 5a 13 	call	0x26b4	; 0x26b4 <__mulsi3>
     8ee:	6d 83       	std	Y+5, r22	; 0x05
     8f0:	7e 83       	std	Y+6, r23	; 0x06
     8f2:	8f 83       	std	Y+7, r24	; 0x07
     8f4:	98 87       	std	Y+8, r25	; 0x08
     8f6:	8d 81       	ldd	r24, Y+5	; 0x05
     8f8:	9e 81       	ldd	r25, Y+6	; 0x06
     8fa:	af 81       	ldd	r26, Y+7	; 0x07
     8fc:	b8 85       	ldd	r27, Y+8	; 0x08
     8fe:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <result>
     902:	90 93 77 00 	sts	0x0077, r25	; 0x800077 <result+0x1>
     906:	a0 93 78 00 	sts	0x0078, r26	; 0x800078 <result+0x2>
     90a:	b0 93 79 00 	sts	0x0079, r27	; 0x800079 <result+0x3>
		break;
     90e:	30 c0       	rjmp	.+96     	; 0x970 <resultfun+0x182>
	case 47:
		result = num1 / num2;
     910:	00 91 6d 00 	lds	r16, 0x006D	; 0x80006d <num1>
     914:	10 91 6e 00 	lds	r17, 0x006E	; 0x80006e <num1+0x1>
     918:	20 91 6f 00 	lds	r18, 0x006F	; 0x80006f <num1+0x2>
     91c:	30 91 70 00 	lds	r19, 0x0070	; 0x800070 <num1+0x3>
     920:	09 87       	std	Y+9, r16	; 0x09
     922:	1a 87       	std	Y+10, r17	; 0x0a
     924:	2b 87       	std	Y+11, r18	; 0x0b
     926:	3c 87       	std	Y+12, r19	; 0x0c
     928:	00 91 71 00 	lds	r16, 0x0071	; 0x800071 <num2>
     92c:	10 91 72 00 	lds	r17, 0x0072	; 0x800072 <num2+0x1>
     930:	20 91 73 00 	lds	r18, 0x0073	; 0x800073 <num2+0x2>
     934:	30 91 74 00 	lds	r19, 0x0074	; 0x800074 <num2+0x3>
     938:	69 85       	ldd	r22, Y+9	; 0x09
     93a:	7a 85       	ldd	r23, Y+10	; 0x0a
     93c:	8b 85       	ldd	r24, Y+11	; 0x0b
     93e:	9c 85       	ldd	r25, Y+12	; 0x0c
     940:	a9 01       	movw	r20, r18
     942:	98 01       	movw	r18, r16
     944:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <__divmodsi4>
     948:	da 01       	movw	r26, r20
     94a:	c9 01       	movw	r24, r18
     94c:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <result>
     950:	90 93 77 00 	sts	0x0077, r25	; 0x800077 <result+0x1>
     954:	a0 93 78 00 	sts	0x0078, r26	; 0x800078 <result+0x2>
     958:	b0 93 79 00 	sts	0x0079, r27	; 0x800079 <result+0x3>
		break;
     95c:	09 c0       	rjmp	.+18     	; 0x970 <resultfun+0x182>
	default:
		result = 0;
     95e:	10 92 76 00 	sts	0x0076, r1	; 0x800076 <result>
     962:	10 92 77 00 	sts	0x0077, r1	; 0x800077 <result+0x1>
     966:	10 92 78 00 	sts	0x0078, r1	; 0x800078 <result+0x2>
     96a:	10 92 79 00 	sts	0x0079, r1	; 0x800079 <result+0x3>
		break;
     96e:	00 00       	nop
	}

	return;
     970:	00 00       	nop
}
     972:	2c 96       	adiw	r28, 0x0c	; 12
     974:	0f b6       	in	r0, 0x3f	; 63
     976:	f8 94       	cli
     978:	de bf       	out	0x3e, r29	; 62
     97a:	0f be       	out	0x3f, r0	; 63
     97c:	cd bf       	out	0x3d, r28	; 61
     97e:	df 91       	pop	r29
     980:	cf 91       	pop	r28
     982:	1f 91       	pop	r17
     984:	0f 91       	pop	r16
     986:	08 95       	ret

00000988 <KeyPad_getPressedKey>:


/*
 * Function responsible for getting the pressed keypad key
 */
uint8 KeyPad_getPressedKey(void) {
     988:	cf 93       	push	r28
     98a:	df 93       	push	r29
     98c:	00 d0       	rcall	.+0      	; 0x98e <KeyPad_getPressedKey+0x6>
     98e:	cd b7       	in	r28, 0x3d	; 61
     990:	de b7       	in	r29, 0x3e	; 62

	uint8 col,row;
		while(1)
		{
			for(col=0;col<N_col;col++) /* loop for columns */
     992:	19 82       	std	Y+1, r1	; 0x01
     994:	47 c0       	rjmp	.+142    	; 0xa24 <KeyPad_getPressedKey+0x9c>
			{
				/*
				 * each time only one of the column pins will be output and
				 * the rest will be input pins include the row pins
				 */
				KEYPAD_DIR = (0b00010000<<col);
     996:	89 81       	ldd	r24, Y+1	; 0x01
     998:	28 2f       	mov	r18, r24
     99a:	30 e0       	ldi	r19, 0x00	; 0
     99c:	80 e1       	ldi	r24, 0x10	; 16
     99e:	90 e0       	ldi	r25, 0x00	; 0
     9a0:	ac 01       	movw	r20, r24
     9a2:	02 c0       	rjmp	.+4      	; 0x9a8 <KeyPad_getPressedKey+0x20>
     9a4:	44 0f       	add	r20, r20
     9a6:	55 1f       	adc	r21, r21
     9a8:	2a 95       	dec	r18
     9aa:	e2 f7       	brpl	.-8      	; 0x9a4 <KeyPad_getPressedKey+0x1c>
     9ac:	9a 01       	movw	r18, r20
     9ae:	8a e3       	ldi	r24, 0x3A	; 58
     9b0:	90 e0       	ldi	r25, 0x00	; 0
     9b2:	fc 01       	movw	r30, r24
     9b4:	20 83       	st	Z, r18

				/*
				 * clear the output pin column in this trace and enable the internal
				 * pull up resistors for the rows pins
				 */
				KEYPAD_PORT = (~(0b00010000<<col));
     9b6:	89 81       	ldd	r24, Y+1	; 0x01
     9b8:	28 2f       	mov	r18, r24
     9ba:	30 e0       	ldi	r19, 0x00	; 0
     9bc:	80 e1       	ldi	r24, 0x10	; 16
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	02 c0       	rjmp	.+4      	; 0x9c6 <KeyPad_getPressedKey+0x3e>
     9c2:	88 0f       	add	r24, r24
     9c4:	99 1f       	adc	r25, r25
     9c6:	2a 95       	dec	r18
     9c8:	e2 f7       	brpl	.-8      	; 0x9c2 <KeyPad_getPressedKey+0x3a>
     9ca:	28 2f       	mov	r18, r24
     9cc:	8b e3       	ldi	r24, 0x3B	; 59
     9ce:	90 e0       	ldi	r25, 0x00	; 0
     9d0:	20 95       	com	r18
     9d2:	fc 01       	movw	r30, r24
     9d4:	20 83       	st	Z, r18
				for(row=0;row<N_row;row++) /* loop for rows */
     9d6:	1a 82       	std	Y+2, r1	; 0x02
     9d8:	1f c0       	rjmp	.+62     	; 0xa18 <KeyPad_getPressedKey+0x90>
				{
					if(BIT_IS_CLEAR(KEYPAD_PIN,row)) /* if the switch is press in this row */
     9da:	89 e3       	ldi	r24, 0x39	; 57
     9dc:	90 e0       	ldi	r25, 0x00	; 0
     9de:	fc 01       	movw	r30, r24
     9e0:	80 81       	ld	r24, Z
     9e2:	88 2f       	mov	r24, r24
     9e4:	90 e0       	ldi	r25, 0x00	; 0
     9e6:	2a 81       	ldd	r18, Y+2	; 0x02
     9e8:	22 2f       	mov	r18, r18
     9ea:	30 e0       	ldi	r19, 0x00	; 0
     9ec:	02 c0       	rjmp	.+4      	; 0x9f2 <KeyPad_getPressedKey+0x6a>
     9ee:	95 95       	asr	r25
     9f0:	87 95       	ror	r24
     9f2:	2a 95       	dec	r18
     9f4:	e2 f7       	brpl	.-8      	; 0x9ee <KeyPad_getPressedKey+0x66>
     9f6:	81 70       	andi	r24, 0x01	; 1
     9f8:	99 27       	eor	r25, r25
     9fa:	89 2b       	or	r24, r25
     9fc:	51 f4       	brne	.+20     	; 0xa12 <KeyPad_getPressedKey+0x8a>
					{
						#if (N_col == 3)
							return KeyPad_4x3_ReturnASCII((row*N_col)+col+1);
						#elif (N_col == 4)
							return KeyPad_4x4_ReturnASCII((row*N_col)+col+1);
     9fe:	8a 81       	ldd	r24, Y+2	; 0x02
     a00:	98 2f       	mov	r25, r24
     a02:	99 0f       	add	r25, r25
     a04:	99 0f       	add	r25, r25
     a06:	89 81       	ldd	r24, Y+1	; 0x01
     a08:	89 0f       	add	r24, r25
     a0a:	8f 5f       	subi	r24, 0xFF	; 255
     a0c:	0e 94 1c 05 	call	0xa38	; 0xa38 <KeyPad_4x4_ReturnASCII>
     a10:	0e c0       	rjmp	.+28     	; 0xa2e <KeyPad_getPressedKey+0xa6>
				for(row=0;row<N_row;row++) /* loop for rows */
     a12:	8a 81       	ldd	r24, Y+2	; 0x02
     a14:	8f 5f       	subi	r24, 0xFF	; 255
     a16:	8a 83       	std	Y+2, r24	; 0x02
     a18:	8a 81       	ldd	r24, Y+2	; 0x02
     a1a:	84 30       	cpi	r24, 0x04	; 4
     a1c:	f0 f2       	brcs	.-68     	; 0x9da <KeyPad_getPressedKey+0x52>
			for(col=0;col<N_col;col++) /* loop for columns */
     a1e:	89 81       	ldd	r24, Y+1	; 0x01
     a20:	8f 5f       	subi	r24, 0xFF	; 255
     a22:	89 83       	std	Y+1, r24	; 0x01
     a24:	89 81       	ldd	r24, Y+1	; 0x01
     a26:	84 30       	cpi	r24, 0x04	; 4
     a28:	08 f4       	brcc	.+2      	; 0xa2c <KeyPad_getPressedKey+0xa4>
     a2a:	b5 cf       	rjmp	.-150    	; 0x996 <KeyPad_getPressedKey+0xe>
     a2c:	b2 cf       	rjmp	.-156    	; 0x992 <KeyPad_getPressedKey+0xa>
						#endif
					}
				}
			}
		}
	}
     a2e:	0f 90       	pop	r0
     a30:	0f 90       	pop	r0
     a32:	df 91       	pop	r29
     a34:	cf 91       	pop	r28
     a36:	08 95       	ret

00000a38 <KeyPad_4x4_ReturnASCII>:
		break;
	}
	return 0;
}
#elif(N_col ==4)
static uint8 KeyPad_4x4_ReturnASCII(uint8 num) {
     a38:	cf 93       	push	r28
     a3a:	df 93       	push	r29
     a3c:	0f 92       	push	r0
     a3e:	cd b7       	in	r28, 0x3d	; 61
     a40:	de b7       	in	r29, 0x3e	; 62
     a42:	89 83       	std	Y+1, r24	; 0x01
	switch (num) {
     a44:	89 81       	ldd	r24, Y+1	; 0x01
     a46:	88 2f       	mov	r24, r24
     a48:	90 e0       	ldi	r25, 0x00	; 0
     a4a:	09 2e       	mov	r0, r25
     a4c:	00 0c       	add	r0, r0
     a4e:	aa 0b       	sbc	r26, r26
     a50:	bb 0b       	sbc	r27, r27
     a52:	01 97       	sbiw	r24, 0x01	; 1
     a54:	a1 09       	sbc	r26, r1
     a56:	b1 09       	sbc	r27, r1
     a58:	80 31       	cpi	r24, 0x10	; 16
     a5a:	91 05       	cpc	r25, r1
     a5c:	a1 05       	cpc	r26, r1
     a5e:	b1 05       	cpc	r27, r1
     a60:	28 f5       	brcc	.+74     	; 0xaac <KeyPad_4x4_ReturnASCII+0x74>
     a62:	86 56       	subi	r24, 0x66	; 102
     a64:	9a 4e       	sbci	r25, 0xEA	; 234
     a66:	fc 01       	movw	r30, r24
     a68:	0c 94 89 13 	jmp	0x2712	; 0x2712 <__tablejump2__>
	case 1:		return '7';
     a6c:	87 e3       	ldi	r24, 0x37	; 55
     a6e:	1f c0       	rjmp	.+62     	; 0xaae <KeyPad_4x4_ReturnASCII+0x76>
		break;
	case 2:		return '8';
     a70:	88 e3       	ldi	r24, 0x38	; 56
     a72:	1d c0       	rjmp	.+58     	; 0xaae <KeyPad_4x4_ReturnASCII+0x76>
		break;
	case 3:		return '9';
     a74:	89 e3       	ldi	r24, 0x39	; 57
     a76:	1b c0       	rjmp	.+54     	; 0xaae <KeyPad_4x4_ReturnASCII+0x76>
		break;
	case 4:		return '/';
     a78:	8f e2       	ldi	r24, 0x2F	; 47
     a7a:	19 c0       	rjmp	.+50     	; 0xaae <KeyPad_4x4_ReturnASCII+0x76>
		break;
	case 5:		return '4';
     a7c:	84 e3       	ldi	r24, 0x34	; 52
     a7e:	17 c0       	rjmp	.+46     	; 0xaae <KeyPad_4x4_ReturnASCII+0x76>
		break;
	case 6:		return '5';
     a80:	85 e3       	ldi	r24, 0x35	; 53
     a82:	15 c0       	rjmp	.+42     	; 0xaae <KeyPad_4x4_ReturnASCII+0x76>
		break;
	case 7:		return '6';
     a84:	86 e3       	ldi	r24, 0x36	; 54
     a86:	13 c0       	rjmp	.+38     	; 0xaae <KeyPad_4x4_ReturnASCII+0x76>
		break;
	case 8:		return '*';
     a88:	8a e2       	ldi	r24, 0x2A	; 42
     a8a:	11 c0       	rjmp	.+34     	; 0xaae <KeyPad_4x4_ReturnASCII+0x76>
		break;
	case 9:		return '1';
     a8c:	81 e3       	ldi	r24, 0x31	; 49
     a8e:	0f c0       	rjmp	.+30     	; 0xaae <KeyPad_4x4_ReturnASCII+0x76>
		break;
	case 10:	return '2';
     a90:	82 e3       	ldi	r24, 0x32	; 50
     a92:	0d c0       	rjmp	.+26     	; 0xaae <KeyPad_4x4_ReturnASCII+0x76>
		break;
	case 11:	return '3';
     a94:	83 e3       	ldi	r24, 0x33	; 51
     a96:	0b c0       	rjmp	.+22     	; 0xaae <KeyPad_4x4_ReturnASCII+0x76>
		break;
	case 12:	return '-';
     a98:	8d e2       	ldi	r24, 0x2D	; 45
     a9a:	09 c0       	rjmp	.+18     	; 0xaae <KeyPad_4x4_ReturnASCII+0x76>
		break;
	case 13:	return 8;
     a9c:	88 e0       	ldi	r24, 0x08	; 8
     a9e:	07 c0       	rjmp	.+14     	; 0xaae <KeyPad_4x4_ReturnASCII+0x76>
		break;
	case 14:	return '0';
     aa0:	80 e3       	ldi	r24, 0x30	; 48
     aa2:	05 c0       	rjmp	.+10     	; 0xaae <KeyPad_4x4_ReturnASCII+0x76>
		break;
	case 15:	return '=';
     aa4:	8d e3       	ldi	r24, 0x3D	; 61
     aa6:	03 c0       	rjmp	.+6      	; 0xaae <KeyPad_4x4_ReturnASCII+0x76>
		break;
	case 16:	return '+';
     aa8:	8b e2       	ldi	r24, 0x2B	; 43
     aaa:	01 c0       	rjmp	.+2      	; 0xaae <KeyPad_4x4_ReturnASCII+0x76>
			break;
	default:	return '\0';
     aac:	80 e0       	ldi	r24, 0x00	; 0
		break;
	}
	return 0;
}
     aae:	0f 90       	pop	r0
     ab0:	df 91       	pop	r29
     ab2:	cf 91       	pop	r28
     ab4:	08 95       	ret

00000ab6 <LCD_sendCommand>:
 *******************************************************************************/

/*
 * Function responsible for Send Order to LCD
 */
void LCD_sendCommand(uint8 command) {
     ab6:	0f 93       	push	r16
     ab8:	1f 93       	push	r17
     aba:	cf 93       	push	r28
     abc:	df 93       	push	r29
     abe:	cd b7       	in	r28, 0x3d	; 61
     ac0:	de b7       	in	r29, 0x3e	; 62
     ac2:	cd 5c       	subi	r28, 0xCD	; 205
     ac4:	d1 09       	sbc	r29, r1
     ac6:	0f b6       	in	r0, 0x3f	; 63
     ac8:	f8 94       	cli
     aca:	de bf       	out	0x3e, r29	; 62
     acc:	0f be       	out	0x3f, r0	; 63
     ace:	cd bf       	out	0x3d, r28	; 61
     ad0:	9e 01       	movw	r18, r28
     ad2:	2b 5a       	subi	r18, 0xAB	; 171
     ad4:	3f 4f       	sbci	r19, 0xFF	; 255
     ad6:	d9 01       	movw	r26, r18
     ad8:	8c 93       	st	X, r24
	RS = CLEAR; /* tell LCD that data which will send now is command */
     ada:	82 e3       	ldi	r24, 0x32	; 50
     adc:	90 e0       	ldi	r25, 0x00	; 0
     ade:	fc 01       	movw	r30, r24
     ae0:	20 81       	ld	r18, Z
     ae2:	2f 7e       	andi	r18, 0xEF	; 239
     ae4:	dc 01       	movw	r26, r24
     ae6:	2c 93       	st	X, r18
	RW = CLEAR; /* select write Mode on LCD */
     ae8:	82 e3       	ldi	r24, 0x32	; 50
     aea:	90 e0       	ldi	r25, 0x00	; 0
     aec:	fc 01       	movw	r30, r24
     aee:	20 81       	ld	r18, Z
     af0:	2f 7d       	andi	r18, 0xDF	; 223
     af2:	dc 01       	movw	r26, r24
     af4:	2c 93       	st	X, r18
     af6:	9e 01       	movw	r18, r28
     af8:	29 5b       	subi	r18, 0xB9	; 185
     afa:	3f 4f       	sbci	r19, 0xFF	; 255
     afc:	80 e0       	ldi	r24, 0x00	; 0
     afe:	90 e0       	ldi	r25, 0x00	; 0
     b00:	a0 e8       	ldi	r26, 0x80	; 128
     b02:	bf e3       	ldi	r27, 0x3F	; 63
     b04:	f9 01       	movw	r30, r18
     b06:	80 83       	st	Z, r24
     b08:	91 83       	std	Z+1, r25	; 0x01
     b0a:	a2 83       	std	Z+2, r26	; 0x02
     b0c:	b3 83       	std	Z+3, r27	; 0x03
	__tmp = ((F_CPU) / 4e3) * __ms;
     b0e:	8e 01       	movw	r16, r28
     b10:	05 5b       	subi	r16, 0xB5	; 181
     b12:	1f 4f       	sbci	r17, 0xFF	; 255
     b14:	ce 01       	movw	r24, r28
     b16:	89 5b       	subi	r24, 0xB9	; 185
     b18:	9f 4f       	sbci	r25, 0xFF	; 255
     b1a:	20 e0       	ldi	r18, 0x00	; 0
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	4a e7       	ldi	r20, 0x7A	; 122
     b20:	53 e4       	ldi	r21, 0x43	; 67
     b22:	dc 01       	movw	r26, r24
     b24:	6d 91       	ld	r22, X+
     b26:	7d 91       	ld	r23, X+
     b28:	8d 91       	ld	r24, X+
     b2a:	9c 91       	ld	r25, X
     b2c:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <__mulsf3>
     b30:	e2 96       	adiw	r28, 0x32	; 50
     b32:	6c af       	std	Y+60, r22	; 0x3c
     b34:	7d af       	std	Y+61, r23	; 0x3d
     b36:	8e af       	std	Y+62, r24	; 0x3e
     b38:	9f af       	std	Y+63, r25	; 0x3f
     b3a:	e2 97       	sbiw	r28, 0x32	; 50
     b3c:	e2 96       	adiw	r28, 0x32	; 50
     b3e:	2c ad       	ldd	r18, Y+60	; 0x3c
     b40:	3d ad       	ldd	r19, Y+61	; 0x3d
     b42:	4e ad       	ldd	r20, Y+62	; 0x3e
     b44:	5f ad       	ldd	r21, Y+63	; 0x3f
     b46:	e2 97       	sbiw	r28, 0x32	; 50
     b48:	d8 01       	movw	r26, r16
     b4a:	2d 93       	st	X+, r18
     b4c:	3d 93       	st	X+, r19
     b4e:	4d 93       	st	X+, r20
     b50:	5c 93       	st	X, r21
     b52:	13 97       	sbiw	r26, 0x03	; 3
	if (__tmp < 1.0)
     b54:	ce 01       	movw	r24, r28
     b56:	85 5b       	subi	r24, 0xB5	; 181
     b58:	9f 4f       	sbci	r25, 0xFF	; 255
     b5a:	20 e0       	ldi	r18, 0x00	; 0
     b5c:	30 e0       	ldi	r19, 0x00	; 0
     b5e:	40 e8       	ldi	r20, 0x80	; 128
     b60:	5f e3       	ldi	r21, 0x3F	; 63
     b62:	fc 01       	movw	r30, r24
     b64:	60 81       	ld	r22, Z
     b66:	71 81       	ldd	r23, Z+1	; 0x01
     b68:	82 81       	ldd	r24, Z+2	; 0x02
     b6a:	93 81       	ldd	r25, Z+3	; 0x03
     b6c:	0e 94 cb 13 	call	0x2796	; 0x2796 <__cmpsf2>
     b70:	88 23       	and	r24, r24
     b72:	4c f4       	brge	.+18     	; 0xb86 <LCD_sendCommand+0xd0>
		__ticks = 1;
     b74:	ce 01       	movw	r24, r28
     b76:	81 5b       	subi	r24, 0xB1	; 177
     b78:	9f 4f       	sbci	r25, 0xFF	; 255
     b7a:	21 e0       	ldi	r18, 0x01	; 1
     b7c:	30 e0       	ldi	r19, 0x00	; 0
     b7e:	dc 01       	movw	r26, r24
     b80:	2d 93       	st	X+, r18
     b82:	3c 93       	st	X, r19
     b84:	92 c0       	rjmp	.+292    	; 0xcaa <LCD_sendCommand+0x1f4>
	else if (__tmp > 65535)
     b86:	ce 01       	movw	r24, r28
     b88:	85 5b       	subi	r24, 0xB5	; 181
     b8a:	9f 4f       	sbci	r25, 0xFF	; 255
     b8c:	20 e0       	ldi	r18, 0x00	; 0
     b8e:	3f ef       	ldi	r19, 0xFF	; 255
     b90:	4f e7       	ldi	r20, 0x7F	; 127
     b92:	57 e4       	ldi	r21, 0x47	; 71
     b94:	fc 01       	movw	r30, r24
     b96:	60 81       	ld	r22, Z
     b98:	71 81       	ldd	r23, Z+1	; 0x01
     b9a:	82 81       	ldd	r24, Z+2	; 0x02
     b9c:	93 81       	ldd	r25, Z+3	; 0x03
     b9e:	0e 94 e6 14 	call	0x29cc	; 0x29cc <__gesf2>
     ba2:	18 16       	cp	r1, r24
     ba4:	0c f0       	brlt	.+2      	; 0xba8 <LCD_sendCommand+0xf2>
     ba6:	67 c0       	rjmp	.+206    	; 0xc76 <LCD_sendCommand+0x1c0>
		__ticks = (uint16_t) (__ms * 10.0);
     ba8:	ce 01       	movw	r24, r28
     baa:	89 5b       	subi	r24, 0xB9	; 185
     bac:	9f 4f       	sbci	r25, 0xFF	; 255
     bae:	20 e0       	ldi	r18, 0x00	; 0
     bb0:	30 e0       	ldi	r19, 0x00	; 0
     bb2:	40 e2       	ldi	r20, 0x20	; 32
     bb4:	51 e4       	ldi	r21, 0x41	; 65
     bb6:	dc 01       	movw	r26, r24
     bb8:	6d 91       	ld	r22, X+
     bba:	7d 91       	ld	r23, X+
     bbc:	8d 91       	ld	r24, X+
     bbe:	9c 91       	ld	r25, X
     bc0:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <__mulsf3>
     bc4:	e6 96       	adiw	r28, 0x36	; 54
     bc6:	6c af       	std	Y+60, r22	; 0x3c
     bc8:	7d af       	std	Y+61, r23	; 0x3d
     bca:	8e af       	std	Y+62, r24	; 0x3e
     bcc:	9f af       	std	Y+63, r25	; 0x3f
     bce:	e6 97       	sbiw	r28, 0x36	; 54
     bd0:	e6 96       	adiw	r28, 0x36	; 54
     bd2:	2c ad       	ldd	r18, Y+60	; 0x3c
     bd4:	3d ad       	ldd	r19, Y+61	; 0x3d
     bd6:	4e ad       	ldd	r20, Y+62	; 0x3e
     bd8:	5f ad       	ldd	r21, Y+63	; 0x3f
     bda:	e6 97       	sbiw	r28, 0x36	; 54
     bdc:	ae 96       	adiw	r28, 0x2e	; 46
     bde:	2c af       	std	Y+60, r18	; 0x3c
     be0:	3d af       	std	Y+61, r19	; 0x3d
     be2:	4e af       	std	Y+62, r20	; 0x3e
     be4:	5f af       	std	Y+63, r21	; 0x3f
     be6:	ae 97       	sbiw	r28, 0x2e	; 46
     be8:	8e 01       	movw	r16, r28
     bea:	01 5b       	subi	r16, 0xB1	; 177
     bec:	1f 4f       	sbci	r17, 0xFF	; 255
     bee:	ae 96       	adiw	r28, 0x2e	; 46
     bf0:	6c ad       	ldd	r22, Y+60	; 0x3c
     bf2:	7d ad       	ldd	r23, Y+61	; 0x3d
     bf4:	8e ad       	ldd	r24, Y+62	; 0x3e
     bf6:	9f ad       	ldd	r25, Y+63	; 0x3f
     bf8:	ae 97       	sbiw	r28, 0x2e	; 46
     bfa:	0e 94 42 14 	call	0x2884	; 0x2884 <__fixunssfsi>
     bfe:	ea 96       	adiw	r28, 0x3a	; 58
     c00:	6c af       	std	Y+60, r22	; 0x3c
     c02:	7d af       	std	Y+61, r23	; 0x3d
     c04:	8e af       	std	Y+62, r24	; 0x3e
     c06:	9f af       	std	Y+63, r25	; 0x3f
     c08:	ea 97       	sbiw	r28, 0x3a	; 58
     c0a:	e8 96       	adiw	r28, 0x38	; 56
     c0c:	ee ad       	ldd	r30, Y+62	; 0x3e
     c0e:	ff ad       	ldd	r31, Y+63	; 0x3f
     c10:	e8 97       	sbiw	r28, 0x38	; 56
     c12:	d8 01       	movw	r26, r16
     c14:	ed 93       	st	X+, r30
     c16:	fc 93       	st	X, r31
		while(__ticks)
     c18:	25 c0       	rjmp	.+74     	; 0xc64 <LCD_sendCommand+0x1ae>
     c1a:	ce 01       	movw	r24, r28
     c1c:	8f 5a       	subi	r24, 0xAF	; 175
     c1e:	9f 4f       	sbci	r25, 0xFF	; 255
     c20:	29 e1       	ldi	r18, 0x19	; 25
     c22:	30 e0       	ldi	r19, 0x00	; 0
     c24:	dc 01       	movw	r26, r24
     c26:	2d 93       	st	X+, r18
     c28:	3c 93       	st	X, r19
	__asm__ volatile (
     c2a:	ce 01       	movw	r24, r28
     c2c:	8f 5a       	subi	r24, 0xAF	; 175
     c2e:	9f 4f       	sbci	r25, 0xFF	; 255
     c30:	fc 01       	movw	r30, r24
     c32:	80 81       	ld	r24, Z
     c34:	91 81       	ldd	r25, Z+1	; 0x01
     c36:	01 97       	sbiw	r24, 0x01	; 1
     c38:	f1 f7       	brne	.-4      	; 0xc36 <LCD_sendCommand+0x180>
     c3a:	9e 01       	movw	r18, r28
     c3c:	2f 5a       	subi	r18, 0xAF	; 175
     c3e:	3f 4f       	sbci	r19, 0xFF	; 255
     c40:	d9 01       	movw	r26, r18
     c42:	8d 93       	st	X+, r24
     c44:	9c 93       	st	X, r25
}
     c46:	00 00       	nop
			__ticks --;
     c48:	ce 01       	movw	r24, r28
     c4a:	81 5b       	subi	r24, 0xB1	; 177
     c4c:	9f 4f       	sbci	r25, 0xFF	; 255
     c4e:	9e 01       	movw	r18, r28
     c50:	21 5b       	subi	r18, 0xB1	; 177
     c52:	3f 4f       	sbci	r19, 0xFF	; 255
     c54:	f9 01       	movw	r30, r18
     c56:	20 81       	ld	r18, Z
     c58:	31 81       	ldd	r19, Z+1	; 0x01
     c5a:	21 50       	subi	r18, 0x01	; 1
     c5c:	31 09       	sbc	r19, r1
     c5e:	dc 01       	movw	r26, r24
     c60:	2d 93       	st	X+, r18
     c62:	3c 93       	st	X, r19
		while(__ticks)
     c64:	ce 01       	movw	r24, r28
     c66:	81 5b       	subi	r24, 0xB1	; 177
     c68:	9f 4f       	sbci	r25, 0xFF	; 255
     c6a:	fc 01       	movw	r30, r24
     c6c:	80 81       	ld	r24, Z
     c6e:	91 81       	ldd	r25, Z+1	; 0x01
     c70:	89 2b       	or	r24, r25
     c72:	99 f6       	brne	.-90     	; 0xc1a <LCD_sendCommand+0x164>
		return;
     c74:	35 c0       	rjmp	.+106    	; 0xce0 <LCD_sendCommand+0x22a>
		__ticks = (uint16_t)__tmp;
     c76:	8e 01       	movw	r16, r28
     c78:	01 5b       	subi	r16, 0xB1	; 177
     c7a:	1f 4f       	sbci	r17, 0xFF	; 255
     c7c:	ce 01       	movw	r24, r28
     c7e:	85 5b       	subi	r24, 0xB5	; 181
     c80:	9f 4f       	sbci	r25, 0xFF	; 255
     c82:	dc 01       	movw	r26, r24
     c84:	6d 91       	ld	r22, X+
     c86:	7d 91       	ld	r23, X+
     c88:	8d 91       	ld	r24, X+
     c8a:	9c 91       	ld	r25, X
     c8c:	0e 94 42 14 	call	0x2884	; 0x2884 <__fixunssfsi>
     c90:	ee 96       	adiw	r28, 0x3e	; 62
     c92:	6c af       	std	Y+60, r22	; 0x3c
     c94:	7d af       	std	Y+61, r23	; 0x3d
     c96:	8e af       	std	Y+62, r24	; 0x3e
     c98:	9f af       	std	Y+63, r25	; 0x3f
     c9a:	ee 97       	sbiw	r28, 0x3e	; 62
     c9c:	ec 96       	adiw	r28, 0x3c	; 60
     c9e:	2e ad       	ldd	r18, Y+62	; 0x3e
     ca0:	3f ad       	ldd	r19, Y+63	; 0x3f
     ca2:	ec 97       	sbiw	r28, 0x3c	; 60
     ca4:	f8 01       	movw	r30, r16
     ca6:	31 83       	std	Z+1, r19	; 0x01
     ca8:	20 83       	st	Z, r18
     caa:	ce 01       	movw	r24, r28
     cac:	8d 5a       	subi	r24, 0xAD	; 173
     cae:	9f 4f       	sbci	r25, 0xFF	; 255
     cb0:	9e 01       	movw	r18, r28
     cb2:	21 5b       	subi	r18, 0xB1	; 177
     cb4:	3f 4f       	sbci	r19, 0xFF	; 255
     cb6:	d9 01       	movw	r26, r18
     cb8:	2d 91       	ld	r18, X+
     cba:	3c 91       	ld	r19, X
     cbc:	fc 01       	movw	r30, r24
     cbe:	31 83       	std	Z+1, r19	; 0x01
     cc0:	20 83       	st	Z, r18
	__asm__ volatile (
     cc2:	ce 01       	movw	r24, r28
     cc4:	8d 5a       	subi	r24, 0xAD	; 173
     cc6:	9f 4f       	sbci	r25, 0xFF	; 255
     cc8:	dc 01       	movw	r26, r24
     cca:	8d 91       	ld	r24, X+
     ccc:	9c 91       	ld	r25, X
     cce:	01 97       	sbiw	r24, 0x01	; 1
     cd0:	f1 f7       	brne	.-4      	; 0xcce <LCD_sendCommand+0x218>
     cd2:	9e 01       	movw	r18, r28
     cd4:	2d 5a       	subi	r18, 0xAD	; 173
     cd6:	3f 4f       	sbci	r19, 0xFF	; 255
     cd8:	f9 01       	movw	r30, r18
     cda:	91 83       	std	Z+1, r25	; 0x01
     cdc:	80 83       	st	Z, r24
}
     cde:	00 00       	nop
	_delay_ms(1); /* delay for processing Tas = 50ns */
	E = SET; /* open Enable to send data from AVR to LCD */
     ce0:	82 e3       	ldi	r24, 0x32	; 50
     ce2:	90 e0       	ldi	r25, 0x00	; 0
     ce4:	dc 01       	movw	r26, r24
     ce6:	2c 91       	ld	r18, X
     ce8:	20 64       	ori	r18, 0x40	; 64
     cea:	fc 01       	movw	r30, r24
     cec:	20 83       	st	Z, r18
     cee:	80 e0       	ldi	r24, 0x00	; 0
     cf0:	90 e0       	ldi	r25, 0x00	; 0
     cf2:	a0 e8       	ldi	r26, 0x80	; 128
     cf4:	bf e3       	ldi	r27, 0x3F	; 63
     cf6:	89 af       	std	Y+57, r24	; 0x39
     cf8:	9a af       	std	Y+58, r25	; 0x3a
     cfa:	ab af       	std	Y+59, r26	; 0x3b
     cfc:	bc af       	std	Y+60, r27	; 0x3c
	__tmp = ((F_CPU) / 4e3) * __ms;
     cfe:	20 e0       	ldi	r18, 0x00	; 0
     d00:	30 e0       	ldi	r19, 0x00	; 0
     d02:	4a e7       	ldi	r20, 0x7A	; 122
     d04:	53 e4       	ldi	r21, 0x43	; 67
     d06:	69 ad       	ldd	r22, Y+57	; 0x39
     d08:	7a ad       	ldd	r23, Y+58	; 0x3a
     d0a:	8b ad       	ldd	r24, Y+59	; 0x3b
     d0c:	9c ad       	ldd	r25, Y+60	; 0x3c
     d0e:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <__mulsf3>
     d12:	c2 58       	subi	r28, 0x82	; 130
     d14:	df 4f       	sbci	r29, 0xFF	; 255
     d16:	68 83       	st	Y, r22
     d18:	79 83       	std	Y+1, r23	; 0x01
     d1a:	8a 83       	std	Y+2, r24	; 0x02
     d1c:	9b 83       	std	Y+3, r25	; 0x03
     d1e:	ce 57       	subi	r28, 0x7E	; 126
     d20:	d0 40       	sbci	r29, 0x00	; 0
     d22:	ce 01       	movw	r24, r28
     d24:	cd 96       	adiw	r24, 0x3d	; 61
     d26:	c2 58       	subi	r28, 0x82	; 130
     d28:	df 4f       	sbci	r29, 0xFF	; 255
     d2a:	28 81       	ld	r18, Y
     d2c:	39 81       	ldd	r19, Y+1	; 0x01
     d2e:	4a 81       	ldd	r20, Y+2	; 0x02
     d30:	5b 81       	ldd	r21, Y+3	; 0x03
     d32:	ce 57       	subi	r28, 0x7E	; 126
     d34:	d0 40       	sbci	r29, 0x00	; 0
     d36:	dc 01       	movw	r26, r24
     d38:	2d 93       	st	X+, r18
     d3a:	3d 93       	st	X+, r19
     d3c:	4d 93       	st	X+, r20
     d3e:	5c 93       	st	X, r21
     d40:	13 97       	sbiw	r26, 0x03	; 3
	if (__tmp < 1.0)
     d42:	20 e0       	ldi	r18, 0x00	; 0
     d44:	30 e0       	ldi	r19, 0x00	; 0
     d46:	40 e8       	ldi	r20, 0x80	; 128
     d48:	5f e3       	ldi	r21, 0x3F	; 63
     d4a:	ce 01       	movw	r24, r28
     d4c:	cd 96       	adiw	r24, 0x3d	; 61
     d4e:	fc 01       	movw	r30, r24
     d50:	60 81       	ld	r22, Z
     d52:	71 81       	ldd	r23, Z+1	; 0x01
     d54:	82 81       	ldd	r24, Z+2	; 0x02
     d56:	93 81       	ldd	r25, Z+3	; 0x03
     d58:	0e 94 cb 13 	call	0x2796	; 0x2796 <__cmpsf2>
     d5c:	88 23       	and	r24, r24
     d5e:	4c f4       	brge	.+18     	; 0xd72 <LCD_sendCommand+0x2bc>
		__ticks = 1;
     d60:	ce 01       	movw	r24, r28
     d62:	8f 5b       	subi	r24, 0xBF	; 191
     d64:	9f 4f       	sbci	r25, 0xFF	; 255
     d66:	21 e0       	ldi	r18, 0x01	; 1
     d68:	30 e0       	ldi	r19, 0x00	; 0
     d6a:	dc 01       	movw	r26, r24
     d6c:	2d 93       	st	X+, r18
     d6e:	3c 93       	st	X, r19
     d70:	98 c0       	rjmp	.+304    	; 0xea2 <LCD_sendCommand+0x3ec>
	else if (__tmp > 65535)
     d72:	20 e0       	ldi	r18, 0x00	; 0
     d74:	3f ef       	ldi	r19, 0xFF	; 255
     d76:	4f e7       	ldi	r20, 0x7F	; 127
     d78:	57 e4       	ldi	r21, 0x47	; 71
     d7a:	ce 01       	movw	r24, r28
     d7c:	cd 96       	adiw	r24, 0x3d	; 61
     d7e:	fc 01       	movw	r30, r24
     d80:	60 81       	ld	r22, Z
     d82:	71 81       	ldd	r23, Z+1	; 0x01
     d84:	82 81       	ldd	r24, Z+2	; 0x02
     d86:	93 81       	ldd	r25, Z+3	; 0x03
     d88:	0e 94 e6 14 	call	0x29cc	; 0x29cc <__gesf2>
     d8c:	18 16       	cp	r1, r24
     d8e:	0c f0       	brlt	.+2      	; 0xd92 <LCD_sendCommand+0x2dc>
     d90:	6b c0       	rjmp	.+214    	; 0xe68 <LCD_sendCommand+0x3b2>
		__ticks = (uint16_t) (__ms * 10.0);
     d92:	20 e0       	ldi	r18, 0x00	; 0
     d94:	30 e0       	ldi	r19, 0x00	; 0
     d96:	40 e2       	ldi	r20, 0x20	; 32
     d98:	51 e4       	ldi	r21, 0x41	; 65
     d9a:	69 ad       	ldd	r22, Y+57	; 0x39
     d9c:	7a ad       	ldd	r23, Y+58	; 0x3a
     d9e:	8b ad       	ldd	r24, Y+59	; 0x3b
     da0:	9c ad       	ldd	r25, Y+60	; 0x3c
     da2:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <__mulsf3>
     da6:	ce 57       	subi	r28, 0x7E	; 126
     da8:	df 4f       	sbci	r29, 0xFF	; 255
     daa:	68 83       	st	Y, r22
     dac:	79 83       	std	Y+1, r23	; 0x01
     dae:	8a 83       	std	Y+2, r24	; 0x02
     db0:	9b 83       	std	Y+3, r25	; 0x03
     db2:	c2 58       	subi	r28, 0x82	; 130
     db4:	d0 40       	sbci	r29, 0x00	; 0
     db6:	ce 57       	subi	r28, 0x7E	; 126
     db8:	df 4f       	sbci	r29, 0xFF	; 255
     dba:	28 81       	ld	r18, Y
     dbc:	39 81       	ldd	r19, Y+1	; 0x01
     dbe:	4a 81       	ldd	r20, Y+2	; 0x02
     dc0:	5b 81       	ldd	r21, Y+3	; 0x03
     dc2:	c2 58       	subi	r28, 0x82	; 130
     dc4:	d0 40       	sbci	r29, 0x00	; 0
     dc6:	aa 96       	adiw	r28, 0x2a	; 42
     dc8:	2c af       	std	Y+60, r18	; 0x3c
     dca:	3d af       	std	Y+61, r19	; 0x3d
     dcc:	4e af       	std	Y+62, r20	; 0x3e
     dce:	5f af       	std	Y+63, r21	; 0x3f
     dd0:	aa 97       	sbiw	r28, 0x2a	; 42
     dd2:	8e 01       	movw	r16, r28
     dd4:	0f 5b       	subi	r16, 0xBF	; 191
     dd6:	1f 4f       	sbci	r17, 0xFF	; 255
     dd8:	aa 96       	adiw	r28, 0x2a	; 42
     dda:	6c ad       	ldd	r22, Y+60	; 0x3c
     ddc:	7d ad       	ldd	r23, Y+61	; 0x3d
     dde:	8e ad       	ldd	r24, Y+62	; 0x3e
     de0:	9f ad       	ldd	r25, Y+63	; 0x3f
     de2:	aa 97       	sbiw	r28, 0x2a	; 42
     de4:	0e 94 42 14 	call	0x2884	; 0x2884 <__fixunssfsi>
     de8:	ca 57       	subi	r28, 0x7A	; 122
     dea:	df 4f       	sbci	r29, 0xFF	; 255
     dec:	68 83       	st	Y, r22
     dee:	79 83       	std	Y+1, r23	; 0x01
     df0:	8a 83       	std	Y+2, r24	; 0x02
     df2:	9b 83       	std	Y+3, r25	; 0x03
     df4:	c6 58       	subi	r28, 0x86	; 134
     df6:	d0 40       	sbci	r29, 0x00	; 0
     df8:	ca 57       	subi	r28, 0x7A	; 122
     dfa:	df 4f       	sbci	r29, 0xFF	; 255
     dfc:	e8 81       	ld	r30, Y
     dfe:	f9 81       	ldd	r31, Y+1	; 0x01
     e00:	c6 58       	subi	r28, 0x86	; 134
     e02:	d0 40       	sbci	r29, 0x00	; 0
     e04:	d8 01       	movw	r26, r16
     e06:	ed 93       	st	X+, r30
     e08:	fc 93       	st	X, r31
		while(__ticks)
     e0a:	25 c0       	rjmp	.+74     	; 0xe56 <LCD_sendCommand+0x3a0>
     e0c:	ce 01       	movw	r24, r28
     e0e:	8d 5b       	subi	r24, 0xBD	; 189
     e10:	9f 4f       	sbci	r25, 0xFF	; 255
     e12:	29 e1       	ldi	r18, 0x19	; 25
     e14:	30 e0       	ldi	r19, 0x00	; 0
     e16:	dc 01       	movw	r26, r24
     e18:	2d 93       	st	X+, r18
     e1a:	3c 93       	st	X, r19
	__asm__ volatile (
     e1c:	ce 01       	movw	r24, r28
     e1e:	8d 5b       	subi	r24, 0xBD	; 189
     e20:	9f 4f       	sbci	r25, 0xFF	; 255
     e22:	fc 01       	movw	r30, r24
     e24:	80 81       	ld	r24, Z
     e26:	91 81       	ldd	r25, Z+1	; 0x01
     e28:	01 97       	sbiw	r24, 0x01	; 1
     e2a:	f1 f7       	brne	.-4      	; 0xe28 <LCD_sendCommand+0x372>
     e2c:	9e 01       	movw	r18, r28
     e2e:	2d 5b       	subi	r18, 0xBD	; 189
     e30:	3f 4f       	sbci	r19, 0xFF	; 255
     e32:	d9 01       	movw	r26, r18
     e34:	8d 93       	st	X+, r24
     e36:	9c 93       	st	X, r25
}
     e38:	00 00       	nop
			__ticks --;
     e3a:	ce 01       	movw	r24, r28
     e3c:	8f 5b       	subi	r24, 0xBF	; 191
     e3e:	9f 4f       	sbci	r25, 0xFF	; 255
     e40:	9e 01       	movw	r18, r28
     e42:	2f 5b       	subi	r18, 0xBF	; 191
     e44:	3f 4f       	sbci	r19, 0xFF	; 255
     e46:	f9 01       	movw	r30, r18
     e48:	20 81       	ld	r18, Z
     e4a:	31 81       	ldd	r19, Z+1	; 0x01
     e4c:	21 50       	subi	r18, 0x01	; 1
     e4e:	31 09       	sbc	r19, r1
     e50:	dc 01       	movw	r26, r24
     e52:	2d 93       	st	X+, r18
     e54:	3c 93       	st	X, r19
		while(__ticks)
     e56:	ce 01       	movw	r24, r28
     e58:	8f 5b       	subi	r24, 0xBF	; 191
     e5a:	9f 4f       	sbci	r25, 0xFF	; 255
     e5c:	fc 01       	movw	r30, r24
     e5e:	80 81       	ld	r24, Z
     e60:	91 81       	ldd	r25, Z+1	; 0x01
     e62:	89 2b       	or	r24, r25
     e64:	99 f6       	brne	.-90     	; 0xe0c <LCD_sendCommand+0x356>
		return;
     e66:	38 c0       	rjmp	.+112    	; 0xed8 <LCD_sendCommand+0x422>
		__ticks = (uint16_t)__tmp;
     e68:	8e 01       	movw	r16, r28
     e6a:	0f 5b       	subi	r16, 0xBF	; 191
     e6c:	1f 4f       	sbci	r17, 0xFF	; 255
     e6e:	ce 01       	movw	r24, r28
     e70:	cd 96       	adiw	r24, 0x3d	; 61
     e72:	dc 01       	movw	r26, r24
     e74:	6d 91       	ld	r22, X+
     e76:	7d 91       	ld	r23, X+
     e78:	8d 91       	ld	r24, X+
     e7a:	9c 91       	ld	r25, X
     e7c:	0e 94 42 14 	call	0x2884	; 0x2884 <__fixunssfsi>
     e80:	c6 57       	subi	r28, 0x76	; 118
     e82:	df 4f       	sbci	r29, 0xFF	; 255
     e84:	68 83       	st	Y, r22
     e86:	79 83       	std	Y+1, r23	; 0x01
     e88:	8a 83       	std	Y+2, r24	; 0x02
     e8a:	9b 83       	std	Y+3, r25	; 0x03
     e8c:	ca 58       	subi	r28, 0x8A	; 138
     e8e:	d0 40       	sbci	r29, 0x00	; 0
     e90:	c6 57       	subi	r28, 0x76	; 118
     e92:	df 4f       	sbci	r29, 0xFF	; 255
     e94:	28 81       	ld	r18, Y
     e96:	39 81       	ldd	r19, Y+1	; 0x01
     e98:	ca 58       	subi	r28, 0x8A	; 138
     e9a:	d0 40       	sbci	r29, 0x00	; 0
     e9c:	f8 01       	movw	r30, r16
     e9e:	31 83       	std	Z+1, r19	; 0x01
     ea0:	20 83       	st	Z, r18
     ea2:	ce 01       	movw	r24, r28
     ea4:	8b 5b       	subi	r24, 0xBB	; 187
     ea6:	9f 4f       	sbci	r25, 0xFF	; 255
     ea8:	9e 01       	movw	r18, r28
     eaa:	2f 5b       	subi	r18, 0xBF	; 191
     eac:	3f 4f       	sbci	r19, 0xFF	; 255
     eae:	d9 01       	movw	r26, r18
     eb0:	2d 91       	ld	r18, X+
     eb2:	3c 91       	ld	r19, X
     eb4:	fc 01       	movw	r30, r24
     eb6:	31 83       	std	Z+1, r19	; 0x01
     eb8:	20 83       	st	Z, r18
	__asm__ volatile (
     eba:	ce 01       	movw	r24, r28
     ebc:	8b 5b       	subi	r24, 0xBB	; 187
     ebe:	9f 4f       	sbci	r25, 0xFF	; 255
     ec0:	dc 01       	movw	r26, r24
     ec2:	8d 91       	ld	r24, X+
     ec4:	9c 91       	ld	r25, X
     ec6:	01 97       	sbiw	r24, 0x01	; 1
     ec8:	f1 f7       	brne	.-4      	; 0xec6 <LCD_sendCommand+0x410>
     eca:	9e 01       	movw	r18, r28
     ecc:	2b 5b       	subi	r18, 0xBB	; 187
     ece:	3f 4f       	sbci	r19, 0xFF	; 255
     ed0:	f9 01       	movw	r30, r18
     ed2:	91 83       	std	Z+1, r25	; 0x01
     ed4:	80 83       	st	Z, r24
}
     ed6:	00 00       	nop
#ifdef UPPER_MODE_BITS
	/* send the highest 4 bits of the required command to the data bus D4 --> D7 */
	DATA_OUT=( command  & 0xF0 ) | ( DATA_OUT & 0x0F );
#endif
#ifdef LOWER_MODE_BITS
	DATA_OUT=( (command >>4 ) & 0x0F ) | ( DATA_OUT & 0xF0 );
     ed8:	ce 01       	movw	r24, r28
     eda:	8b 5a       	subi	r24, 0xAB	; 171
     edc:	9f 4f       	sbci	r25, 0xFF	; 255
     ede:	dc 01       	movw	r26, r24
     ee0:	8c 91       	ld	r24, X
     ee2:	82 95       	swap	r24
     ee4:	8f 70       	andi	r24, 0x0F	; 15
     ee6:	28 2f       	mov	r18, r24
     ee8:	85 e3       	ldi	r24, 0x35	; 53
     eea:	90 e0       	ldi	r25, 0x00	; 0
     eec:	fc 01       	movw	r30, r24
     eee:	80 81       	ld	r24, Z
     ef0:	80 7f       	andi	r24, 0xF0	; 240
     ef2:	28 2b       	or	r18, r24
     ef4:	85 e3       	ldi	r24, 0x35	; 53
     ef6:	90 e0       	ldi	r25, 0x00	; 0
     ef8:	dc 01       	movw	r26, r24
     efa:	2c 93       	st	X, r18
#endif

	E = CLEAR;	 /* close Enable to prevent data share between LCD and AVR */
     efc:	82 e3       	ldi	r24, 0x32	; 50
     efe:	90 e0       	ldi	r25, 0x00	; 0
     f00:	fc 01       	movw	r30, r24
     f02:	20 81       	ld	r18, Z
     f04:	2f 7b       	andi	r18, 0xBF	; 191
     f06:	dc 01       	movw	r26, r24
     f08:	2c 93       	st	X, r18
     f0a:	80 e0       	ldi	r24, 0x00	; 0
     f0c:	90 e0       	ldi	r25, 0x00	; 0
     f0e:	a0 e8       	ldi	r26, 0x80	; 128
     f10:	bf e3       	ldi	r27, 0x3F	; 63
     f12:	8b a7       	std	Y+43, r24	; 0x2b
     f14:	9c a7       	std	Y+44, r25	; 0x2c
     f16:	ad a7       	std	Y+45, r26	; 0x2d
     f18:	be a7       	std	Y+46, r27	; 0x2e
	__tmp = ((F_CPU) / 4e3) * __ms;
     f1a:	20 e0       	ldi	r18, 0x00	; 0
     f1c:	30 e0       	ldi	r19, 0x00	; 0
     f1e:	4a e7       	ldi	r20, 0x7A	; 122
     f20:	53 e4       	ldi	r21, 0x43	; 67
     f22:	6b a5       	ldd	r22, Y+43	; 0x2b
     f24:	7c a5       	ldd	r23, Y+44	; 0x2c
     f26:	8d a5       	ldd	r24, Y+45	; 0x2d
     f28:	9e a5       	ldd	r25, Y+46	; 0x2e
     f2a:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <__mulsf3>
     f2e:	c2 57       	subi	r28, 0x72	; 114
     f30:	df 4f       	sbci	r29, 0xFF	; 255
     f32:	68 83       	st	Y, r22
     f34:	79 83       	std	Y+1, r23	; 0x01
     f36:	8a 83       	std	Y+2, r24	; 0x02
     f38:	9b 83       	std	Y+3, r25	; 0x03
     f3a:	ce 58       	subi	r28, 0x8E	; 142
     f3c:	d0 40       	sbci	r29, 0x00	; 0
     f3e:	c2 57       	subi	r28, 0x72	; 114
     f40:	df 4f       	sbci	r29, 0xFF	; 255
     f42:	28 81       	ld	r18, Y
     f44:	39 81       	ldd	r19, Y+1	; 0x01
     f46:	4a 81       	ldd	r20, Y+2	; 0x02
     f48:	5b 81       	ldd	r21, Y+3	; 0x03
     f4a:	ce 58       	subi	r28, 0x8E	; 142
     f4c:	d0 40       	sbci	r29, 0x00	; 0
     f4e:	2f a7       	std	Y+47, r18	; 0x2f
     f50:	38 ab       	std	Y+48, r19	; 0x30
     f52:	49 ab       	std	Y+49, r20	; 0x31
     f54:	5a ab       	std	Y+50, r21	; 0x32
	if (__tmp < 1.0)
     f56:	20 e0       	ldi	r18, 0x00	; 0
     f58:	30 e0       	ldi	r19, 0x00	; 0
     f5a:	40 e8       	ldi	r20, 0x80	; 128
     f5c:	5f e3       	ldi	r21, 0x3F	; 63
     f5e:	6f a5       	ldd	r22, Y+47	; 0x2f
     f60:	78 a9       	ldd	r23, Y+48	; 0x30
     f62:	89 a9       	ldd	r24, Y+49	; 0x31
     f64:	9a a9       	ldd	r25, Y+50	; 0x32
     f66:	0e 94 cb 13 	call	0x2796	; 0x2796 <__cmpsf2>
     f6a:	88 23       	and	r24, r24
     f6c:	2c f4       	brge	.+10     	; 0xf78 <LCD_sendCommand+0x4c2>
		__ticks = 1;
     f6e:	81 e0       	ldi	r24, 0x01	; 1
     f70:	90 e0       	ldi	r25, 0x00	; 0
     f72:	9c ab       	std	Y+52, r25	; 0x34
     f74:	8b ab       	std	Y+51, r24	; 0x33
     f76:	71 c0       	rjmp	.+226    	; 0x105a <LCD_sendCommand+0x5a4>
	else if (__tmp > 65535)
     f78:	20 e0       	ldi	r18, 0x00	; 0
     f7a:	3f ef       	ldi	r19, 0xFF	; 255
     f7c:	4f e7       	ldi	r20, 0x7F	; 127
     f7e:	57 e4       	ldi	r21, 0x47	; 71
     f80:	6f a5       	ldd	r22, Y+47	; 0x2f
     f82:	78 a9       	ldd	r23, Y+48	; 0x30
     f84:	89 a9       	ldd	r24, Y+49	; 0x31
     f86:	9a a9       	ldd	r25, Y+50	; 0x32
     f88:	0e 94 e6 14 	call	0x29cc	; 0x29cc <__gesf2>
     f8c:	18 16       	cp	r1, r24
     f8e:	0c f0       	brlt	.+2      	; 0xf92 <LCD_sendCommand+0x4dc>
     f90:	4e c0       	rjmp	.+156    	; 0x102e <LCD_sendCommand+0x578>
		__ticks = (uint16_t) (__ms * 10.0);
     f92:	20 e0       	ldi	r18, 0x00	; 0
     f94:	30 e0       	ldi	r19, 0x00	; 0
     f96:	40 e2       	ldi	r20, 0x20	; 32
     f98:	51 e4       	ldi	r21, 0x41	; 65
     f9a:	6b a5       	ldd	r22, Y+43	; 0x2b
     f9c:	7c a5       	ldd	r23, Y+44	; 0x2c
     f9e:	8d a5       	ldd	r24, Y+45	; 0x2d
     fa0:	9e a5       	ldd	r25, Y+46	; 0x2e
     fa2:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <__mulsf3>
     fa6:	ce 56       	subi	r28, 0x6E	; 110
     fa8:	df 4f       	sbci	r29, 0xFF	; 255
     faa:	68 83       	st	Y, r22
     fac:	79 83       	std	Y+1, r23	; 0x01
     fae:	8a 83       	std	Y+2, r24	; 0x02
     fb0:	9b 83       	std	Y+3, r25	; 0x03
     fb2:	c2 59       	subi	r28, 0x92	; 146
     fb4:	d0 40       	sbci	r29, 0x00	; 0
     fb6:	ce 56       	subi	r28, 0x6E	; 110
     fb8:	df 4f       	sbci	r29, 0xFF	; 255
     fba:	88 81       	ld	r24, Y
     fbc:	99 81       	ldd	r25, Y+1	; 0x01
     fbe:	aa 81       	ldd	r26, Y+2	; 0x02
     fc0:	bb 81       	ldd	r27, Y+3	; 0x03
     fc2:	c2 59       	subi	r28, 0x92	; 146
     fc4:	d0 40       	sbci	r29, 0x00	; 0
     fc6:	a6 96       	adiw	r28, 0x26	; 38
     fc8:	8c af       	std	Y+60, r24	; 0x3c
     fca:	9d af       	std	Y+61, r25	; 0x3d
     fcc:	ae af       	std	Y+62, r26	; 0x3e
     fce:	bf af       	std	Y+63, r27	; 0x3f
     fd0:	a6 97       	sbiw	r28, 0x26	; 38
     fd2:	a6 96       	adiw	r28, 0x26	; 38
     fd4:	6c ad       	ldd	r22, Y+60	; 0x3c
     fd6:	7d ad       	ldd	r23, Y+61	; 0x3d
     fd8:	8e ad       	ldd	r24, Y+62	; 0x3e
     fda:	9f ad       	ldd	r25, Y+63	; 0x3f
     fdc:	a6 97       	sbiw	r28, 0x26	; 38
     fde:	0e 94 42 14 	call	0x2884	; 0x2884 <__fixunssfsi>
     fe2:	ca 56       	subi	r28, 0x6A	; 106
     fe4:	df 4f       	sbci	r29, 0xFF	; 255
     fe6:	68 83       	st	Y, r22
     fe8:	79 83       	std	Y+1, r23	; 0x01
     fea:	8a 83       	std	Y+2, r24	; 0x02
     fec:	9b 83       	std	Y+3, r25	; 0x03
     fee:	c6 59       	subi	r28, 0x96	; 150
     ff0:	d0 40       	sbci	r29, 0x00	; 0
     ff2:	ca 56       	subi	r28, 0x6A	; 106
     ff4:	df 4f       	sbci	r29, 0xFF	; 255
     ff6:	a8 81       	ld	r26, Y
     ff8:	b9 81       	ldd	r27, Y+1	; 0x01
     ffa:	c6 59       	subi	r28, 0x96	; 150
     ffc:	d0 40       	sbci	r29, 0x00	; 0
     ffe:	bc ab       	std	Y+52, r27	; 0x34
    1000:	ab ab       	std	Y+51, r26	; 0x33
		while(__ticks)
    1002:	10 c0       	rjmp	.+32     	; 0x1024 <LCD_sendCommand+0x56e>
    1004:	89 e1       	ldi	r24, 0x19	; 25
    1006:	90 e0       	ldi	r25, 0x00	; 0
    1008:	9e ab       	std	Y+54, r25	; 0x36
    100a:	8d ab       	std	Y+53, r24	; 0x35
	__asm__ volatile (
    100c:	8d a9       	ldd	r24, Y+53	; 0x35
    100e:	9e a9       	ldd	r25, Y+54	; 0x36
    1010:	01 97       	sbiw	r24, 0x01	; 1
    1012:	f1 f7       	brne	.-4      	; 0x1010 <LCD_sendCommand+0x55a>
    1014:	9e ab       	std	Y+54, r25	; 0x36
    1016:	8d ab       	std	Y+53, r24	; 0x35
}
    1018:	00 00       	nop
			__ticks --;
    101a:	8b a9       	ldd	r24, Y+51	; 0x33
    101c:	9c a9       	ldd	r25, Y+52	; 0x34
    101e:	01 97       	sbiw	r24, 0x01	; 1
    1020:	9c ab       	std	Y+52, r25	; 0x34
    1022:	8b ab       	std	Y+51, r24	; 0x33
		while(__ticks)
    1024:	8b a9       	ldd	r24, Y+51	; 0x33
    1026:	9c a9       	ldd	r25, Y+52	; 0x34
    1028:	89 2b       	or	r24, r25
    102a:	61 f7       	brne	.-40     	; 0x1004 <LCD_sendCommand+0x54e>
		return;
    102c:	21 c0       	rjmp	.+66     	; 0x1070 <LCD_sendCommand+0x5ba>
		__ticks = (uint16_t)__tmp;
    102e:	6f a5       	ldd	r22, Y+47	; 0x2f
    1030:	78 a9       	ldd	r23, Y+48	; 0x30
    1032:	89 a9       	ldd	r24, Y+49	; 0x31
    1034:	9a a9       	ldd	r25, Y+50	; 0x32
    1036:	0e 94 42 14 	call	0x2884	; 0x2884 <__fixunssfsi>
    103a:	c6 56       	subi	r28, 0x66	; 102
    103c:	df 4f       	sbci	r29, 0xFF	; 255
    103e:	68 83       	st	Y, r22
    1040:	79 83       	std	Y+1, r23	; 0x01
    1042:	8a 83       	std	Y+2, r24	; 0x02
    1044:	9b 83       	std	Y+3, r25	; 0x03
    1046:	ca 59       	subi	r28, 0x9A	; 154
    1048:	d0 40       	sbci	r29, 0x00	; 0
    104a:	c6 56       	subi	r28, 0x66	; 102
    104c:	df 4f       	sbci	r29, 0xFF	; 255
    104e:	e8 81       	ld	r30, Y
    1050:	f9 81       	ldd	r31, Y+1	; 0x01
    1052:	ca 59       	subi	r28, 0x9A	; 154
    1054:	d0 40       	sbci	r29, 0x00	; 0
    1056:	fc ab       	std	Y+52, r31	; 0x34
    1058:	eb ab       	std	Y+51, r30	; 0x33
    105a:	8b a9       	ldd	r24, Y+51	; 0x33
    105c:	9c a9       	ldd	r25, Y+52	; 0x34
    105e:	98 af       	std	Y+56, r25	; 0x38
    1060:	8f ab       	std	Y+55, r24	; 0x37
	__asm__ volatile (
    1062:	8f a9       	ldd	r24, Y+55	; 0x37
    1064:	98 ad       	ldd	r25, Y+56	; 0x38
    1066:	01 97       	sbiw	r24, 0x01	; 1
    1068:	f1 f7       	brne	.-4      	; 0x1066 <LCD_sendCommand+0x5b0>
    106a:	98 af       	std	Y+56, r25	; 0x38
    106c:	8f ab       	std	Y+55, r24	; 0x37
}
    106e:	00 00       	nop
	_delay_ms(1);	/* delay for processing Tas = 50ns */
	E = SET;		/* open Enable again to send last 4 bits of command */
    1070:	82 e3       	ldi	r24, 0x32	; 50
    1072:	90 e0       	ldi	r25, 0x00	; 0
    1074:	dc 01       	movw	r26, r24
    1076:	2c 91       	ld	r18, X
    1078:	20 64       	ori	r18, 0x40	; 64
    107a:	fc 01       	movw	r30, r24
    107c:	20 83       	st	Z, r18
    107e:	80 e0       	ldi	r24, 0x00	; 0
    1080:	90 e0       	ldi	r25, 0x00	; 0
    1082:	a0 e8       	ldi	r26, 0x80	; 128
    1084:	bf e3       	ldi	r27, 0x3F	; 63
    1086:	8d 8f       	std	Y+29, r24	; 0x1d
    1088:	9e 8f       	std	Y+30, r25	; 0x1e
    108a:	af 8f       	std	Y+31, r26	; 0x1f
    108c:	b8 a3       	std	Y+32, r27	; 0x20
	__tmp = ((F_CPU) / 4e3) * __ms;
    108e:	20 e0       	ldi	r18, 0x00	; 0
    1090:	30 e0       	ldi	r19, 0x00	; 0
    1092:	4a e7       	ldi	r20, 0x7A	; 122
    1094:	53 e4       	ldi	r21, 0x43	; 67
    1096:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1098:	7e 8d       	ldd	r23, Y+30	; 0x1e
    109a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    109c:	98 a1       	ldd	r25, Y+32	; 0x20
    109e:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <__mulsf3>
    10a2:	c2 56       	subi	r28, 0x62	; 98
    10a4:	df 4f       	sbci	r29, 0xFF	; 255
    10a6:	68 83       	st	Y, r22
    10a8:	79 83       	std	Y+1, r23	; 0x01
    10aa:	8a 83       	std	Y+2, r24	; 0x02
    10ac:	9b 83       	std	Y+3, r25	; 0x03
    10ae:	ce 59       	subi	r28, 0x9E	; 158
    10b0:	d0 40       	sbci	r29, 0x00	; 0
    10b2:	c2 56       	subi	r28, 0x62	; 98
    10b4:	df 4f       	sbci	r29, 0xFF	; 255
    10b6:	28 81       	ld	r18, Y
    10b8:	39 81       	ldd	r19, Y+1	; 0x01
    10ba:	4a 81       	ldd	r20, Y+2	; 0x02
    10bc:	5b 81       	ldd	r21, Y+3	; 0x03
    10be:	ce 59       	subi	r28, 0x9E	; 158
    10c0:	d0 40       	sbci	r29, 0x00	; 0
    10c2:	29 a3       	std	Y+33, r18	; 0x21
    10c4:	3a a3       	std	Y+34, r19	; 0x22
    10c6:	4b a3       	std	Y+35, r20	; 0x23
    10c8:	5c a3       	std	Y+36, r21	; 0x24
	if (__tmp < 1.0)
    10ca:	20 e0       	ldi	r18, 0x00	; 0
    10cc:	30 e0       	ldi	r19, 0x00	; 0
    10ce:	40 e8       	ldi	r20, 0x80	; 128
    10d0:	5f e3       	ldi	r21, 0x3F	; 63
    10d2:	69 a1       	ldd	r22, Y+33	; 0x21
    10d4:	7a a1       	ldd	r23, Y+34	; 0x22
    10d6:	8b a1       	ldd	r24, Y+35	; 0x23
    10d8:	9c a1       	ldd	r25, Y+36	; 0x24
    10da:	0e 94 cb 13 	call	0x2796	; 0x2796 <__cmpsf2>
    10de:	88 23       	and	r24, r24
    10e0:	2c f4       	brge	.+10     	; 0x10ec <LCD_sendCommand+0x636>
		__ticks = 1;
    10e2:	81 e0       	ldi	r24, 0x01	; 1
    10e4:	90 e0       	ldi	r25, 0x00	; 0
    10e6:	9e a3       	std	Y+38, r25	; 0x26
    10e8:	8d a3       	std	Y+37, r24	; 0x25
    10ea:	71 c0       	rjmp	.+226    	; 0x11ce <LCD_sendCommand+0x718>
	else if (__tmp > 65535)
    10ec:	20 e0       	ldi	r18, 0x00	; 0
    10ee:	3f ef       	ldi	r19, 0xFF	; 255
    10f0:	4f e7       	ldi	r20, 0x7F	; 127
    10f2:	57 e4       	ldi	r21, 0x47	; 71
    10f4:	69 a1       	ldd	r22, Y+33	; 0x21
    10f6:	7a a1       	ldd	r23, Y+34	; 0x22
    10f8:	8b a1       	ldd	r24, Y+35	; 0x23
    10fa:	9c a1       	ldd	r25, Y+36	; 0x24
    10fc:	0e 94 e6 14 	call	0x29cc	; 0x29cc <__gesf2>
    1100:	18 16       	cp	r1, r24
    1102:	0c f0       	brlt	.+2      	; 0x1106 <LCD_sendCommand+0x650>
    1104:	4e c0       	rjmp	.+156    	; 0x11a2 <LCD_sendCommand+0x6ec>
		__ticks = (uint16_t) (__ms * 10.0);
    1106:	20 e0       	ldi	r18, 0x00	; 0
    1108:	30 e0       	ldi	r19, 0x00	; 0
    110a:	40 e2       	ldi	r20, 0x20	; 32
    110c:	51 e4       	ldi	r21, 0x41	; 65
    110e:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1110:	7e 8d       	ldd	r23, Y+30	; 0x1e
    1112:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1114:	98 a1       	ldd	r25, Y+32	; 0x20
    1116:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <__mulsf3>
    111a:	ce 55       	subi	r28, 0x5E	; 94
    111c:	df 4f       	sbci	r29, 0xFF	; 255
    111e:	68 83       	st	Y, r22
    1120:	79 83       	std	Y+1, r23	; 0x01
    1122:	8a 83       	std	Y+2, r24	; 0x02
    1124:	9b 83       	std	Y+3, r25	; 0x03
    1126:	c2 5a       	subi	r28, 0xA2	; 162
    1128:	d0 40       	sbci	r29, 0x00	; 0
    112a:	ce 55       	subi	r28, 0x5E	; 94
    112c:	df 4f       	sbci	r29, 0xFF	; 255
    112e:	88 81       	ld	r24, Y
    1130:	99 81       	ldd	r25, Y+1	; 0x01
    1132:	aa 81       	ldd	r26, Y+2	; 0x02
    1134:	bb 81       	ldd	r27, Y+3	; 0x03
    1136:	c2 5a       	subi	r28, 0xA2	; 162
    1138:	d0 40       	sbci	r29, 0x00	; 0
    113a:	a2 96       	adiw	r28, 0x22	; 34
    113c:	8c af       	std	Y+60, r24	; 0x3c
    113e:	9d af       	std	Y+61, r25	; 0x3d
    1140:	ae af       	std	Y+62, r26	; 0x3e
    1142:	bf af       	std	Y+63, r27	; 0x3f
    1144:	a2 97       	sbiw	r28, 0x22	; 34
    1146:	a2 96       	adiw	r28, 0x22	; 34
    1148:	6c ad       	ldd	r22, Y+60	; 0x3c
    114a:	7d ad       	ldd	r23, Y+61	; 0x3d
    114c:	8e ad       	ldd	r24, Y+62	; 0x3e
    114e:	9f ad       	ldd	r25, Y+63	; 0x3f
    1150:	a2 97       	sbiw	r28, 0x22	; 34
    1152:	0e 94 42 14 	call	0x2884	; 0x2884 <__fixunssfsi>
    1156:	ca 55       	subi	r28, 0x5A	; 90
    1158:	df 4f       	sbci	r29, 0xFF	; 255
    115a:	68 83       	st	Y, r22
    115c:	79 83       	std	Y+1, r23	; 0x01
    115e:	8a 83       	std	Y+2, r24	; 0x02
    1160:	9b 83       	std	Y+3, r25	; 0x03
    1162:	c6 5a       	subi	r28, 0xA6	; 166
    1164:	d0 40       	sbci	r29, 0x00	; 0
    1166:	ca 55       	subi	r28, 0x5A	; 90
    1168:	df 4f       	sbci	r29, 0xFF	; 255
    116a:	a8 81       	ld	r26, Y
    116c:	b9 81       	ldd	r27, Y+1	; 0x01
    116e:	c6 5a       	subi	r28, 0xA6	; 166
    1170:	d0 40       	sbci	r29, 0x00	; 0
    1172:	be a3       	std	Y+38, r27	; 0x26
    1174:	ad a3       	std	Y+37, r26	; 0x25
		while(__ticks)
    1176:	10 c0       	rjmp	.+32     	; 0x1198 <LCD_sendCommand+0x6e2>
    1178:	89 e1       	ldi	r24, 0x19	; 25
    117a:	90 e0       	ldi	r25, 0x00	; 0
    117c:	98 a7       	std	Y+40, r25	; 0x28
    117e:	8f a3       	std	Y+39, r24	; 0x27
	__asm__ volatile (
    1180:	8f a1       	ldd	r24, Y+39	; 0x27
    1182:	98 a5       	ldd	r25, Y+40	; 0x28
    1184:	01 97       	sbiw	r24, 0x01	; 1
    1186:	f1 f7       	brne	.-4      	; 0x1184 <LCD_sendCommand+0x6ce>
    1188:	98 a7       	std	Y+40, r25	; 0x28
    118a:	8f a3       	std	Y+39, r24	; 0x27
}
    118c:	00 00       	nop
			__ticks --;
    118e:	8d a1       	ldd	r24, Y+37	; 0x25
    1190:	9e a1       	ldd	r25, Y+38	; 0x26
    1192:	01 97       	sbiw	r24, 0x01	; 1
    1194:	9e a3       	std	Y+38, r25	; 0x26
    1196:	8d a3       	std	Y+37, r24	; 0x25
		while(__ticks)
    1198:	8d a1       	ldd	r24, Y+37	; 0x25
    119a:	9e a1       	ldd	r25, Y+38	; 0x26
    119c:	89 2b       	or	r24, r25
    119e:	61 f7       	brne	.-40     	; 0x1178 <LCD_sendCommand+0x6c2>
		return;
    11a0:	21 c0       	rjmp	.+66     	; 0x11e4 <LCD_sendCommand+0x72e>
		__ticks = (uint16_t)__tmp;
    11a2:	69 a1       	ldd	r22, Y+33	; 0x21
    11a4:	7a a1       	ldd	r23, Y+34	; 0x22
    11a6:	8b a1       	ldd	r24, Y+35	; 0x23
    11a8:	9c a1       	ldd	r25, Y+36	; 0x24
    11aa:	0e 94 42 14 	call	0x2884	; 0x2884 <__fixunssfsi>
    11ae:	c6 55       	subi	r28, 0x56	; 86
    11b0:	df 4f       	sbci	r29, 0xFF	; 255
    11b2:	68 83       	st	Y, r22
    11b4:	79 83       	std	Y+1, r23	; 0x01
    11b6:	8a 83       	std	Y+2, r24	; 0x02
    11b8:	9b 83       	std	Y+3, r25	; 0x03
    11ba:	ca 5a       	subi	r28, 0xAA	; 170
    11bc:	d0 40       	sbci	r29, 0x00	; 0
    11be:	c6 55       	subi	r28, 0x56	; 86
    11c0:	df 4f       	sbci	r29, 0xFF	; 255
    11c2:	e8 81       	ld	r30, Y
    11c4:	f9 81       	ldd	r31, Y+1	; 0x01
    11c6:	ca 5a       	subi	r28, 0xAA	; 170
    11c8:	d0 40       	sbci	r29, 0x00	; 0
    11ca:	fe a3       	std	Y+38, r31	; 0x26
    11cc:	ed a3       	std	Y+37, r30	; 0x25
    11ce:	8d a1       	ldd	r24, Y+37	; 0x25
    11d0:	9e a1       	ldd	r25, Y+38	; 0x26
    11d2:	9a a7       	std	Y+42, r25	; 0x2a
    11d4:	89 a7       	std	Y+41, r24	; 0x29
	__asm__ volatile (
    11d6:	89 a5       	ldd	r24, Y+41	; 0x29
    11d8:	9a a5       	ldd	r25, Y+42	; 0x2a
    11da:	01 97       	sbiw	r24, 0x01	; 1
    11dc:	f1 f7       	brne	.-4      	; 0x11da <LCD_sendCommand+0x724>
    11de:	9a a7       	std	Y+42, r25	; 0x2a
    11e0:	89 a7       	std	Y+41, r24	; 0x29
}
    11e2:	00 00       	nop
	/* send the Least 4 bits of the required command to the data bus D0 --> D3 */
	DATA_OUT=( (command << 4 ) & 0xF0 ) | ( DATA_OUT & 0x0F );
#endif

#ifdef LOWER_MODE_BITS
	DATA_OUT=( (command ) & 0x0F ) | ( DATA_OUT & 0xF0 );
    11e4:	ce 01       	movw	r24, r28
    11e6:	8b 5a       	subi	r24, 0xAB	; 171
    11e8:	9f 4f       	sbci	r25, 0xFF	; 255
    11ea:	dc 01       	movw	r26, r24
    11ec:	8c 91       	ld	r24, X
    11ee:	28 2f       	mov	r18, r24
    11f0:	2f 70       	andi	r18, 0x0F	; 15
    11f2:	85 e3       	ldi	r24, 0x35	; 53
    11f4:	90 e0       	ldi	r25, 0x00	; 0
    11f6:	fc 01       	movw	r30, r24
    11f8:	80 81       	ld	r24, Z
    11fa:	80 7f       	andi	r24, 0xF0	; 240
    11fc:	28 2b       	or	r18, r24
    11fe:	85 e3       	ldi	r24, 0x35	; 53
    1200:	90 e0       	ldi	r25, 0x00	; 0
    1202:	dc 01       	movw	r26, r24
    1204:	2c 93       	st	X, r18
    1206:	80 e0       	ldi	r24, 0x00	; 0
    1208:	90 e0       	ldi	r25, 0x00	; 0
    120a:	a0 e8       	ldi	r26, 0x80	; 128
    120c:	bf e3       	ldi	r27, 0x3F	; 63
    120e:	8f 87       	std	Y+15, r24	; 0x0f
    1210:	98 8b       	std	Y+16, r25	; 0x10
    1212:	a9 8b       	std	Y+17, r26	; 0x11
    1214:	ba 8b       	std	Y+18, r27	; 0x12
	__tmp = ((F_CPU) / 4e3) * __ms;
    1216:	20 e0       	ldi	r18, 0x00	; 0
    1218:	30 e0       	ldi	r19, 0x00	; 0
    121a:	4a e7       	ldi	r20, 0x7A	; 122
    121c:	53 e4       	ldi	r21, 0x43	; 67
    121e:	6f 85       	ldd	r22, Y+15	; 0x0f
    1220:	78 89       	ldd	r23, Y+16	; 0x10
    1222:	89 89       	ldd	r24, Y+17	; 0x11
    1224:	9a 89       	ldd	r25, Y+18	; 0x12
    1226:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <__mulsf3>
    122a:	c2 55       	subi	r28, 0x52	; 82
    122c:	df 4f       	sbci	r29, 0xFF	; 255
    122e:	68 83       	st	Y, r22
    1230:	79 83       	std	Y+1, r23	; 0x01
    1232:	8a 83       	std	Y+2, r24	; 0x02
    1234:	9b 83       	std	Y+3, r25	; 0x03
    1236:	ce 5a       	subi	r28, 0xAE	; 174
    1238:	d0 40       	sbci	r29, 0x00	; 0
    123a:	c2 55       	subi	r28, 0x52	; 82
    123c:	df 4f       	sbci	r29, 0xFF	; 255
    123e:	28 81       	ld	r18, Y
    1240:	39 81       	ldd	r19, Y+1	; 0x01
    1242:	4a 81       	ldd	r20, Y+2	; 0x02
    1244:	5b 81       	ldd	r21, Y+3	; 0x03
    1246:	ce 5a       	subi	r28, 0xAE	; 174
    1248:	d0 40       	sbci	r29, 0x00	; 0
    124a:	2b 8b       	std	Y+19, r18	; 0x13
    124c:	3c 8b       	std	Y+20, r19	; 0x14
    124e:	4d 8b       	std	Y+21, r20	; 0x15
    1250:	5e 8b       	std	Y+22, r21	; 0x16
	if (__tmp < 1.0)
    1252:	20 e0       	ldi	r18, 0x00	; 0
    1254:	30 e0       	ldi	r19, 0x00	; 0
    1256:	40 e8       	ldi	r20, 0x80	; 128
    1258:	5f e3       	ldi	r21, 0x3F	; 63
    125a:	6b 89       	ldd	r22, Y+19	; 0x13
    125c:	7c 89       	ldd	r23, Y+20	; 0x14
    125e:	8d 89       	ldd	r24, Y+21	; 0x15
    1260:	9e 89       	ldd	r25, Y+22	; 0x16
    1262:	0e 94 cb 13 	call	0x2796	; 0x2796 <__cmpsf2>
    1266:	88 23       	and	r24, r24
    1268:	2c f4       	brge	.+10     	; 0x1274 <LCD_sendCommand+0x7be>
		__ticks = 1;
    126a:	81 e0       	ldi	r24, 0x01	; 1
    126c:	90 e0       	ldi	r25, 0x00	; 0
    126e:	98 8f       	std	Y+24, r25	; 0x18
    1270:	8f 8b       	std	Y+23, r24	; 0x17
    1272:	71 c0       	rjmp	.+226    	; 0x1356 <LCD_sendCommand+0x8a0>
	else if (__tmp > 65535)
    1274:	20 e0       	ldi	r18, 0x00	; 0
    1276:	3f ef       	ldi	r19, 0xFF	; 255
    1278:	4f e7       	ldi	r20, 0x7F	; 127
    127a:	57 e4       	ldi	r21, 0x47	; 71
    127c:	6b 89       	ldd	r22, Y+19	; 0x13
    127e:	7c 89       	ldd	r23, Y+20	; 0x14
    1280:	8d 89       	ldd	r24, Y+21	; 0x15
    1282:	9e 89       	ldd	r25, Y+22	; 0x16
    1284:	0e 94 e6 14 	call	0x29cc	; 0x29cc <__gesf2>
    1288:	18 16       	cp	r1, r24
    128a:	0c f0       	brlt	.+2      	; 0x128e <LCD_sendCommand+0x7d8>
    128c:	4e c0       	rjmp	.+156    	; 0x132a <LCD_sendCommand+0x874>
		__ticks = (uint16_t) (__ms * 10.0);
    128e:	20 e0       	ldi	r18, 0x00	; 0
    1290:	30 e0       	ldi	r19, 0x00	; 0
    1292:	40 e2       	ldi	r20, 0x20	; 32
    1294:	51 e4       	ldi	r21, 0x41	; 65
    1296:	6f 85       	ldd	r22, Y+15	; 0x0f
    1298:	78 89       	ldd	r23, Y+16	; 0x10
    129a:	89 89       	ldd	r24, Y+17	; 0x11
    129c:	9a 89       	ldd	r25, Y+18	; 0x12
    129e:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <__mulsf3>
    12a2:	ce 54       	subi	r28, 0x4E	; 78
    12a4:	df 4f       	sbci	r29, 0xFF	; 255
    12a6:	68 83       	st	Y, r22
    12a8:	79 83       	std	Y+1, r23	; 0x01
    12aa:	8a 83       	std	Y+2, r24	; 0x02
    12ac:	9b 83       	std	Y+3, r25	; 0x03
    12ae:	c2 5b       	subi	r28, 0xB2	; 178
    12b0:	d0 40       	sbci	r29, 0x00	; 0
    12b2:	ce 54       	subi	r28, 0x4E	; 78
    12b4:	df 4f       	sbci	r29, 0xFF	; 255
    12b6:	88 81       	ld	r24, Y
    12b8:	99 81       	ldd	r25, Y+1	; 0x01
    12ba:	aa 81       	ldd	r26, Y+2	; 0x02
    12bc:	bb 81       	ldd	r27, Y+3	; 0x03
    12be:	c2 5b       	subi	r28, 0xB2	; 178
    12c0:	d0 40       	sbci	r29, 0x00	; 0
    12c2:	6e 96       	adiw	r28, 0x1e	; 30
    12c4:	8c af       	std	Y+60, r24	; 0x3c
    12c6:	9d af       	std	Y+61, r25	; 0x3d
    12c8:	ae af       	std	Y+62, r26	; 0x3e
    12ca:	bf af       	std	Y+63, r27	; 0x3f
    12cc:	6e 97       	sbiw	r28, 0x1e	; 30
    12ce:	6e 96       	adiw	r28, 0x1e	; 30
    12d0:	6c ad       	ldd	r22, Y+60	; 0x3c
    12d2:	7d ad       	ldd	r23, Y+61	; 0x3d
    12d4:	8e ad       	ldd	r24, Y+62	; 0x3e
    12d6:	9f ad       	ldd	r25, Y+63	; 0x3f
    12d8:	6e 97       	sbiw	r28, 0x1e	; 30
    12da:	0e 94 42 14 	call	0x2884	; 0x2884 <__fixunssfsi>
    12de:	ca 54       	subi	r28, 0x4A	; 74
    12e0:	df 4f       	sbci	r29, 0xFF	; 255
    12e2:	68 83       	st	Y, r22
    12e4:	79 83       	std	Y+1, r23	; 0x01
    12e6:	8a 83       	std	Y+2, r24	; 0x02
    12e8:	9b 83       	std	Y+3, r25	; 0x03
    12ea:	c6 5b       	subi	r28, 0xB6	; 182
    12ec:	d0 40       	sbci	r29, 0x00	; 0
    12ee:	ca 54       	subi	r28, 0x4A	; 74
    12f0:	df 4f       	sbci	r29, 0xFF	; 255
    12f2:	a8 81       	ld	r26, Y
    12f4:	b9 81       	ldd	r27, Y+1	; 0x01
    12f6:	c6 5b       	subi	r28, 0xB6	; 182
    12f8:	d0 40       	sbci	r29, 0x00	; 0
    12fa:	b8 8f       	std	Y+24, r27	; 0x18
    12fc:	af 8b       	std	Y+23, r26	; 0x17
		while(__ticks)
    12fe:	10 c0       	rjmp	.+32     	; 0x1320 <LCD_sendCommand+0x86a>
    1300:	89 e1       	ldi	r24, 0x19	; 25
    1302:	90 e0       	ldi	r25, 0x00	; 0
    1304:	9a 8f       	std	Y+26, r25	; 0x1a
    1306:	89 8f       	std	Y+25, r24	; 0x19
	__asm__ volatile (
    1308:	89 8d       	ldd	r24, Y+25	; 0x19
    130a:	9a 8d       	ldd	r25, Y+26	; 0x1a
    130c:	01 97       	sbiw	r24, 0x01	; 1
    130e:	f1 f7       	brne	.-4      	; 0x130c <LCD_sendCommand+0x856>
    1310:	9a 8f       	std	Y+26, r25	; 0x1a
    1312:	89 8f       	std	Y+25, r24	; 0x19
}
    1314:	00 00       	nop
			__ticks --;
    1316:	8f 89       	ldd	r24, Y+23	; 0x17
    1318:	98 8d       	ldd	r25, Y+24	; 0x18
    131a:	01 97       	sbiw	r24, 0x01	; 1
    131c:	98 8f       	std	Y+24, r25	; 0x18
    131e:	8f 8b       	std	Y+23, r24	; 0x17
		while(__ticks)
    1320:	8f 89       	ldd	r24, Y+23	; 0x17
    1322:	98 8d       	ldd	r25, Y+24	; 0x18
    1324:	89 2b       	or	r24, r25
    1326:	61 f7       	brne	.-40     	; 0x1300 <LCD_sendCommand+0x84a>
		return;
    1328:	21 c0       	rjmp	.+66     	; 0x136c <LCD_sendCommand+0x8b6>
		__ticks = (uint16_t)__tmp;
    132a:	6b 89       	ldd	r22, Y+19	; 0x13
    132c:	7c 89       	ldd	r23, Y+20	; 0x14
    132e:	8d 89       	ldd	r24, Y+21	; 0x15
    1330:	9e 89       	ldd	r25, Y+22	; 0x16
    1332:	0e 94 42 14 	call	0x2884	; 0x2884 <__fixunssfsi>
    1336:	c6 54       	subi	r28, 0x46	; 70
    1338:	df 4f       	sbci	r29, 0xFF	; 255
    133a:	68 83       	st	Y, r22
    133c:	79 83       	std	Y+1, r23	; 0x01
    133e:	8a 83       	std	Y+2, r24	; 0x02
    1340:	9b 83       	std	Y+3, r25	; 0x03
    1342:	ca 5b       	subi	r28, 0xBA	; 186
    1344:	d0 40       	sbci	r29, 0x00	; 0
    1346:	c6 54       	subi	r28, 0x46	; 70
    1348:	df 4f       	sbci	r29, 0xFF	; 255
    134a:	e8 81       	ld	r30, Y
    134c:	f9 81       	ldd	r31, Y+1	; 0x01
    134e:	ca 5b       	subi	r28, 0xBA	; 186
    1350:	d0 40       	sbci	r29, 0x00	; 0
    1352:	f8 8f       	std	Y+24, r31	; 0x18
    1354:	ef 8b       	std	Y+23, r30	; 0x17
    1356:	8f 89       	ldd	r24, Y+23	; 0x17
    1358:	98 8d       	ldd	r25, Y+24	; 0x18
    135a:	9c 8f       	std	Y+28, r25	; 0x1c
    135c:	8b 8f       	std	Y+27, r24	; 0x1b
	__asm__ volatile (
    135e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1360:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1362:	01 97       	sbiw	r24, 0x01	; 1
    1364:	f1 f7       	brne	.-4      	; 0x1362 <LCD_sendCommand+0x8ac>
    1366:	9c 8f       	std	Y+28, r25	; 0x1c
    1368:	8b 8f       	std	Y+27, r24	; 0x1b
}
    136a:	00 00       	nop
#endif
#endif
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	E = CLEAR; /* close enable to prevent data share between LCD and AVR */
    136c:	82 e3       	ldi	r24, 0x32	; 50
    136e:	90 e0       	ldi	r25, 0x00	; 0
    1370:	dc 01       	movw	r26, r24
    1372:	2c 91       	ld	r18, X
    1374:	2f 7b       	andi	r18, 0xBF	; 191
    1376:	fc 01       	movw	r30, r24
    1378:	20 83       	st	Z, r18
    137a:	80 e0       	ldi	r24, 0x00	; 0
    137c:	90 e0       	ldi	r25, 0x00	; 0
    137e:	a0 e8       	ldi	r26, 0x80	; 128
    1380:	bf e3       	ldi	r27, 0x3F	; 63
    1382:	89 83       	std	Y+1, r24	; 0x01
    1384:	9a 83       	std	Y+2, r25	; 0x02
    1386:	ab 83       	std	Y+3, r26	; 0x03
    1388:	bc 83       	std	Y+4, r27	; 0x04
	__tmp = ((F_CPU) / 4e3) * __ms;
    138a:	20 e0       	ldi	r18, 0x00	; 0
    138c:	30 e0       	ldi	r19, 0x00	; 0
    138e:	4a e7       	ldi	r20, 0x7A	; 122
    1390:	53 e4       	ldi	r21, 0x43	; 67
    1392:	69 81       	ldd	r22, Y+1	; 0x01
    1394:	7a 81       	ldd	r23, Y+2	; 0x02
    1396:	8b 81       	ldd	r24, Y+3	; 0x03
    1398:	9c 81       	ldd	r25, Y+4	; 0x04
    139a:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <__mulsf3>
    139e:	c2 54       	subi	r28, 0x42	; 66
    13a0:	df 4f       	sbci	r29, 0xFF	; 255
    13a2:	68 83       	st	Y, r22
    13a4:	79 83       	std	Y+1, r23	; 0x01
    13a6:	8a 83       	std	Y+2, r24	; 0x02
    13a8:	9b 83       	std	Y+3, r25	; 0x03
    13aa:	ce 5b       	subi	r28, 0xBE	; 190
    13ac:	d0 40       	sbci	r29, 0x00	; 0
    13ae:	c2 54       	subi	r28, 0x42	; 66
    13b0:	df 4f       	sbci	r29, 0xFF	; 255
    13b2:	28 81       	ld	r18, Y
    13b4:	39 81       	ldd	r19, Y+1	; 0x01
    13b6:	4a 81       	ldd	r20, Y+2	; 0x02
    13b8:	5b 81       	ldd	r21, Y+3	; 0x03
    13ba:	ce 5b       	subi	r28, 0xBE	; 190
    13bc:	d0 40       	sbci	r29, 0x00	; 0
    13be:	2d 83       	std	Y+5, r18	; 0x05
    13c0:	3e 83       	std	Y+6, r19	; 0x06
    13c2:	4f 83       	std	Y+7, r20	; 0x07
    13c4:	58 87       	std	Y+8, r21	; 0x08
	if (__tmp < 1.0)
    13c6:	20 e0       	ldi	r18, 0x00	; 0
    13c8:	30 e0       	ldi	r19, 0x00	; 0
    13ca:	40 e8       	ldi	r20, 0x80	; 128
    13cc:	5f e3       	ldi	r21, 0x3F	; 63
    13ce:	6d 81       	ldd	r22, Y+5	; 0x05
    13d0:	7e 81       	ldd	r23, Y+6	; 0x06
    13d2:	8f 81       	ldd	r24, Y+7	; 0x07
    13d4:	98 85       	ldd	r25, Y+8	; 0x08
    13d6:	0e 94 cb 13 	call	0x2796	; 0x2796 <__cmpsf2>
    13da:	88 23       	and	r24, r24
    13dc:	2c f4       	brge	.+10     	; 0x13e8 <LCD_sendCommand+0x932>
		__ticks = 1;
    13de:	81 e0       	ldi	r24, 0x01	; 1
    13e0:	90 e0       	ldi	r25, 0x00	; 0
    13e2:	9a 87       	std	Y+10, r25	; 0x0a
    13e4:	89 87       	std	Y+9, r24	; 0x09
    13e6:	71 c0       	rjmp	.+226    	; 0x14ca <LCD_sendCommand+0xa14>
	else if (__tmp > 65535)
    13e8:	20 e0       	ldi	r18, 0x00	; 0
    13ea:	3f ef       	ldi	r19, 0xFF	; 255
    13ec:	4f e7       	ldi	r20, 0x7F	; 127
    13ee:	57 e4       	ldi	r21, 0x47	; 71
    13f0:	6d 81       	ldd	r22, Y+5	; 0x05
    13f2:	7e 81       	ldd	r23, Y+6	; 0x06
    13f4:	8f 81       	ldd	r24, Y+7	; 0x07
    13f6:	98 85       	ldd	r25, Y+8	; 0x08
    13f8:	0e 94 e6 14 	call	0x29cc	; 0x29cc <__gesf2>
    13fc:	18 16       	cp	r1, r24
    13fe:	0c f0       	brlt	.+2      	; 0x1402 <LCD_sendCommand+0x94c>
    1400:	4e c0       	rjmp	.+156    	; 0x149e <LCD_sendCommand+0x9e8>
		__ticks = (uint16_t) (__ms * 10.0);
    1402:	20 e0       	ldi	r18, 0x00	; 0
    1404:	30 e0       	ldi	r19, 0x00	; 0
    1406:	40 e2       	ldi	r20, 0x20	; 32
    1408:	51 e4       	ldi	r21, 0x41	; 65
    140a:	69 81       	ldd	r22, Y+1	; 0x01
    140c:	7a 81       	ldd	r23, Y+2	; 0x02
    140e:	8b 81       	ldd	r24, Y+3	; 0x03
    1410:	9c 81       	ldd	r25, Y+4	; 0x04
    1412:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <__mulsf3>
    1416:	ce 53       	subi	r28, 0x3E	; 62
    1418:	df 4f       	sbci	r29, 0xFF	; 255
    141a:	68 83       	st	Y, r22
    141c:	79 83       	std	Y+1, r23	; 0x01
    141e:	8a 83       	std	Y+2, r24	; 0x02
    1420:	9b 83       	std	Y+3, r25	; 0x03
    1422:	c2 5c       	subi	r28, 0xC2	; 194
    1424:	d0 40       	sbci	r29, 0x00	; 0
    1426:	ce 53       	subi	r28, 0x3E	; 62
    1428:	df 4f       	sbci	r29, 0xFF	; 255
    142a:	88 81       	ld	r24, Y
    142c:	99 81       	ldd	r25, Y+1	; 0x01
    142e:	aa 81       	ldd	r26, Y+2	; 0x02
    1430:	bb 81       	ldd	r27, Y+3	; 0x03
    1432:	c2 5c       	subi	r28, 0xC2	; 194
    1434:	d0 40       	sbci	r29, 0x00	; 0
    1436:	6a 96       	adiw	r28, 0x1a	; 26
    1438:	8c af       	std	Y+60, r24	; 0x3c
    143a:	9d af       	std	Y+61, r25	; 0x3d
    143c:	ae af       	std	Y+62, r26	; 0x3e
    143e:	bf af       	std	Y+63, r27	; 0x3f
    1440:	6a 97       	sbiw	r28, 0x1a	; 26
    1442:	6a 96       	adiw	r28, 0x1a	; 26
    1444:	6c ad       	ldd	r22, Y+60	; 0x3c
    1446:	7d ad       	ldd	r23, Y+61	; 0x3d
    1448:	8e ad       	ldd	r24, Y+62	; 0x3e
    144a:	9f ad       	ldd	r25, Y+63	; 0x3f
    144c:	6a 97       	sbiw	r28, 0x1a	; 26
    144e:	0e 94 42 14 	call	0x2884	; 0x2884 <__fixunssfsi>
    1452:	ca 53       	subi	r28, 0x3A	; 58
    1454:	df 4f       	sbci	r29, 0xFF	; 255
    1456:	68 83       	st	Y, r22
    1458:	79 83       	std	Y+1, r23	; 0x01
    145a:	8a 83       	std	Y+2, r24	; 0x02
    145c:	9b 83       	std	Y+3, r25	; 0x03
    145e:	c6 5c       	subi	r28, 0xC6	; 198
    1460:	d0 40       	sbci	r29, 0x00	; 0
    1462:	ca 53       	subi	r28, 0x3A	; 58
    1464:	df 4f       	sbci	r29, 0xFF	; 255
    1466:	a8 81       	ld	r26, Y
    1468:	b9 81       	ldd	r27, Y+1	; 0x01
    146a:	c6 5c       	subi	r28, 0xC6	; 198
    146c:	d0 40       	sbci	r29, 0x00	; 0
    146e:	ba 87       	std	Y+10, r27	; 0x0a
    1470:	a9 87       	std	Y+9, r26	; 0x09
		while(__ticks)
    1472:	10 c0       	rjmp	.+32     	; 0x1494 <LCD_sendCommand+0x9de>
    1474:	89 e1       	ldi	r24, 0x19	; 25
    1476:	90 e0       	ldi	r25, 0x00	; 0
    1478:	9c 87       	std	Y+12, r25	; 0x0c
    147a:	8b 87       	std	Y+11, r24	; 0x0b
	__asm__ volatile (
    147c:	8b 85       	ldd	r24, Y+11	; 0x0b
    147e:	9c 85       	ldd	r25, Y+12	; 0x0c
    1480:	01 97       	sbiw	r24, 0x01	; 1
    1482:	f1 f7       	brne	.-4      	; 0x1480 <LCD_sendCommand+0x9ca>
    1484:	9c 87       	std	Y+12, r25	; 0x0c
    1486:	8b 87       	std	Y+11, r24	; 0x0b
}
    1488:	00 00       	nop
			__ticks --;
    148a:	89 85       	ldd	r24, Y+9	; 0x09
    148c:	9a 85       	ldd	r25, Y+10	; 0x0a
    148e:	01 97       	sbiw	r24, 0x01	; 1
    1490:	9a 87       	std	Y+10, r25	; 0x0a
    1492:	89 87       	std	Y+9, r24	; 0x09
		while(__ticks)
    1494:	89 85       	ldd	r24, Y+9	; 0x09
    1496:	9a 85       	ldd	r25, Y+10	; 0x0a
    1498:	89 2b       	or	r24, r25
    149a:	61 f7       	brne	.-40     	; 0x1474 <LCD_sendCommand+0x9be>
		return;
    149c:	21 c0       	rjmp	.+66     	; 0x14e0 <LCD_sendCommand+0xa2a>
		__ticks = (uint16_t)__tmp;
    149e:	6d 81       	ldd	r22, Y+5	; 0x05
    14a0:	7e 81       	ldd	r23, Y+6	; 0x06
    14a2:	8f 81       	ldd	r24, Y+7	; 0x07
    14a4:	98 85       	ldd	r25, Y+8	; 0x08
    14a6:	0e 94 42 14 	call	0x2884	; 0x2884 <__fixunssfsi>
    14aa:	c6 53       	subi	r28, 0x36	; 54
    14ac:	df 4f       	sbci	r29, 0xFF	; 255
    14ae:	68 83       	st	Y, r22
    14b0:	79 83       	std	Y+1, r23	; 0x01
    14b2:	8a 83       	std	Y+2, r24	; 0x02
    14b4:	9b 83       	std	Y+3, r25	; 0x03
    14b6:	ca 5c       	subi	r28, 0xCA	; 202
    14b8:	d0 40       	sbci	r29, 0x00	; 0
    14ba:	c6 53       	subi	r28, 0x36	; 54
    14bc:	df 4f       	sbci	r29, 0xFF	; 255
    14be:	e8 81       	ld	r30, Y
    14c0:	f9 81       	ldd	r31, Y+1	; 0x01
    14c2:	ca 5c       	subi	r28, 0xCA	; 202
    14c4:	d0 40       	sbci	r29, 0x00	; 0
    14c6:	fa 87       	std	Y+10, r31	; 0x0a
    14c8:	e9 87       	std	Y+9, r30	; 0x09
    14ca:	89 85       	ldd	r24, Y+9	; 0x09
    14cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    14ce:	9e 87       	std	Y+14, r25	; 0x0e
    14d0:	8d 87       	std	Y+13, r24	; 0x0d
	__asm__ volatile (
    14d2:	8d 85       	ldd	r24, Y+13	; 0x0d
    14d4:	9e 85       	ldd	r25, Y+14	; 0x0e
    14d6:	01 97       	sbiw	r24, 0x01	; 1
    14d8:	f1 f7       	brne	.-4      	; 0x14d6 <LCD_sendCommand+0xa20>
    14da:	9e 87       	std	Y+14, r25	; 0x0e
    14dc:	8d 87       	std	Y+13, r24	; 0x0d
}
    14de:	00 00       	nop
	_delay_ms(1); /* delay for processing Th = 13ns */
	return;
    14e0:	00 00       	nop
}
    14e2:	c3 53       	subi	r28, 0x33	; 51
    14e4:	df 4f       	sbci	r29, 0xFF	; 255
    14e6:	0f b6       	in	r0, 0x3f	; 63
    14e8:	f8 94       	cli
    14ea:	de bf       	out	0x3e, r29	; 62
    14ec:	0f be       	out	0x3f, r0	; 63
    14ee:	cd bf       	out	0x3d, r28	; 61
    14f0:	df 91       	pop	r29
    14f2:	cf 91       	pop	r28
    14f4:	1f 91       	pop	r17
    14f6:	0f 91       	pop	r16
    14f8:	08 95       	ret

000014fa <LCD_displayCharacter>:

/*
 * Function responsible for Display only One character on LCD
 */
void LCD_displayCharacter(uint8 data) {
    14fa:	0f 93       	push	r16
    14fc:	1f 93       	push	r17
    14fe:	cf 93       	push	r28
    1500:	df 93       	push	r29
    1502:	cd b7       	in	r28, 0x3d	; 61
    1504:	de b7       	in	r29, 0x3e	; 62
    1506:	cd 5c       	subi	r28, 0xCD	; 205
    1508:	d1 09       	sbc	r29, r1
    150a:	0f b6       	in	r0, 0x3f	; 63
    150c:	f8 94       	cli
    150e:	de bf       	out	0x3e, r29	; 62
    1510:	0f be       	out	0x3f, r0	; 63
    1512:	cd bf       	out	0x3d, r28	; 61
    1514:	9e 01       	movw	r18, r28
    1516:	2b 5a       	subi	r18, 0xAB	; 171
    1518:	3f 4f       	sbci	r19, 0xFF	; 255
    151a:	d9 01       	movw	r26, r18
    151c:	8c 93       	st	X, r24
	RS = SET; /* tell LCD that data which will send now is DATA */
    151e:	82 e3       	ldi	r24, 0x32	; 50
    1520:	90 e0       	ldi	r25, 0x00	; 0
    1522:	fc 01       	movw	r30, r24
    1524:	20 81       	ld	r18, Z
    1526:	20 61       	ori	r18, 0x10	; 16
    1528:	dc 01       	movw	r26, r24
    152a:	2c 93       	st	X, r18
	RW = CLEAR; /* select write Mode on LCD */
    152c:	82 e3       	ldi	r24, 0x32	; 50
    152e:	90 e0       	ldi	r25, 0x00	; 0
    1530:	fc 01       	movw	r30, r24
    1532:	20 81       	ld	r18, Z
    1534:	2f 7d       	andi	r18, 0xDF	; 223
    1536:	dc 01       	movw	r26, r24
    1538:	2c 93       	st	X, r18
    153a:	9e 01       	movw	r18, r28
    153c:	29 5b       	subi	r18, 0xB9	; 185
    153e:	3f 4f       	sbci	r19, 0xFF	; 255
    1540:	80 e0       	ldi	r24, 0x00	; 0
    1542:	90 e0       	ldi	r25, 0x00	; 0
    1544:	a0 e8       	ldi	r26, 0x80	; 128
    1546:	bf e3       	ldi	r27, 0x3F	; 63
    1548:	f9 01       	movw	r30, r18
    154a:	80 83       	st	Z, r24
    154c:	91 83       	std	Z+1, r25	; 0x01
    154e:	a2 83       	std	Z+2, r26	; 0x02
    1550:	b3 83       	std	Z+3, r27	; 0x03
	__tmp = ((F_CPU) / 4e3) * __ms;
    1552:	8e 01       	movw	r16, r28
    1554:	05 5b       	subi	r16, 0xB5	; 181
    1556:	1f 4f       	sbci	r17, 0xFF	; 255
    1558:	ce 01       	movw	r24, r28
    155a:	89 5b       	subi	r24, 0xB9	; 185
    155c:	9f 4f       	sbci	r25, 0xFF	; 255
    155e:	20 e0       	ldi	r18, 0x00	; 0
    1560:	30 e0       	ldi	r19, 0x00	; 0
    1562:	4a e7       	ldi	r20, 0x7A	; 122
    1564:	53 e4       	ldi	r21, 0x43	; 67
    1566:	dc 01       	movw	r26, r24
    1568:	6d 91       	ld	r22, X+
    156a:	7d 91       	ld	r23, X+
    156c:	8d 91       	ld	r24, X+
    156e:	9c 91       	ld	r25, X
    1570:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <__mulsf3>
    1574:	e2 96       	adiw	r28, 0x32	; 50
    1576:	6c af       	std	Y+60, r22	; 0x3c
    1578:	7d af       	std	Y+61, r23	; 0x3d
    157a:	8e af       	std	Y+62, r24	; 0x3e
    157c:	9f af       	std	Y+63, r25	; 0x3f
    157e:	e2 97       	sbiw	r28, 0x32	; 50
    1580:	e2 96       	adiw	r28, 0x32	; 50
    1582:	2c ad       	ldd	r18, Y+60	; 0x3c
    1584:	3d ad       	ldd	r19, Y+61	; 0x3d
    1586:	4e ad       	ldd	r20, Y+62	; 0x3e
    1588:	5f ad       	ldd	r21, Y+63	; 0x3f
    158a:	e2 97       	sbiw	r28, 0x32	; 50
    158c:	d8 01       	movw	r26, r16
    158e:	2d 93       	st	X+, r18
    1590:	3d 93       	st	X+, r19
    1592:	4d 93       	st	X+, r20
    1594:	5c 93       	st	X, r21
    1596:	13 97       	sbiw	r26, 0x03	; 3
	if (__tmp < 1.0)
    1598:	ce 01       	movw	r24, r28
    159a:	85 5b       	subi	r24, 0xB5	; 181
    159c:	9f 4f       	sbci	r25, 0xFF	; 255
    159e:	20 e0       	ldi	r18, 0x00	; 0
    15a0:	30 e0       	ldi	r19, 0x00	; 0
    15a2:	40 e8       	ldi	r20, 0x80	; 128
    15a4:	5f e3       	ldi	r21, 0x3F	; 63
    15a6:	fc 01       	movw	r30, r24
    15a8:	60 81       	ld	r22, Z
    15aa:	71 81       	ldd	r23, Z+1	; 0x01
    15ac:	82 81       	ldd	r24, Z+2	; 0x02
    15ae:	93 81       	ldd	r25, Z+3	; 0x03
    15b0:	0e 94 cb 13 	call	0x2796	; 0x2796 <__cmpsf2>
    15b4:	88 23       	and	r24, r24
    15b6:	4c f4       	brge	.+18     	; 0x15ca <LCD_displayCharacter+0xd0>
		__ticks = 1;
    15b8:	ce 01       	movw	r24, r28
    15ba:	81 5b       	subi	r24, 0xB1	; 177
    15bc:	9f 4f       	sbci	r25, 0xFF	; 255
    15be:	21 e0       	ldi	r18, 0x01	; 1
    15c0:	30 e0       	ldi	r19, 0x00	; 0
    15c2:	dc 01       	movw	r26, r24
    15c4:	2d 93       	st	X+, r18
    15c6:	3c 93       	st	X, r19
    15c8:	92 c0       	rjmp	.+292    	; 0x16ee <LCD_displayCharacter+0x1f4>
	else if (__tmp > 65535)
    15ca:	ce 01       	movw	r24, r28
    15cc:	85 5b       	subi	r24, 0xB5	; 181
    15ce:	9f 4f       	sbci	r25, 0xFF	; 255
    15d0:	20 e0       	ldi	r18, 0x00	; 0
    15d2:	3f ef       	ldi	r19, 0xFF	; 255
    15d4:	4f e7       	ldi	r20, 0x7F	; 127
    15d6:	57 e4       	ldi	r21, 0x47	; 71
    15d8:	fc 01       	movw	r30, r24
    15da:	60 81       	ld	r22, Z
    15dc:	71 81       	ldd	r23, Z+1	; 0x01
    15de:	82 81       	ldd	r24, Z+2	; 0x02
    15e0:	93 81       	ldd	r25, Z+3	; 0x03
    15e2:	0e 94 e6 14 	call	0x29cc	; 0x29cc <__gesf2>
    15e6:	18 16       	cp	r1, r24
    15e8:	0c f0       	brlt	.+2      	; 0x15ec <LCD_displayCharacter+0xf2>
    15ea:	67 c0       	rjmp	.+206    	; 0x16ba <LCD_displayCharacter+0x1c0>
		__ticks = (uint16_t) (__ms * 10.0);
    15ec:	ce 01       	movw	r24, r28
    15ee:	89 5b       	subi	r24, 0xB9	; 185
    15f0:	9f 4f       	sbci	r25, 0xFF	; 255
    15f2:	20 e0       	ldi	r18, 0x00	; 0
    15f4:	30 e0       	ldi	r19, 0x00	; 0
    15f6:	40 e2       	ldi	r20, 0x20	; 32
    15f8:	51 e4       	ldi	r21, 0x41	; 65
    15fa:	dc 01       	movw	r26, r24
    15fc:	6d 91       	ld	r22, X+
    15fe:	7d 91       	ld	r23, X+
    1600:	8d 91       	ld	r24, X+
    1602:	9c 91       	ld	r25, X
    1604:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <__mulsf3>
    1608:	e6 96       	adiw	r28, 0x36	; 54
    160a:	6c af       	std	Y+60, r22	; 0x3c
    160c:	7d af       	std	Y+61, r23	; 0x3d
    160e:	8e af       	std	Y+62, r24	; 0x3e
    1610:	9f af       	std	Y+63, r25	; 0x3f
    1612:	e6 97       	sbiw	r28, 0x36	; 54
    1614:	e6 96       	adiw	r28, 0x36	; 54
    1616:	2c ad       	ldd	r18, Y+60	; 0x3c
    1618:	3d ad       	ldd	r19, Y+61	; 0x3d
    161a:	4e ad       	ldd	r20, Y+62	; 0x3e
    161c:	5f ad       	ldd	r21, Y+63	; 0x3f
    161e:	e6 97       	sbiw	r28, 0x36	; 54
    1620:	ae 96       	adiw	r28, 0x2e	; 46
    1622:	2c af       	std	Y+60, r18	; 0x3c
    1624:	3d af       	std	Y+61, r19	; 0x3d
    1626:	4e af       	std	Y+62, r20	; 0x3e
    1628:	5f af       	std	Y+63, r21	; 0x3f
    162a:	ae 97       	sbiw	r28, 0x2e	; 46
    162c:	8e 01       	movw	r16, r28
    162e:	01 5b       	subi	r16, 0xB1	; 177
    1630:	1f 4f       	sbci	r17, 0xFF	; 255
    1632:	ae 96       	adiw	r28, 0x2e	; 46
    1634:	6c ad       	ldd	r22, Y+60	; 0x3c
    1636:	7d ad       	ldd	r23, Y+61	; 0x3d
    1638:	8e ad       	ldd	r24, Y+62	; 0x3e
    163a:	9f ad       	ldd	r25, Y+63	; 0x3f
    163c:	ae 97       	sbiw	r28, 0x2e	; 46
    163e:	0e 94 42 14 	call	0x2884	; 0x2884 <__fixunssfsi>
    1642:	ea 96       	adiw	r28, 0x3a	; 58
    1644:	6c af       	std	Y+60, r22	; 0x3c
    1646:	7d af       	std	Y+61, r23	; 0x3d
    1648:	8e af       	std	Y+62, r24	; 0x3e
    164a:	9f af       	std	Y+63, r25	; 0x3f
    164c:	ea 97       	sbiw	r28, 0x3a	; 58
    164e:	e8 96       	adiw	r28, 0x38	; 56
    1650:	ee ad       	ldd	r30, Y+62	; 0x3e
    1652:	ff ad       	ldd	r31, Y+63	; 0x3f
    1654:	e8 97       	sbiw	r28, 0x38	; 56
    1656:	d8 01       	movw	r26, r16
    1658:	ed 93       	st	X+, r30
    165a:	fc 93       	st	X, r31
		while(__ticks)
    165c:	25 c0       	rjmp	.+74     	; 0x16a8 <LCD_displayCharacter+0x1ae>
    165e:	ce 01       	movw	r24, r28
    1660:	8f 5a       	subi	r24, 0xAF	; 175
    1662:	9f 4f       	sbci	r25, 0xFF	; 255
    1664:	29 e1       	ldi	r18, 0x19	; 25
    1666:	30 e0       	ldi	r19, 0x00	; 0
    1668:	dc 01       	movw	r26, r24
    166a:	2d 93       	st	X+, r18
    166c:	3c 93       	st	X, r19
	__asm__ volatile (
    166e:	ce 01       	movw	r24, r28
    1670:	8f 5a       	subi	r24, 0xAF	; 175
    1672:	9f 4f       	sbci	r25, 0xFF	; 255
    1674:	fc 01       	movw	r30, r24
    1676:	80 81       	ld	r24, Z
    1678:	91 81       	ldd	r25, Z+1	; 0x01
    167a:	01 97       	sbiw	r24, 0x01	; 1
    167c:	f1 f7       	brne	.-4      	; 0x167a <LCD_displayCharacter+0x180>
    167e:	9e 01       	movw	r18, r28
    1680:	2f 5a       	subi	r18, 0xAF	; 175
    1682:	3f 4f       	sbci	r19, 0xFF	; 255
    1684:	d9 01       	movw	r26, r18
    1686:	8d 93       	st	X+, r24
    1688:	9c 93       	st	X, r25
}
    168a:	00 00       	nop
			__ticks --;
    168c:	ce 01       	movw	r24, r28
    168e:	81 5b       	subi	r24, 0xB1	; 177
    1690:	9f 4f       	sbci	r25, 0xFF	; 255
    1692:	9e 01       	movw	r18, r28
    1694:	21 5b       	subi	r18, 0xB1	; 177
    1696:	3f 4f       	sbci	r19, 0xFF	; 255
    1698:	f9 01       	movw	r30, r18
    169a:	20 81       	ld	r18, Z
    169c:	31 81       	ldd	r19, Z+1	; 0x01
    169e:	21 50       	subi	r18, 0x01	; 1
    16a0:	31 09       	sbc	r19, r1
    16a2:	dc 01       	movw	r26, r24
    16a4:	2d 93       	st	X+, r18
    16a6:	3c 93       	st	X, r19
		while(__ticks)
    16a8:	ce 01       	movw	r24, r28
    16aa:	81 5b       	subi	r24, 0xB1	; 177
    16ac:	9f 4f       	sbci	r25, 0xFF	; 255
    16ae:	fc 01       	movw	r30, r24
    16b0:	80 81       	ld	r24, Z
    16b2:	91 81       	ldd	r25, Z+1	; 0x01
    16b4:	89 2b       	or	r24, r25
    16b6:	99 f6       	brne	.-90     	; 0x165e <LCD_displayCharacter+0x164>
		return;
    16b8:	35 c0       	rjmp	.+106    	; 0x1724 <LCD_displayCharacter+0x22a>
		__ticks = (uint16_t)__tmp;
    16ba:	8e 01       	movw	r16, r28
    16bc:	01 5b       	subi	r16, 0xB1	; 177
    16be:	1f 4f       	sbci	r17, 0xFF	; 255
    16c0:	ce 01       	movw	r24, r28
    16c2:	85 5b       	subi	r24, 0xB5	; 181
    16c4:	9f 4f       	sbci	r25, 0xFF	; 255
    16c6:	dc 01       	movw	r26, r24
    16c8:	6d 91       	ld	r22, X+
    16ca:	7d 91       	ld	r23, X+
    16cc:	8d 91       	ld	r24, X+
    16ce:	9c 91       	ld	r25, X
    16d0:	0e 94 42 14 	call	0x2884	; 0x2884 <__fixunssfsi>
    16d4:	ee 96       	adiw	r28, 0x3e	; 62
    16d6:	6c af       	std	Y+60, r22	; 0x3c
    16d8:	7d af       	std	Y+61, r23	; 0x3d
    16da:	8e af       	std	Y+62, r24	; 0x3e
    16dc:	9f af       	std	Y+63, r25	; 0x3f
    16de:	ee 97       	sbiw	r28, 0x3e	; 62
    16e0:	ec 96       	adiw	r28, 0x3c	; 60
    16e2:	2e ad       	ldd	r18, Y+62	; 0x3e
    16e4:	3f ad       	ldd	r19, Y+63	; 0x3f
    16e6:	ec 97       	sbiw	r28, 0x3c	; 60
    16e8:	f8 01       	movw	r30, r16
    16ea:	31 83       	std	Z+1, r19	; 0x01
    16ec:	20 83       	st	Z, r18
    16ee:	ce 01       	movw	r24, r28
    16f0:	8d 5a       	subi	r24, 0xAD	; 173
    16f2:	9f 4f       	sbci	r25, 0xFF	; 255
    16f4:	9e 01       	movw	r18, r28
    16f6:	21 5b       	subi	r18, 0xB1	; 177
    16f8:	3f 4f       	sbci	r19, 0xFF	; 255
    16fa:	d9 01       	movw	r26, r18
    16fc:	2d 91       	ld	r18, X+
    16fe:	3c 91       	ld	r19, X
    1700:	fc 01       	movw	r30, r24
    1702:	31 83       	std	Z+1, r19	; 0x01
    1704:	20 83       	st	Z, r18
	__asm__ volatile (
    1706:	ce 01       	movw	r24, r28
    1708:	8d 5a       	subi	r24, 0xAD	; 173
    170a:	9f 4f       	sbci	r25, 0xFF	; 255
    170c:	dc 01       	movw	r26, r24
    170e:	8d 91       	ld	r24, X+
    1710:	9c 91       	ld	r25, X
    1712:	01 97       	sbiw	r24, 0x01	; 1
    1714:	f1 f7       	brne	.-4      	; 0x1712 <LCD_displayCharacter+0x218>
    1716:	9e 01       	movw	r18, r28
    1718:	2d 5a       	subi	r18, 0xAD	; 173
    171a:	3f 4f       	sbci	r19, 0xFF	; 255
    171c:	f9 01       	movw	r30, r18
    171e:	91 83       	std	Z+1, r25	; 0x01
    1720:	80 83       	st	Z, r24
}
    1722:	00 00       	nop
	_delay_ms(1); /* delay for processing Tas = 50ns */
	E = SET; /* open Enable to send data from AVR to LCD */
    1724:	82 e3       	ldi	r24, 0x32	; 50
    1726:	90 e0       	ldi	r25, 0x00	; 0
    1728:	dc 01       	movw	r26, r24
    172a:	2c 91       	ld	r18, X
    172c:	20 64       	ori	r18, 0x40	; 64
    172e:	fc 01       	movw	r30, r24
    1730:	20 83       	st	Z, r18
    1732:	80 e0       	ldi	r24, 0x00	; 0
    1734:	90 e0       	ldi	r25, 0x00	; 0
    1736:	a0 e8       	ldi	r26, 0x80	; 128
    1738:	bf e3       	ldi	r27, 0x3F	; 63
    173a:	89 af       	std	Y+57, r24	; 0x39
    173c:	9a af       	std	Y+58, r25	; 0x3a
    173e:	ab af       	std	Y+59, r26	; 0x3b
    1740:	bc af       	std	Y+60, r27	; 0x3c
	__tmp = ((F_CPU) / 4e3) * __ms;
    1742:	20 e0       	ldi	r18, 0x00	; 0
    1744:	30 e0       	ldi	r19, 0x00	; 0
    1746:	4a e7       	ldi	r20, 0x7A	; 122
    1748:	53 e4       	ldi	r21, 0x43	; 67
    174a:	69 ad       	ldd	r22, Y+57	; 0x39
    174c:	7a ad       	ldd	r23, Y+58	; 0x3a
    174e:	8b ad       	ldd	r24, Y+59	; 0x3b
    1750:	9c ad       	ldd	r25, Y+60	; 0x3c
    1752:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <__mulsf3>
    1756:	c2 58       	subi	r28, 0x82	; 130
    1758:	df 4f       	sbci	r29, 0xFF	; 255
    175a:	68 83       	st	Y, r22
    175c:	79 83       	std	Y+1, r23	; 0x01
    175e:	8a 83       	std	Y+2, r24	; 0x02
    1760:	9b 83       	std	Y+3, r25	; 0x03
    1762:	ce 57       	subi	r28, 0x7E	; 126
    1764:	d0 40       	sbci	r29, 0x00	; 0
    1766:	ce 01       	movw	r24, r28
    1768:	cd 96       	adiw	r24, 0x3d	; 61
    176a:	c2 58       	subi	r28, 0x82	; 130
    176c:	df 4f       	sbci	r29, 0xFF	; 255
    176e:	28 81       	ld	r18, Y
    1770:	39 81       	ldd	r19, Y+1	; 0x01
    1772:	4a 81       	ldd	r20, Y+2	; 0x02
    1774:	5b 81       	ldd	r21, Y+3	; 0x03
    1776:	ce 57       	subi	r28, 0x7E	; 126
    1778:	d0 40       	sbci	r29, 0x00	; 0
    177a:	dc 01       	movw	r26, r24
    177c:	2d 93       	st	X+, r18
    177e:	3d 93       	st	X+, r19
    1780:	4d 93       	st	X+, r20
    1782:	5c 93       	st	X, r21
    1784:	13 97       	sbiw	r26, 0x03	; 3
	if (__tmp < 1.0)
    1786:	20 e0       	ldi	r18, 0x00	; 0
    1788:	30 e0       	ldi	r19, 0x00	; 0
    178a:	40 e8       	ldi	r20, 0x80	; 128
    178c:	5f e3       	ldi	r21, 0x3F	; 63
    178e:	ce 01       	movw	r24, r28
    1790:	cd 96       	adiw	r24, 0x3d	; 61
    1792:	fc 01       	movw	r30, r24
    1794:	60 81       	ld	r22, Z
    1796:	71 81       	ldd	r23, Z+1	; 0x01
    1798:	82 81       	ldd	r24, Z+2	; 0x02
    179a:	93 81       	ldd	r25, Z+3	; 0x03
    179c:	0e 94 cb 13 	call	0x2796	; 0x2796 <__cmpsf2>
    17a0:	88 23       	and	r24, r24
    17a2:	4c f4       	brge	.+18     	; 0x17b6 <LCD_displayCharacter+0x2bc>
		__ticks = 1;
    17a4:	ce 01       	movw	r24, r28
    17a6:	8f 5b       	subi	r24, 0xBF	; 191
    17a8:	9f 4f       	sbci	r25, 0xFF	; 255
    17aa:	21 e0       	ldi	r18, 0x01	; 1
    17ac:	30 e0       	ldi	r19, 0x00	; 0
    17ae:	dc 01       	movw	r26, r24
    17b0:	2d 93       	st	X+, r18
    17b2:	3c 93       	st	X, r19
    17b4:	98 c0       	rjmp	.+304    	; 0x18e6 <LCD_displayCharacter+0x3ec>
	else if (__tmp > 65535)
    17b6:	20 e0       	ldi	r18, 0x00	; 0
    17b8:	3f ef       	ldi	r19, 0xFF	; 255
    17ba:	4f e7       	ldi	r20, 0x7F	; 127
    17bc:	57 e4       	ldi	r21, 0x47	; 71
    17be:	ce 01       	movw	r24, r28
    17c0:	cd 96       	adiw	r24, 0x3d	; 61
    17c2:	fc 01       	movw	r30, r24
    17c4:	60 81       	ld	r22, Z
    17c6:	71 81       	ldd	r23, Z+1	; 0x01
    17c8:	82 81       	ldd	r24, Z+2	; 0x02
    17ca:	93 81       	ldd	r25, Z+3	; 0x03
    17cc:	0e 94 e6 14 	call	0x29cc	; 0x29cc <__gesf2>
    17d0:	18 16       	cp	r1, r24
    17d2:	0c f0       	brlt	.+2      	; 0x17d6 <LCD_displayCharacter+0x2dc>
    17d4:	6b c0       	rjmp	.+214    	; 0x18ac <LCD_displayCharacter+0x3b2>
		__ticks = (uint16_t) (__ms * 10.0);
    17d6:	20 e0       	ldi	r18, 0x00	; 0
    17d8:	30 e0       	ldi	r19, 0x00	; 0
    17da:	40 e2       	ldi	r20, 0x20	; 32
    17dc:	51 e4       	ldi	r21, 0x41	; 65
    17de:	69 ad       	ldd	r22, Y+57	; 0x39
    17e0:	7a ad       	ldd	r23, Y+58	; 0x3a
    17e2:	8b ad       	ldd	r24, Y+59	; 0x3b
    17e4:	9c ad       	ldd	r25, Y+60	; 0x3c
    17e6:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <__mulsf3>
    17ea:	ce 57       	subi	r28, 0x7E	; 126
    17ec:	df 4f       	sbci	r29, 0xFF	; 255
    17ee:	68 83       	st	Y, r22
    17f0:	79 83       	std	Y+1, r23	; 0x01
    17f2:	8a 83       	std	Y+2, r24	; 0x02
    17f4:	9b 83       	std	Y+3, r25	; 0x03
    17f6:	c2 58       	subi	r28, 0x82	; 130
    17f8:	d0 40       	sbci	r29, 0x00	; 0
    17fa:	ce 57       	subi	r28, 0x7E	; 126
    17fc:	df 4f       	sbci	r29, 0xFF	; 255
    17fe:	28 81       	ld	r18, Y
    1800:	39 81       	ldd	r19, Y+1	; 0x01
    1802:	4a 81       	ldd	r20, Y+2	; 0x02
    1804:	5b 81       	ldd	r21, Y+3	; 0x03
    1806:	c2 58       	subi	r28, 0x82	; 130
    1808:	d0 40       	sbci	r29, 0x00	; 0
    180a:	aa 96       	adiw	r28, 0x2a	; 42
    180c:	2c af       	std	Y+60, r18	; 0x3c
    180e:	3d af       	std	Y+61, r19	; 0x3d
    1810:	4e af       	std	Y+62, r20	; 0x3e
    1812:	5f af       	std	Y+63, r21	; 0x3f
    1814:	aa 97       	sbiw	r28, 0x2a	; 42
    1816:	8e 01       	movw	r16, r28
    1818:	0f 5b       	subi	r16, 0xBF	; 191
    181a:	1f 4f       	sbci	r17, 0xFF	; 255
    181c:	aa 96       	adiw	r28, 0x2a	; 42
    181e:	6c ad       	ldd	r22, Y+60	; 0x3c
    1820:	7d ad       	ldd	r23, Y+61	; 0x3d
    1822:	8e ad       	ldd	r24, Y+62	; 0x3e
    1824:	9f ad       	ldd	r25, Y+63	; 0x3f
    1826:	aa 97       	sbiw	r28, 0x2a	; 42
    1828:	0e 94 42 14 	call	0x2884	; 0x2884 <__fixunssfsi>
    182c:	ca 57       	subi	r28, 0x7A	; 122
    182e:	df 4f       	sbci	r29, 0xFF	; 255
    1830:	68 83       	st	Y, r22
    1832:	79 83       	std	Y+1, r23	; 0x01
    1834:	8a 83       	std	Y+2, r24	; 0x02
    1836:	9b 83       	std	Y+3, r25	; 0x03
    1838:	c6 58       	subi	r28, 0x86	; 134
    183a:	d0 40       	sbci	r29, 0x00	; 0
    183c:	ca 57       	subi	r28, 0x7A	; 122
    183e:	df 4f       	sbci	r29, 0xFF	; 255
    1840:	e8 81       	ld	r30, Y
    1842:	f9 81       	ldd	r31, Y+1	; 0x01
    1844:	c6 58       	subi	r28, 0x86	; 134
    1846:	d0 40       	sbci	r29, 0x00	; 0
    1848:	d8 01       	movw	r26, r16
    184a:	ed 93       	st	X+, r30
    184c:	fc 93       	st	X, r31
		while(__ticks)
    184e:	25 c0       	rjmp	.+74     	; 0x189a <LCD_displayCharacter+0x3a0>
    1850:	ce 01       	movw	r24, r28
    1852:	8d 5b       	subi	r24, 0xBD	; 189
    1854:	9f 4f       	sbci	r25, 0xFF	; 255
    1856:	29 e1       	ldi	r18, 0x19	; 25
    1858:	30 e0       	ldi	r19, 0x00	; 0
    185a:	dc 01       	movw	r26, r24
    185c:	2d 93       	st	X+, r18
    185e:	3c 93       	st	X, r19
	__asm__ volatile (
    1860:	ce 01       	movw	r24, r28
    1862:	8d 5b       	subi	r24, 0xBD	; 189
    1864:	9f 4f       	sbci	r25, 0xFF	; 255
    1866:	fc 01       	movw	r30, r24
    1868:	80 81       	ld	r24, Z
    186a:	91 81       	ldd	r25, Z+1	; 0x01
    186c:	01 97       	sbiw	r24, 0x01	; 1
    186e:	f1 f7       	brne	.-4      	; 0x186c <LCD_displayCharacter+0x372>
    1870:	9e 01       	movw	r18, r28
    1872:	2d 5b       	subi	r18, 0xBD	; 189
    1874:	3f 4f       	sbci	r19, 0xFF	; 255
    1876:	d9 01       	movw	r26, r18
    1878:	8d 93       	st	X+, r24
    187a:	9c 93       	st	X, r25
}
    187c:	00 00       	nop
			__ticks --;
    187e:	ce 01       	movw	r24, r28
    1880:	8f 5b       	subi	r24, 0xBF	; 191
    1882:	9f 4f       	sbci	r25, 0xFF	; 255
    1884:	9e 01       	movw	r18, r28
    1886:	2f 5b       	subi	r18, 0xBF	; 191
    1888:	3f 4f       	sbci	r19, 0xFF	; 255
    188a:	f9 01       	movw	r30, r18
    188c:	20 81       	ld	r18, Z
    188e:	31 81       	ldd	r19, Z+1	; 0x01
    1890:	21 50       	subi	r18, 0x01	; 1
    1892:	31 09       	sbc	r19, r1
    1894:	dc 01       	movw	r26, r24
    1896:	2d 93       	st	X+, r18
    1898:	3c 93       	st	X, r19
		while(__ticks)
    189a:	ce 01       	movw	r24, r28
    189c:	8f 5b       	subi	r24, 0xBF	; 191
    189e:	9f 4f       	sbci	r25, 0xFF	; 255
    18a0:	fc 01       	movw	r30, r24
    18a2:	80 81       	ld	r24, Z
    18a4:	91 81       	ldd	r25, Z+1	; 0x01
    18a6:	89 2b       	or	r24, r25
    18a8:	99 f6       	brne	.-90     	; 0x1850 <LCD_displayCharacter+0x356>
		return;
    18aa:	38 c0       	rjmp	.+112    	; 0x191c <LCD_displayCharacter+0x422>
		__ticks = (uint16_t)__tmp;
    18ac:	8e 01       	movw	r16, r28
    18ae:	0f 5b       	subi	r16, 0xBF	; 191
    18b0:	1f 4f       	sbci	r17, 0xFF	; 255
    18b2:	ce 01       	movw	r24, r28
    18b4:	cd 96       	adiw	r24, 0x3d	; 61
    18b6:	dc 01       	movw	r26, r24
    18b8:	6d 91       	ld	r22, X+
    18ba:	7d 91       	ld	r23, X+
    18bc:	8d 91       	ld	r24, X+
    18be:	9c 91       	ld	r25, X
    18c0:	0e 94 42 14 	call	0x2884	; 0x2884 <__fixunssfsi>
    18c4:	c6 57       	subi	r28, 0x76	; 118
    18c6:	df 4f       	sbci	r29, 0xFF	; 255
    18c8:	68 83       	st	Y, r22
    18ca:	79 83       	std	Y+1, r23	; 0x01
    18cc:	8a 83       	std	Y+2, r24	; 0x02
    18ce:	9b 83       	std	Y+3, r25	; 0x03
    18d0:	ca 58       	subi	r28, 0x8A	; 138
    18d2:	d0 40       	sbci	r29, 0x00	; 0
    18d4:	c6 57       	subi	r28, 0x76	; 118
    18d6:	df 4f       	sbci	r29, 0xFF	; 255
    18d8:	28 81       	ld	r18, Y
    18da:	39 81       	ldd	r19, Y+1	; 0x01
    18dc:	ca 58       	subi	r28, 0x8A	; 138
    18de:	d0 40       	sbci	r29, 0x00	; 0
    18e0:	f8 01       	movw	r30, r16
    18e2:	31 83       	std	Z+1, r19	; 0x01
    18e4:	20 83       	st	Z, r18
    18e6:	ce 01       	movw	r24, r28
    18e8:	8b 5b       	subi	r24, 0xBB	; 187
    18ea:	9f 4f       	sbci	r25, 0xFF	; 255
    18ec:	9e 01       	movw	r18, r28
    18ee:	2f 5b       	subi	r18, 0xBF	; 191
    18f0:	3f 4f       	sbci	r19, 0xFF	; 255
    18f2:	d9 01       	movw	r26, r18
    18f4:	2d 91       	ld	r18, X+
    18f6:	3c 91       	ld	r19, X
    18f8:	fc 01       	movw	r30, r24
    18fa:	31 83       	std	Z+1, r19	; 0x01
    18fc:	20 83       	st	Z, r18
	__asm__ volatile (
    18fe:	ce 01       	movw	r24, r28
    1900:	8b 5b       	subi	r24, 0xBB	; 187
    1902:	9f 4f       	sbci	r25, 0xFF	; 255
    1904:	dc 01       	movw	r26, r24
    1906:	8d 91       	ld	r24, X+
    1908:	9c 91       	ld	r25, X
    190a:	01 97       	sbiw	r24, 0x01	; 1
    190c:	f1 f7       	brne	.-4      	; 0x190a <LCD_displayCharacter+0x410>
    190e:	9e 01       	movw	r18, r28
    1910:	2b 5b       	subi	r18, 0xBB	; 187
    1912:	3f 4f       	sbci	r19, 0xFF	; 255
    1914:	f9 01       	movw	r30, r18
    1916:	91 83       	std	Z+1, r25	; 0x01
    1918:	80 83       	st	Z, r24
}
    191a:	00 00       	nop
#ifdef UPPER_MODE_BITS
	/* send the highest 4 bits of the required DATA to the data bus D4 --> D7 */
	DATA_OUT=( data  & 0xF0 ) | ( DATA_OUT & 0x0F );
#endif
#ifdef LOWER_MODE_BITS
	DATA_OUT=( (data >>4 ) & 0x0F ) | ( DATA_OUT & 0xF0 );
    191c:	ce 01       	movw	r24, r28
    191e:	8b 5a       	subi	r24, 0xAB	; 171
    1920:	9f 4f       	sbci	r25, 0xFF	; 255
    1922:	dc 01       	movw	r26, r24
    1924:	8c 91       	ld	r24, X
    1926:	82 95       	swap	r24
    1928:	8f 70       	andi	r24, 0x0F	; 15
    192a:	28 2f       	mov	r18, r24
    192c:	85 e3       	ldi	r24, 0x35	; 53
    192e:	90 e0       	ldi	r25, 0x00	; 0
    1930:	fc 01       	movw	r30, r24
    1932:	80 81       	ld	r24, Z
    1934:	80 7f       	andi	r24, 0xF0	; 240
    1936:	28 2b       	or	r18, r24
    1938:	85 e3       	ldi	r24, 0x35	; 53
    193a:	90 e0       	ldi	r25, 0x00	; 0
    193c:	dc 01       	movw	r26, r24
    193e:	2c 93       	st	X, r18
#endif

	E = CLEAR;	 /* close Enable to prevent data share between LCD and AVR */
    1940:	82 e3       	ldi	r24, 0x32	; 50
    1942:	90 e0       	ldi	r25, 0x00	; 0
    1944:	fc 01       	movw	r30, r24
    1946:	20 81       	ld	r18, Z
    1948:	2f 7b       	andi	r18, 0xBF	; 191
    194a:	dc 01       	movw	r26, r24
    194c:	2c 93       	st	X, r18
    194e:	80 e0       	ldi	r24, 0x00	; 0
    1950:	90 e0       	ldi	r25, 0x00	; 0
    1952:	a0 e8       	ldi	r26, 0x80	; 128
    1954:	bf e3       	ldi	r27, 0x3F	; 63
    1956:	8b a7       	std	Y+43, r24	; 0x2b
    1958:	9c a7       	std	Y+44, r25	; 0x2c
    195a:	ad a7       	std	Y+45, r26	; 0x2d
    195c:	be a7       	std	Y+46, r27	; 0x2e
	__tmp = ((F_CPU) / 4e3) * __ms;
    195e:	20 e0       	ldi	r18, 0x00	; 0
    1960:	30 e0       	ldi	r19, 0x00	; 0
    1962:	4a e7       	ldi	r20, 0x7A	; 122
    1964:	53 e4       	ldi	r21, 0x43	; 67
    1966:	6b a5       	ldd	r22, Y+43	; 0x2b
    1968:	7c a5       	ldd	r23, Y+44	; 0x2c
    196a:	8d a5       	ldd	r24, Y+45	; 0x2d
    196c:	9e a5       	ldd	r25, Y+46	; 0x2e
    196e:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <__mulsf3>
    1972:	c2 57       	subi	r28, 0x72	; 114
    1974:	df 4f       	sbci	r29, 0xFF	; 255
    1976:	68 83       	st	Y, r22
    1978:	79 83       	std	Y+1, r23	; 0x01
    197a:	8a 83       	std	Y+2, r24	; 0x02
    197c:	9b 83       	std	Y+3, r25	; 0x03
    197e:	ce 58       	subi	r28, 0x8E	; 142
    1980:	d0 40       	sbci	r29, 0x00	; 0
    1982:	c2 57       	subi	r28, 0x72	; 114
    1984:	df 4f       	sbci	r29, 0xFF	; 255
    1986:	28 81       	ld	r18, Y
    1988:	39 81       	ldd	r19, Y+1	; 0x01
    198a:	4a 81       	ldd	r20, Y+2	; 0x02
    198c:	5b 81       	ldd	r21, Y+3	; 0x03
    198e:	ce 58       	subi	r28, 0x8E	; 142
    1990:	d0 40       	sbci	r29, 0x00	; 0
    1992:	2f a7       	std	Y+47, r18	; 0x2f
    1994:	38 ab       	std	Y+48, r19	; 0x30
    1996:	49 ab       	std	Y+49, r20	; 0x31
    1998:	5a ab       	std	Y+50, r21	; 0x32
	if (__tmp < 1.0)
    199a:	20 e0       	ldi	r18, 0x00	; 0
    199c:	30 e0       	ldi	r19, 0x00	; 0
    199e:	40 e8       	ldi	r20, 0x80	; 128
    19a0:	5f e3       	ldi	r21, 0x3F	; 63
    19a2:	6f a5       	ldd	r22, Y+47	; 0x2f
    19a4:	78 a9       	ldd	r23, Y+48	; 0x30
    19a6:	89 a9       	ldd	r24, Y+49	; 0x31
    19a8:	9a a9       	ldd	r25, Y+50	; 0x32
    19aa:	0e 94 cb 13 	call	0x2796	; 0x2796 <__cmpsf2>
    19ae:	88 23       	and	r24, r24
    19b0:	2c f4       	brge	.+10     	; 0x19bc <LCD_displayCharacter+0x4c2>
		__ticks = 1;
    19b2:	81 e0       	ldi	r24, 0x01	; 1
    19b4:	90 e0       	ldi	r25, 0x00	; 0
    19b6:	9c ab       	std	Y+52, r25	; 0x34
    19b8:	8b ab       	std	Y+51, r24	; 0x33
    19ba:	71 c0       	rjmp	.+226    	; 0x1a9e <LCD_displayCharacter+0x5a4>
	else if (__tmp > 65535)
    19bc:	20 e0       	ldi	r18, 0x00	; 0
    19be:	3f ef       	ldi	r19, 0xFF	; 255
    19c0:	4f e7       	ldi	r20, 0x7F	; 127
    19c2:	57 e4       	ldi	r21, 0x47	; 71
    19c4:	6f a5       	ldd	r22, Y+47	; 0x2f
    19c6:	78 a9       	ldd	r23, Y+48	; 0x30
    19c8:	89 a9       	ldd	r24, Y+49	; 0x31
    19ca:	9a a9       	ldd	r25, Y+50	; 0x32
    19cc:	0e 94 e6 14 	call	0x29cc	; 0x29cc <__gesf2>
    19d0:	18 16       	cp	r1, r24
    19d2:	0c f0       	brlt	.+2      	; 0x19d6 <LCD_displayCharacter+0x4dc>
    19d4:	4e c0       	rjmp	.+156    	; 0x1a72 <LCD_displayCharacter+0x578>
		__ticks = (uint16_t) (__ms * 10.0);
    19d6:	20 e0       	ldi	r18, 0x00	; 0
    19d8:	30 e0       	ldi	r19, 0x00	; 0
    19da:	40 e2       	ldi	r20, 0x20	; 32
    19dc:	51 e4       	ldi	r21, 0x41	; 65
    19de:	6b a5       	ldd	r22, Y+43	; 0x2b
    19e0:	7c a5       	ldd	r23, Y+44	; 0x2c
    19e2:	8d a5       	ldd	r24, Y+45	; 0x2d
    19e4:	9e a5       	ldd	r25, Y+46	; 0x2e
    19e6:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <__mulsf3>
    19ea:	ce 56       	subi	r28, 0x6E	; 110
    19ec:	df 4f       	sbci	r29, 0xFF	; 255
    19ee:	68 83       	st	Y, r22
    19f0:	79 83       	std	Y+1, r23	; 0x01
    19f2:	8a 83       	std	Y+2, r24	; 0x02
    19f4:	9b 83       	std	Y+3, r25	; 0x03
    19f6:	c2 59       	subi	r28, 0x92	; 146
    19f8:	d0 40       	sbci	r29, 0x00	; 0
    19fa:	ce 56       	subi	r28, 0x6E	; 110
    19fc:	df 4f       	sbci	r29, 0xFF	; 255
    19fe:	88 81       	ld	r24, Y
    1a00:	99 81       	ldd	r25, Y+1	; 0x01
    1a02:	aa 81       	ldd	r26, Y+2	; 0x02
    1a04:	bb 81       	ldd	r27, Y+3	; 0x03
    1a06:	c2 59       	subi	r28, 0x92	; 146
    1a08:	d0 40       	sbci	r29, 0x00	; 0
    1a0a:	a6 96       	adiw	r28, 0x26	; 38
    1a0c:	8c af       	std	Y+60, r24	; 0x3c
    1a0e:	9d af       	std	Y+61, r25	; 0x3d
    1a10:	ae af       	std	Y+62, r26	; 0x3e
    1a12:	bf af       	std	Y+63, r27	; 0x3f
    1a14:	a6 97       	sbiw	r28, 0x26	; 38
    1a16:	a6 96       	adiw	r28, 0x26	; 38
    1a18:	6c ad       	ldd	r22, Y+60	; 0x3c
    1a1a:	7d ad       	ldd	r23, Y+61	; 0x3d
    1a1c:	8e ad       	ldd	r24, Y+62	; 0x3e
    1a1e:	9f ad       	ldd	r25, Y+63	; 0x3f
    1a20:	a6 97       	sbiw	r28, 0x26	; 38
    1a22:	0e 94 42 14 	call	0x2884	; 0x2884 <__fixunssfsi>
    1a26:	ca 56       	subi	r28, 0x6A	; 106
    1a28:	df 4f       	sbci	r29, 0xFF	; 255
    1a2a:	68 83       	st	Y, r22
    1a2c:	79 83       	std	Y+1, r23	; 0x01
    1a2e:	8a 83       	std	Y+2, r24	; 0x02
    1a30:	9b 83       	std	Y+3, r25	; 0x03
    1a32:	c6 59       	subi	r28, 0x96	; 150
    1a34:	d0 40       	sbci	r29, 0x00	; 0
    1a36:	ca 56       	subi	r28, 0x6A	; 106
    1a38:	df 4f       	sbci	r29, 0xFF	; 255
    1a3a:	a8 81       	ld	r26, Y
    1a3c:	b9 81       	ldd	r27, Y+1	; 0x01
    1a3e:	c6 59       	subi	r28, 0x96	; 150
    1a40:	d0 40       	sbci	r29, 0x00	; 0
    1a42:	bc ab       	std	Y+52, r27	; 0x34
    1a44:	ab ab       	std	Y+51, r26	; 0x33
		while(__ticks)
    1a46:	10 c0       	rjmp	.+32     	; 0x1a68 <LCD_displayCharacter+0x56e>
    1a48:	89 e1       	ldi	r24, 0x19	; 25
    1a4a:	90 e0       	ldi	r25, 0x00	; 0
    1a4c:	9e ab       	std	Y+54, r25	; 0x36
    1a4e:	8d ab       	std	Y+53, r24	; 0x35
	__asm__ volatile (
    1a50:	8d a9       	ldd	r24, Y+53	; 0x35
    1a52:	9e a9       	ldd	r25, Y+54	; 0x36
    1a54:	01 97       	sbiw	r24, 0x01	; 1
    1a56:	f1 f7       	brne	.-4      	; 0x1a54 <LCD_displayCharacter+0x55a>
    1a58:	9e ab       	std	Y+54, r25	; 0x36
    1a5a:	8d ab       	std	Y+53, r24	; 0x35
}
    1a5c:	00 00       	nop
			__ticks --;
    1a5e:	8b a9       	ldd	r24, Y+51	; 0x33
    1a60:	9c a9       	ldd	r25, Y+52	; 0x34
    1a62:	01 97       	sbiw	r24, 0x01	; 1
    1a64:	9c ab       	std	Y+52, r25	; 0x34
    1a66:	8b ab       	std	Y+51, r24	; 0x33
		while(__ticks)
    1a68:	8b a9       	ldd	r24, Y+51	; 0x33
    1a6a:	9c a9       	ldd	r25, Y+52	; 0x34
    1a6c:	89 2b       	or	r24, r25
    1a6e:	61 f7       	brne	.-40     	; 0x1a48 <LCD_displayCharacter+0x54e>
		return;
    1a70:	21 c0       	rjmp	.+66     	; 0x1ab4 <LCD_displayCharacter+0x5ba>
		__ticks = (uint16_t)__tmp;
    1a72:	6f a5       	ldd	r22, Y+47	; 0x2f
    1a74:	78 a9       	ldd	r23, Y+48	; 0x30
    1a76:	89 a9       	ldd	r24, Y+49	; 0x31
    1a78:	9a a9       	ldd	r25, Y+50	; 0x32
    1a7a:	0e 94 42 14 	call	0x2884	; 0x2884 <__fixunssfsi>
    1a7e:	c6 56       	subi	r28, 0x66	; 102
    1a80:	df 4f       	sbci	r29, 0xFF	; 255
    1a82:	68 83       	st	Y, r22
    1a84:	79 83       	std	Y+1, r23	; 0x01
    1a86:	8a 83       	std	Y+2, r24	; 0x02
    1a88:	9b 83       	std	Y+3, r25	; 0x03
    1a8a:	ca 59       	subi	r28, 0x9A	; 154
    1a8c:	d0 40       	sbci	r29, 0x00	; 0
    1a8e:	c6 56       	subi	r28, 0x66	; 102
    1a90:	df 4f       	sbci	r29, 0xFF	; 255
    1a92:	e8 81       	ld	r30, Y
    1a94:	f9 81       	ldd	r31, Y+1	; 0x01
    1a96:	ca 59       	subi	r28, 0x9A	; 154
    1a98:	d0 40       	sbci	r29, 0x00	; 0
    1a9a:	fc ab       	std	Y+52, r31	; 0x34
    1a9c:	eb ab       	std	Y+51, r30	; 0x33
    1a9e:	8b a9       	ldd	r24, Y+51	; 0x33
    1aa0:	9c a9       	ldd	r25, Y+52	; 0x34
    1aa2:	98 af       	std	Y+56, r25	; 0x38
    1aa4:	8f ab       	std	Y+55, r24	; 0x37
	__asm__ volatile (
    1aa6:	8f a9       	ldd	r24, Y+55	; 0x37
    1aa8:	98 ad       	ldd	r25, Y+56	; 0x38
    1aaa:	01 97       	sbiw	r24, 0x01	; 1
    1aac:	f1 f7       	brne	.-4      	; 0x1aaa <LCD_displayCharacter+0x5b0>
    1aae:	98 af       	std	Y+56, r25	; 0x38
    1ab0:	8f ab       	std	Y+55, r24	; 0x37
}
    1ab2:	00 00       	nop
	_delay_ms(1);	/* delay for processing Tas = 50ns */
	E = SET;		/* open Enable again to send last 4 bits of DATA */
    1ab4:	82 e3       	ldi	r24, 0x32	; 50
    1ab6:	90 e0       	ldi	r25, 0x00	; 0
    1ab8:	dc 01       	movw	r26, r24
    1aba:	2c 91       	ld	r18, X
    1abc:	20 64       	ori	r18, 0x40	; 64
    1abe:	fc 01       	movw	r30, r24
    1ac0:	20 83       	st	Z, r18
    1ac2:	80 e0       	ldi	r24, 0x00	; 0
    1ac4:	90 e0       	ldi	r25, 0x00	; 0
    1ac6:	a0 e8       	ldi	r26, 0x80	; 128
    1ac8:	bf e3       	ldi	r27, 0x3F	; 63
    1aca:	8d 8f       	std	Y+29, r24	; 0x1d
    1acc:	9e 8f       	std	Y+30, r25	; 0x1e
    1ace:	af 8f       	std	Y+31, r26	; 0x1f
    1ad0:	b8 a3       	std	Y+32, r27	; 0x20
	__tmp = ((F_CPU) / 4e3) * __ms;
    1ad2:	20 e0       	ldi	r18, 0x00	; 0
    1ad4:	30 e0       	ldi	r19, 0x00	; 0
    1ad6:	4a e7       	ldi	r20, 0x7A	; 122
    1ad8:	53 e4       	ldi	r21, 0x43	; 67
    1ada:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1adc:	7e 8d       	ldd	r23, Y+30	; 0x1e
    1ade:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1ae0:	98 a1       	ldd	r25, Y+32	; 0x20
    1ae2:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <__mulsf3>
    1ae6:	c2 56       	subi	r28, 0x62	; 98
    1ae8:	df 4f       	sbci	r29, 0xFF	; 255
    1aea:	68 83       	st	Y, r22
    1aec:	79 83       	std	Y+1, r23	; 0x01
    1aee:	8a 83       	std	Y+2, r24	; 0x02
    1af0:	9b 83       	std	Y+3, r25	; 0x03
    1af2:	ce 59       	subi	r28, 0x9E	; 158
    1af4:	d0 40       	sbci	r29, 0x00	; 0
    1af6:	c2 56       	subi	r28, 0x62	; 98
    1af8:	df 4f       	sbci	r29, 0xFF	; 255
    1afa:	28 81       	ld	r18, Y
    1afc:	39 81       	ldd	r19, Y+1	; 0x01
    1afe:	4a 81       	ldd	r20, Y+2	; 0x02
    1b00:	5b 81       	ldd	r21, Y+3	; 0x03
    1b02:	ce 59       	subi	r28, 0x9E	; 158
    1b04:	d0 40       	sbci	r29, 0x00	; 0
    1b06:	29 a3       	std	Y+33, r18	; 0x21
    1b08:	3a a3       	std	Y+34, r19	; 0x22
    1b0a:	4b a3       	std	Y+35, r20	; 0x23
    1b0c:	5c a3       	std	Y+36, r21	; 0x24
	if (__tmp < 1.0)
    1b0e:	20 e0       	ldi	r18, 0x00	; 0
    1b10:	30 e0       	ldi	r19, 0x00	; 0
    1b12:	40 e8       	ldi	r20, 0x80	; 128
    1b14:	5f e3       	ldi	r21, 0x3F	; 63
    1b16:	69 a1       	ldd	r22, Y+33	; 0x21
    1b18:	7a a1       	ldd	r23, Y+34	; 0x22
    1b1a:	8b a1       	ldd	r24, Y+35	; 0x23
    1b1c:	9c a1       	ldd	r25, Y+36	; 0x24
    1b1e:	0e 94 cb 13 	call	0x2796	; 0x2796 <__cmpsf2>
    1b22:	88 23       	and	r24, r24
    1b24:	2c f4       	brge	.+10     	; 0x1b30 <LCD_displayCharacter+0x636>
		__ticks = 1;
    1b26:	81 e0       	ldi	r24, 0x01	; 1
    1b28:	90 e0       	ldi	r25, 0x00	; 0
    1b2a:	9e a3       	std	Y+38, r25	; 0x26
    1b2c:	8d a3       	std	Y+37, r24	; 0x25
    1b2e:	71 c0       	rjmp	.+226    	; 0x1c12 <LCD_displayCharacter+0x718>
	else if (__tmp > 65535)
    1b30:	20 e0       	ldi	r18, 0x00	; 0
    1b32:	3f ef       	ldi	r19, 0xFF	; 255
    1b34:	4f e7       	ldi	r20, 0x7F	; 127
    1b36:	57 e4       	ldi	r21, 0x47	; 71
    1b38:	69 a1       	ldd	r22, Y+33	; 0x21
    1b3a:	7a a1       	ldd	r23, Y+34	; 0x22
    1b3c:	8b a1       	ldd	r24, Y+35	; 0x23
    1b3e:	9c a1       	ldd	r25, Y+36	; 0x24
    1b40:	0e 94 e6 14 	call	0x29cc	; 0x29cc <__gesf2>
    1b44:	18 16       	cp	r1, r24
    1b46:	0c f0       	brlt	.+2      	; 0x1b4a <LCD_displayCharacter+0x650>
    1b48:	4e c0       	rjmp	.+156    	; 0x1be6 <LCD_displayCharacter+0x6ec>
		__ticks = (uint16_t) (__ms * 10.0);
    1b4a:	20 e0       	ldi	r18, 0x00	; 0
    1b4c:	30 e0       	ldi	r19, 0x00	; 0
    1b4e:	40 e2       	ldi	r20, 0x20	; 32
    1b50:	51 e4       	ldi	r21, 0x41	; 65
    1b52:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1b54:	7e 8d       	ldd	r23, Y+30	; 0x1e
    1b56:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1b58:	98 a1       	ldd	r25, Y+32	; 0x20
    1b5a:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <__mulsf3>
    1b5e:	ce 55       	subi	r28, 0x5E	; 94
    1b60:	df 4f       	sbci	r29, 0xFF	; 255
    1b62:	68 83       	st	Y, r22
    1b64:	79 83       	std	Y+1, r23	; 0x01
    1b66:	8a 83       	std	Y+2, r24	; 0x02
    1b68:	9b 83       	std	Y+3, r25	; 0x03
    1b6a:	c2 5a       	subi	r28, 0xA2	; 162
    1b6c:	d0 40       	sbci	r29, 0x00	; 0
    1b6e:	ce 55       	subi	r28, 0x5E	; 94
    1b70:	df 4f       	sbci	r29, 0xFF	; 255
    1b72:	88 81       	ld	r24, Y
    1b74:	99 81       	ldd	r25, Y+1	; 0x01
    1b76:	aa 81       	ldd	r26, Y+2	; 0x02
    1b78:	bb 81       	ldd	r27, Y+3	; 0x03
    1b7a:	c2 5a       	subi	r28, 0xA2	; 162
    1b7c:	d0 40       	sbci	r29, 0x00	; 0
    1b7e:	a2 96       	adiw	r28, 0x22	; 34
    1b80:	8c af       	std	Y+60, r24	; 0x3c
    1b82:	9d af       	std	Y+61, r25	; 0x3d
    1b84:	ae af       	std	Y+62, r26	; 0x3e
    1b86:	bf af       	std	Y+63, r27	; 0x3f
    1b88:	a2 97       	sbiw	r28, 0x22	; 34
    1b8a:	a2 96       	adiw	r28, 0x22	; 34
    1b8c:	6c ad       	ldd	r22, Y+60	; 0x3c
    1b8e:	7d ad       	ldd	r23, Y+61	; 0x3d
    1b90:	8e ad       	ldd	r24, Y+62	; 0x3e
    1b92:	9f ad       	ldd	r25, Y+63	; 0x3f
    1b94:	a2 97       	sbiw	r28, 0x22	; 34
    1b96:	0e 94 42 14 	call	0x2884	; 0x2884 <__fixunssfsi>
    1b9a:	ca 55       	subi	r28, 0x5A	; 90
    1b9c:	df 4f       	sbci	r29, 0xFF	; 255
    1b9e:	68 83       	st	Y, r22
    1ba0:	79 83       	std	Y+1, r23	; 0x01
    1ba2:	8a 83       	std	Y+2, r24	; 0x02
    1ba4:	9b 83       	std	Y+3, r25	; 0x03
    1ba6:	c6 5a       	subi	r28, 0xA6	; 166
    1ba8:	d0 40       	sbci	r29, 0x00	; 0
    1baa:	ca 55       	subi	r28, 0x5A	; 90
    1bac:	df 4f       	sbci	r29, 0xFF	; 255
    1bae:	a8 81       	ld	r26, Y
    1bb0:	b9 81       	ldd	r27, Y+1	; 0x01
    1bb2:	c6 5a       	subi	r28, 0xA6	; 166
    1bb4:	d0 40       	sbci	r29, 0x00	; 0
    1bb6:	be a3       	std	Y+38, r27	; 0x26
    1bb8:	ad a3       	std	Y+37, r26	; 0x25
		while(__ticks)
    1bba:	10 c0       	rjmp	.+32     	; 0x1bdc <LCD_displayCharacter+0x6e2>
    1bbc:	89 e1       	ldi	r24, 0x19	; 25
    1bbe:	90 e0       	ldi	r25, 0x00	; 0
    1bc0:	98 a7       	std	Y+40, r25	; 0x28
    1bc2:	8f a3       	std	Y+39, r24	; 0x27
	__asm__ volatile (
    1bc4:	8f a1       	ldd	r24, Y+39	; 0x27
    1bc6:	98 a5       	ldd	r25, Y+40	; 0x28
    1bc8:	01 97       	sbiw	r24, 0x01	; 1
    1bca:	f1 f7       	brne	.-4      	; 0x1bc8 <LCD_displayCharacter+0x6ce>
    1bcc:	98 a7       	std	Y+40, r25	; 0x28
    1bce:	8f a3       	std	Y+39, r24	; 0x27
}
    1bd0:	00 00       	nop
			__ticks --;
    1bd2:	8d a1       	ldd	r24, Y+37	; 0x25
    1bd4:	9e a1       	ldd	r25, Y+38	; 0x26
    1bd6:	01 97       	sbiw	r24, 0x01	; 1
    1bd8:	9e a3       	std	Y+38, r25	; 0x26
    1bda:	8d a3       	std	Y+37, r24	; 0x25
		while(__ticks)
    1bdc:	8d a1       	ldd	r24, Y+37	; 0x25
    1bde:	9e a1       	ldd	r25, Y+38	; 0x26
    1be0:	89 2b       	or	r24, r25
    1be2:	61 f7       	brne	.-40     	; 0x1bbc <LCD_displayCharacter+0x6c2>
		return;
    1be4:	21 c0       	rjmp	.+66     	; 0x1c28 <LCD_displayCharacter+0x72e>
		__ticks = (uint16_t)__tmp;
    1be6:	69 a1       	ldd	r22, Y+33	; 0x21
    1be8:	7a a1       	ldd	r23, Y+34	; 0x22
    1bea:	8b a1       	ldd	r24, Y+35	; 0x23
    1bec:	9c a1       	ldd	r25, Y+36	; 0x24
    1bee:	0e 94 42 14 	call	0x2884	; 0x2884 <__fixunssfsi>
    1bf2:	c6 55       	subi	r28, 0x56	; 86
    1bf4:	df 4f       	sbci	r29, 0xFF	; 255
    1bf6:	68 83       	st	Y, r22
    1bf8:	79 83       	std	Y+1, r23	; 0x01
    1bfa:	8a 83       	std	Y+2, r24	; 0x02
    1bfc:	9b 83       	std	Y+3, r25	; 0x03
    1bfe:	ca 5a       	subi	r28, 0xAA	; 170
    1c00:	d0 40       	sbci	r29, 0x00	; 0
    1c02:	c6 55       	subi	r28, 0x56	; 86
    1c04:	df 4f       	sbci	r29, 0xFF	; 255
    1c06:	e8 81       	ld	r30, Y
    1c08:	f9 81       	ldd	r31, Y+1	; 0x01
    1c0a:	ca 5a       	subi	r28, 0xAA	; 170
    1c0c:	d0 40       	sbci	r29, 0x00	; 0
    1c0e:	fe a3       	std	Y+38, r31	; 0x26
    1c10:	ed a3       	std	Y+37, r30	; 0x25
    1c12:	8d a1       	ldd	r24, Y+37	; 0x25
    1c14:	9e a1       	ldd	r25, Y+38	; 0x26
    1c16:	9a a7       	std	Y+42, r25	; 0x2a
    1c18:	89 a7       	std	Y+41, r24	; 0x29
	__asm__ volatile (
    1c1a:	89 a5       	ldd	r24, Y+41	; 0x29
    1c1c:	9a a5       	ldd	r25, Y+42	; 0x2a
    1c1e:	01 97       	sbiw	r24, 0x01	; 1
    1c20:	f1 f7       	brne	.-4      	; 0x1c1e <LCD_displayCharacter+0x724>
    1c22:	9a a7       	std	Y+42, r25	; 0x2a
    1c24:	89 a7       	std	Y+41, r24	; 0x29
}
    1c26:	00 00       	nop
	/* send the Least 4 bits of the required DATA to the data bus D4 --> D7 */
	DATA_OUT=( (data << 4 ) & 0xF0 ) | ( DATA_OUT & 0x0F );
#endif

#ifdef LOWER_MODE_BITS
	DATA_OUT=( (data ) & 0x0F ) | ( DATA_OUT & 0xF0 );
    1c28:	ce 01       	movw	r24, r28
    1c2a:	8b 5a       	subi	r24, 0xAB	; 171
    1c2c:	9f 4f       	sbci	r25, 0xFF	; 255
    1c2e:	dc 01       	movw	r26, r24
    1c30:	8c 91       	ld	r24, X
    1c32:	28 2f       	mov	r18, r24
    1c34:	2f 70       	andi	r18, 0x0F	; 15
    1c36:	85 e3       	ldi	r24, 0x35	; 53
    1c38:	90 e0       	ldi	r25, 0x00	; 0
    1c3a:	fc 01       	movw	r30, r24
    1c3c:	80 81       	ld	r24, Z
    1c3e:	80 7f       	andi	r24, 0xF0	; 240
    1c40:	28 2b       	or	r18, r24
    1c42:	85 e3       	ldi	r24, 0x35	; 53
    1c44:	90 e0       	ldi	r25, 0x00	; 0
    1c46:	dc 01       	movw	r26, r24
    1c48:	2c 93       	st	X, r18
    1c4a:	80 e0       	ldi	r24, 0x00	; 0
    1c4c:	90 e0       	ldi	r25, 0x00	; 0
    1c4e:	a0 e8       	ldi	r26, 0x80	; 128
    1c50:	bf e3       	ldi	r27, 0x3F	; 63
    1c52:	8f 87       	std	Y+15, r24	; 0x0f
    1c54:	98 8b       	std	Y+16, r25	; 0x10
    1c56:	a9 8b       	std	Y+17, r26	; 0x11
    1c58:	ba 8b       	std	Y+18, r27	; 0x12
	__tmp = ((F_CPU) / 4e3) * __ms;
    1c5a:	20 e0       	ldi	r18, 0x00	; 0
    1c5c:	30 e0       	ldi	r19, 0x00	; 0
    1c5e:	4a e7       	ldi	r20, 0x7A	; 122
    1c60:	53 e4       	ldi	r21, 0x43	; 67
    1c62:	6f 85       	ldd	r22, Y+15	; 0x0f
    1c64:	78 89       	ldd	r23, Y+16	; 0x10
    1c66:	89 89       	ldd	r24, Y+17	; 0x11
    1c68:	9a 89       	ldd	r25, Y+18	; 0x12
    1c6a:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <__mulsf3>
    1c6e:	c2 55       	subi	r28, 0x52	; 82
    1c70:	df 4f       	sbci	r29, 0xFF	; 255
    1c72:	68 83       	st	Y, r22
    1c74:	79 83       	std	Y+1, r23	; 0x01
    1c76:	8a 83       	std	Y+2, r24	; 0x02
    1c78:	9b 83       	std	Y+3, r25	; 0x03
    1c7a:	ce 5a       	subi	r28, 0xAE	; 174
    1c7c:	d0 40       	sbci	r29, 0x00	; 0
    1c7e:	c2 55       	subi	r28, 0x52	; 82
    1c80:	df 4f       	sbci	r29, 0xFF	; 255
    1c82:	28 81       	ld	r18, Y
    1c84:	39 81       	ldd	r19, Y+1	; 0x01
    1c86:	4a 81       	ldd	r20, Y+2	; 0x02
    1c88:	5b 81       	ldd	r21, Y+3	; 0x03
    1c8a:	ce 5a       	subi	r28, 0xAE	; 174
    1c8c:	d0 40       	sbci	r29, 0x00	; 0
    1c8e:	2b 8b       	std	Y+19, r18	; 0x13
    1c90:	3c 8b       	std	Y+20, r19	; 0x14
    1c92:	4d 8b       	std	Y+21, r20	; 0x15
    1c94:	5e 8b       	std	Y+22, r21	; 0x16
	if (__tmp < 1.0)
    1c96:	20 e0       	ldi	r18, 0x00	; 0
    1c98:	30 e0       	ldi	r19, 0x00	; 0
    1c9a:	40 e8       	ldi	r20, 0x80	; 128
    1c9c:	5f e3       	ldi	r21, 0x3F	; 63
    1c9e:	6b 89       	ldd	r22, Y+19	; 0x13
    1ca0:	7c 89       	ldd	r23, Y+20	; 0x14
    1ca2:	8d 89       	ldd	r24, Y+21	; 0x15
    1ca4:	9e 89       	ldd	r25, Y+22	; 0x16
    1ca6:	0e 94 cb 13 	call	0x2796	; 0x2796 <__cmpsf2>
    1caa:	88 23       	and	r24, r24
    1cac:	2c f4       	brge	.+10     	; 0x1cb8 <LCD_displayCharacter+0x7be>
		__ticks = 1;
    1cae:	81 e0       	ldi	r24, 0x01	; 1
    1cb0:	90 e0       	ldi	r25, 0x00	; 0
    1cb2:	98 8f       	std	Y+24, r25	; 0x18
    1cb4:	8f 8b       	std	Y+23, r24	; 0x17
    1cb6:	71 c0       	rjmp	.+226    	; 0x1d9a <LCD_displayCharacter+0x8a0>
	else if (__tmp > 65535)
    1cb8:	20 e0       	ldi	r18, 0x00	; 0
    1cba:	3f ef       	ldi	r19, 0xFF	; 255
    1cbc:	4f e7       	ldi	r20, 0x7F	; 127
    1cbe:	57 e4       	ldi	r21, 0x47	; 71
    1cc0:	6b 89       	ldd	r22, Y+19	; 0x13
    1cc2:	7c 89       	ldd	r23, Y+20	; 0x14
    1cc4:	8d 89       	ldd	r24, Y+21	; 0x15
    1cc6:	9e 89       	ldd	r25, Y+22	; 0x16
    1cc8:	0e 94 e6 14 	call	0x29cc	; 0x29cc <__gesf2>
    1ccc:	18 16       	cp	r1, r24
    1cce:	0c f0       	brlt	.+2      	; 0x1cd2 <LCD_displayCharacter+0x7d8>
    1cd0:	4e c0       	rjmp	.+156    	; 0x1d6e <LCD_displayCharacter+0x874>
		__ticks = (uint16_t) (__ms * 10.0);
    1cd2:	20 e0       	ldi	r18, 0x00	; 0
    1cd4:	30 e0       	ldi	r19, 0x00	; 0
    1cd6:	40 e2       	ldi	r20, 0x20	; 32
    1cd8:	51 e4       	ldi	r21, 0x41	; 65
    1cda:	6f 85       	ldd	r22, Y+15	; 0x0f
    1cdc:	78 89       	ldd	r23, Y+16	; 0x10
    1cde:	89 89       	ldd	r24, Y+17	; 0x11
    1ce0:	9a 89       	ldd	r25, Y+18	; 0x12
    1ce2:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <__mulsf3>
    1ce6:	ce 54       	subi	r28, 0x4E	; 78
    1ce8:	df 4f       	sbci	r29, 0xFF	; 255
    1cea:	68 83       	st	Y, r22
    1cec:	79 83       	std	Y+1, r23	; 0x01
    1cee:	8a 83       	std	Y+2, r24	; 0x02
    1cf0:	9b 83       	std	Y+3, r25	; 0x03
    1cf2:	c2 5b       	subi	r28, 0xB2	; 178
    1cf4:	d0 40       	sbci	r29, 0x00	; 0
    1cf6:	ce 54       	subi	r28, 0x4E	; 78
    1cf8:	df 4f       	sbci	r29, 0xFF	; 255
    1cfa:	88 81       	ld	r24, Y
    1cfc:	99 81       	ldd	r25, Y+1	; 0x01
    1cfe:	aa 81       	ldd	r26, Y+2	; 0x02
    1d00:	bb 81       	ldd	r27, Y+3	; 0x03
    1d02:	c2 5b       	subi	r28, 0xB2	; 178
    1d04:	d0 40       	sbci	r29, 0x00	; 0
    1d06:	6e 96       	adiw	r28, 0x1e	; 30
    1d08:	8c af       	std	Y+60, r24	; 0x3c
    1d0a:	9d af       	std	Y+61, r25	; 0x3d
    1d0c:	ae af       	std	Y+62, r26	; 0x3e
    1d0e:	bf af       	std	Y+63, r27	; 0x3f
    1d10:	6e 97       	sbiw	r28, 0x1e	; 30
    1d12:	6e 96       	adiw	r28, 0x1e	; 30
    1d14:	6c ad       	ldd	r22, Y+60	; 0x3c
    1d16:	7d ad       	ldd	r23, Y+61	; 0x3d
    1d18:	8e ad       	ldd	r24, Y+62	; 0x3e
    1d1a:	9f ad       	ldd	r25, Y+63	; 0x3f
    1d1c:	6e 97       	sbiw	r28, 0x1e	; 30
    1d1e:	0e 94 42 14 	call	0x2884	; 0x2884 <__fixunssfsi>
    1d22:	ca 54       	subi	r28, 0x4A	; 74
    1d24:	df 4f       	sbci	r29, 0xFF	; 255
    1d26:	68 83       	st	Y, r22
    1d28:	79 83       	std	Y+1, r23	; 0x01
    1d2a:	8a 83       	std	Y+2, r24	; 0x02
    1d2c:	9b 83       	std	Y+3, r25	; 0x03
    1d2e:	c6 5b       	subi	r28, 0xB6	; 182
    1d30:	d0 40       	sbci	r29, 0x00	; 0
    1d32:	ca 54       	subi	r28, 0x4A	; 74
    1d34:	df 4f       	sbci	r29, 0xFF	; 255
    1d36:	a8 81       	ld	r26, Y
    1d38:	b9 81       	ldd	r27, Y+1	; 0x01
    1d3a:	c6 5b       	subi	r28, 0xB6	; 182
    1d3c:	d0 40       	sbci	r29, 0x00	; 0
    1d3e:	b8 8f       	std	Y+24, r27	; 0x18
    1d40:	af 8b       	std	Y+23, r26	; 0x17
		while(__ticks)
    1d42:	10 c0       	rjmp	.+32     	; 0x1d64 <LCD_displayCharacter+0x86a>
    1d44:	89 e1       	ldi	r24, 0x19	; 25
    1d46:	90 e0       	ldi	r25, 0x00	; 0
    1d48:	9a 8f       	std	Y+26, r25	; 0x1a
    1d4a:	89 8f       	std	Y+25, r24	; 0x19
	__asm__ volatile (
    1d4c:	89 8d       	ldd	r24, Y+25	; 0x19
    1d4e:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1d50:	01 97       	sbiw	r24, 0x01	; 1
    1d52:	f1 f7       	brne	.-4      	; 0x1d50 <LCD_displayCharacter+0x856>
    1d54:	9a 8f       	std	Y+26, r25	; 0x1a
    1d56:	89 8f       	std	Y+25, r24	; 0x19
}
    1d58:	00 00       	nop
			__ticks --;
    1d5a:	8f 89       	ldd	r24, Y+23	; 0x17
    1d5c:	98 8d       	ldd	r25, Y+24	; 0x18
    1d5e:	01 97       	sbiw	r24, 0x01	; 1
    1d60:	98 8f       	std	Y+24, r25	; 0x18
    1d62:	8f 8b       	std	Y+23, r24	; 0x17
		while(__ticks)
    1d64:	8f 89       	ldd	r24, Y+23	; 0x17
    1d66:	98 8d       	ldd	r25, Y+24	; 0x18
    1d68:	89 2b       	or	r24, r25
    1d6a:	61 f7       	brne	.-40     	; 0x1d44 <LCD_displayCharacter+0x84a>
		return;
    1d6c:	21 c0       	rjmp	.+66     	; 0x1db0 <LCD_displayCharacter+0x8b6>
		__ticks = (uint16_t)__tmp;
    1d6e:	6b 89       	ldd	r22, Y+19	; 0x13
    1d70:	7c 89       	ldd	r23, Y+20	; 0x14
    1d72:	8d 89       	ldd	r24, Y+21	; 0x15
    1d74:	9e 89       	ldd	r25, Y+22	; 0x16
    1d76:	0e 94 42 14 	call	0x2884	; 0x2884 <__fixunssfsi>
    1d7a:	c6 54       	subi	r28, 0x46	; 70
    1d7c:	df 4f       	sbci	r29, 0xFF	; 255
    1d7e:	68 83       	st	Y, r22
    1d80:	79 83       	std	Y+1, r23	; 0x01
    1d82:	8a 83       	std	Y+2, r24	; 0x02
    1d84:	9b 83       	std	Y+3, r25	; 0x03
    1d86:	ca 5b       	subi	r28, 0xBA	; 186
    1d88:	d0 40       	sbci	r29, 0x00	; 0
    1d8a:	c6 54       	subi	r28, 0x46	; 70
    1d8c:	df 4f       	sbci	r29, 0xFF	; 255
    1d8e:	e8 81       	ld	r30, Y
    1d90:	f9 81       	ldd	r31, Y+1	; 0x01
    1d92:	ca 5b       	subi	r28, 0xBA	; 186
    1d94:	d0 40       	sbci	r29, 0x00	; 0
    1d96:	f8 8f       	std	Y+24, r31	; 0x18
    1d98:	ef 8b       	std	Y+23, r30	; 0x17
    1d9a:	8f 89       	ldd	r24, Y+23	; 0x17
    1d9c:	98 8d       	ldd	r25, Y+24	; 0x18
    1d9e:	9c 8f       	std	Y+28, r25	; 0x1c
    1da0:	8b 8f       	std	Y+27, r24	; 0x1b
	__asm__ volatile (
    1da2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1da4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1da6:	01 97       	sbiw	r24, 0x01	; 1
    1da8:	f1 f7       	brne	.-4      	; 0x1da6 <LCD_displayCharacter+0x8ac>
    1daa:	9c 8f       	std	Y+28, r25	; 0x1c
    1dac:	8b 8f       	std	Y+27, r24	; 0x1b
}
    1dae:	00 00       	nop
#endif
#endif
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	E = CLEAR; /* close enable to prevent data share between LCD and AVR */
    1db0:	82 e3       	ldi	r24, 0x32	; 50
    1db2:	90 e0       	ldi	r25, 0x00	; 0
    1db4:	dc 01       	movw	r26, r24
    1db6:	2c 91       	ld	r18, X
    1db8:	2f 7b       	andi	r18, 0xBF	; 191
    1dba:	fc 01       	movw	r30, r24
    1dbc:	20 83       	st	Z, r18
    1dbe:	80 e0       	ldi	r24, 0x00	; 0
    1dc0:	90 e0       	ldi	r25, 0x00	; 0
    1dc2:	a0 e8       	ldi	r26, 0x80	; 128
    1dc4:	bf e3       	ldi	r27, 0x3F	; 63
    1dc6:	89 83       	std	Y+1, r24	; 0x01
    1dc8:	9a 83       	std	Y+2, r25	; 0x02
    1dca:	ab 83       	std	Y+3, r26	; 0x03
    1dcc:	bc 83       	std	Y+4, r27	; 0x04
	__tmp = ((F_CPU) / 4e3) * __ms;
    1dce:	20 e0       	ldi	r18, 0x00	; 0
    1dd0:	30 e0       	ldi	r19, 0x00	; 0
    1dd2:	4a e7       	ldi	r20, 0x7A	; 122
    1dd4:	53 e4       	ldi	r21, 0x43	; 67
    1dd6:	69 81       	ldd	r22, Y+1	; 0x01
    1dd8:	7a 81       	ldd	r23, Y+2	; 0x02
    1dda:	8b 81       	ldd	r24, Y+3	; 0x03
    1ddc:	9c 81       	ldd	r25, Y+4	; 0x04
    1dde:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <__mulsf3>
    1de2:	c2 54       	subi	r28, 0x42	; 66
    1de4:	df 4f       	sbci	r29, 0xFF	; 255
    1de6:	68 83       	st	Y, r22
    1de8:	79 83       	std	Y+1, r23	; 0x01
    1dea:	8a 83       	std	Y+2, r24	; 0x02
    1dec:	9b 83       	std	Y+3, r25	; 0x03
    1dee:	ce 5b       	subi	r28, 0xBE	; 190
    1df0:	d0 40       	sbci	r29, 0x00	; 0
    1df2:	c2 54       	subi	r28, 0x42	; 66
    1df4:	df 4f       	sbci	r29, 0xFF	; 255
    1df6:	28 81       	ld	r18, Y
    1df8:	39 81       	ldd	r19, Y+1	; 0x01
    1dfa:	4a 81       	ldd	r20, Y+2	; 0x02
    1dfc:	5b 81       	ldd	r21, Y+3	; 0x03
    1dfe:	ce 5b       	subi	r28, 0xBE	; 190
    1e00:	d0 40       	sbci	r29, 0x00	; 0
    1e02:	2d 83       	std	Y+5, r18	; 0x05
    1e04:	3e 83       	std	Y+6, r19	; 0x06
    1e06:	4f 83       	std	Y+7, r20	; 0x07
    1e08:	58 87       	std	Y+8, r21	; 0x08
	if (__tmp < 1.0)
    1e0a:	20 e0       	ldi	r18, 0x00	; 0
    1e0c:	30 e0       	ldi	r19, 0x00	; 0
    1e0e:	40 e8       	ldi	r20, 0x80	; 128
    1e10:	5f e3       	ldi	r21, 0x3F	; 63
    1e12:	6d 81       	ldd	r22, Y+5	; 0x05
    1e14:	7e 81       	ldd	r23, Y+6	; 0x06
    1e16:	8f 81       	ldd	r24, Y+7	; 0x07
    1e18:	98 85       	ldd	r25, Y+8	; 0x08
    1e1a:	0e 94 cb 13 	call	0x2796	; 0x2796 <__cmpsf2>
    1e1e:	88 23       	and	r24, r24
    1e20:	2c f4       	brge	.+10     	; 0x1e2c <LCD_displayCharacter+0x932>
		__ticks = 1;
    1e22:	81 e0       	ldi	r24, 0x01	; 1
    1e24:	90 e0       	ldi	r25, 0x00	; 0
    1e26:	9a 87       	std	Y+10, r25	; 0x0a
    1e28:	89 87       	std	Y+9, r24	; 0x09
    1e2a:	71 c0       	rjmp	.+226    	; 0x1f0e <LCD_displayCharacter+0xa14>
	else if (__tmp > 65535)
    1e2c:	20 e0       	ldi	r18, 0x00	; 0
    1e2e:	3f ef       	ldi	r19, 0xFF	; 255
    1e30:	4f e7       	ldi	r20, 0x7F	; 127
    1e32:	57 e4       	ldi	r21, 0x47	; 71
    1e34:	6d 81       	ldd	r22, Y+5	; 0x05
    1e36:	7e 81       	ldd	r23, Y+6	; 0x06
    1e38:	8f 81       	ldd	r24, Y+7	; 0x07
    1e3a:	98 85       	ldd	r25, Y+8	; 0x08
    1e3c:	0e 94 e6 14 	call	0x29cc	; 0x29cc <__gesf2>
    1e40:	18 16       	cp	r1, r24
    1e42:	0c f0       	brlt	.+2      	; 0x1e46 <LCD_displayCharacter+0x94c>
    1e44:	4e c0       	rjmp	.+156    	; 0x1ee2 <LCD_displayCharacter+0x9e8>
		__ticks = (uint16_t) (__ms * 10.0);
    1e46:	20 e0       	ldi	r18, 0x00	; 0
    1e48:	30 e0       	ldi	r19, 0x00	; 0
    1e4a:	40 e2       	ldi	r20, 0x20	; 32
    1e4c:	51 e4       	ldi	r21, 0x41	; 65
    1e4e:	69 81       	ldd	r22, Y+1	; 0x01
    1e50:	7a 81       	ldd	r23, Y+2	; 0x02
    1e52:	8b 81       	ldd	r24, Y+3	; 0x03
    1e54:	9c 81       	ldd	r25, Y+4	; 0x04
    1e56:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <__mulsf3>
    1e5a:	ce 53       	subi	r28, 0x3E	; 62
    1e5c:	df 4f       	sbci	r29, 0xFF	; 255
    1e5e:	68 83       	st	Y, r22
    1e60:	79 83       	std	Y+1, r23	; 0x01
    1e62:	8a 83       	std	Y+2, r24	; 0x02
    1e64:	9b 83       	std	Y+3, r25	; 0x03
    1e66:	c2 5c       	subi	r28, 0xC2	; 194
    1e68:	d0 40       	sbci	r29, 0x00	; 0
    1e6a:	ce 53       	subi	r28, 0x3E	; 62
    1e6c:	df 4f       	sbci	r29, 0xFF	; 255
    1e6e:	88 81       	ld	r24, Y
    1e70:	99 81       	ldd	r25, Y+1	; 0x01
    1e72:	aa 81       	ldd	r26, Y+2	; 0x02
    1e74:	bb 81       	ldd	r27, Y+3	; 0x03
    1e76:	c2 5c       	subi	r28, 0xC2	; 194
    1e78:	d0 40       	sbci	r29, 0x00	; 0
    1e7a:	6a 96       	adiw	r28, 0x1a	; 26
    1e7c:	8c af       	std	Y+60, r24	; 0x3c
    1e7e:	9d af       	std	Y+61, r25	; 0x3d
    1e80:	ae af       	std	Y+62, r26	; 0x3e
    1e82:	bf af       	std	Y+63, r27	; 0x3f
    1e84:	6a 97       	sbiw	r28, 0x1a	; 26
    1e86:	6a 96       	adiw	r28, 0x1a	; 26
    1e88:	6c ad       	ldd	r22, Y+60	; 0x3c
    1e8a:	7d ad       	ldd	r23, Y+61	; 0x3d
    1e8c:	8e ad       	ldd	r24, Y+62	; 0x3e
    1e8e:	9f ad       	ldd	r25, Y+63	; 0x3f
    1e90:	6a 97       	sbiw	r28, 0x1a	; 26
    1e92:	0e 94 42 14 	call	0x2884	; 0x2884 <__fixunssfsi>
    1e96:	ca 53       	subi	r28, 0x3A	; 58
    1e98:	df 4f       	sbci	r29, 0xFF	; 255
    1e9a:	68 83       	st	Y, r22
    1e9c:	79 83       	std	Y+1, r23	; 0x01
    1e9e:	8a 83       	std	Y+2, r24	; 0x02
    1ea0:	9b 83       	std	Y+3, r25	; 0x03
    1ea2:	c6 5c       	subi	r28, 0xC6	; 198
    1ea4:	d0 40       	sbci	r29, 0x00	; 0
    1ea6:	ca 53       	subi	r28, 0x3A	; 58
    1ea8:	df 4f       	sbci	r29, 0xFF	; 255
    1eaa:	a8 81       	ld	r26, Y
    1eac:	b9 81       	ldd	r27, Y+1	; 0x01
    1eae:	c6 5c       	subi	r28, 0xC6	; 198
    1eb0:	d0 40       	sbci	r29, 0x00	; 0
    1eb2:	ba 87       	std	Y+10, r27	; 0x0a
    1eb4:	a9 87       	std	Y+9, r26	; 0x09
		while(__ticks)
    1eb6:	10 c0       	rjmp	.+32     	; 0x1ed8 <LCD_displayCharacter+0x9de>
    1eb8:	89 e1       	ldi	r24, 0x19	; 25
    1eba:	90 e0       	ldi	r25, 0x00	; 0
    1ebc:	9c 87       	std	Y+12, r25	; 0x0c
    1ebe:	8b 87       	std	Y+11, r24	; 0x0b
	__asm__ volatile (
    1ec0:	8b 85       	ldd	r24, Y+11	; 0x0b
    1ec2:	9c 85       	ldd	r25, Y+12	; 0x0c
    1ec4:	01 97       	sbiw	r24, 0x01	; 1
    1ec6:	f1 f7       	brne	.-4      	; 0x1ec4 <LCD_displayCharacter+0x9ca>
    1ec8:	9c 87       	std	Y+12, r25	; 0x0c
    1eca:	8b 87       	std	Y+11, r24	; 0x0b
}
    1ecc:	00 00       	nop
			__ticks --;
    1ece:	89 85       	ldd	r24, Y+9	; 0x09
    1ed0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ed2:	01 97       	sbiw	r24, 0x01	; 1
    1ed4:	9a 87       	std	Y+10, r25	; 0x0a
    1ed6:	89 87       	std	Y+9, r24	; 0x09
		while(__ticks)
    1ed8:	89 85       	ldd	r24, Y+9	; 0x09
    1eda:	9a 85       	ldd	r25, Y+10	; 0x0a
    1edc:	89 2b       	or	r24, r25
    1ede:	61 f7       	brne	.-40     	; 0x1eb8 <LCD_displayCharacter+0x9be>
		return;
    1ee0:	21 c0       	rjmp	.+66     	; 0x1f24 <LCD_displayCharacter+0xa2a>
		__ticks = (uint16_t)__tmp;
    1ee2:	6d 81       	ldd	r22, Y+5	; 0x05
    1ee4:	7e 81       	ldd	r23, Y+6	; 0x06
    1ee6:	8f 81       	ldd	r24, Y+7	; 0x07
    1ee8:	98 85       	ldd	r25, Y+8	; 0x08
    1eea:	0e 94 42 14 	call	0x2884	; 0x2884 <__fixunssfsi>
    1eee:	c6 53       	subi	r28, 0x36	; 54
    1ef0:	df 4f       	sbci	r29, 0xFF	; 255
    1ef2:	68 83       	st	Y, r22
    1ef4:	79 83       	std	Y+1, r23	; 0x01
    1ef6:	8a 83       	std	Y+2, r24	; 0x02
    1ef8:	9b 83       	std	Y+3, r25	; 0x03
    1efa:	ca 5c       	subi	r28, 0xCA	; 202
    1efc:	d0 40       	sbci	r29, 0x00	; 0
    1efe:	c6 53       	subi	r28, 0x36	; 54
    1f00:	df 4f       	sbci	r29, 0xFF	; 255
    1f02:	e8 81       	ld	r30, Y
    1f04:	f9 81       	ldd	r31, Y+1	; 0x01
    1f06:	ca 5c       	subi	r28, 0xCA	; 202
    1f08:	d0 40       	sbci	r29, 0x00	; 0
    1f0a:	fa 87       	std	Y+10, r31	; 0x0a
    1f0c:	e9 87       	std	Y+9, r30	; 0x09
    1f0e:	89 85       	ldd	r24, Y+9	; 0x09
    1f10:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f12:	9e 87       	std	Y+14, r25	; 0x0e
    1f14:	8d 87       	std	Y+13, r24	; 0x0d
	__asm__ volatile (
    1f16:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f18:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f1a:	01 97       	sbiw	r24, 0x01	; 1
    1f1c:	f1 f7       	brne	.-4      	; 0x1f1a <LCD_displayCharacter+0xa20>
    1f1e:	9e 87       	std	Y+14, r25	; 0x0e
    1f20:	8d 87       	std	Y+13, r24	; 0x0d
}
    1f22:	00 00       	nop
	_delay_ms(1); /* delay for processing Th = 13ns */
	return;
    1f24:	00 00       	nop
}
    1f26:	c3 53       	subi	r28, 0x33	; 51
    1f28:	df 4f       	sbci	r29, 0xFF	; 255
    1f2a:	0f b6       	in	r0, 0x3f	; 63
    1f2c:	f8 94       	cli
    1f2e:	de bf       	out	0x3e, r29	; 62
    1f30:	0f be       	out	0x3f, r0	; 63
    1f32:	cd bf       	out	0x3d, r28	; 61
    1f34:	df 91       	pop	r29
    1f36:	cf 91       	pop	r28
    1f38:	1f 91       	pop	r17
    1f3a:	0f 91       	pop	r16
    1f3c:	08 95       	ret

00001f3e <LCD_displayString>:

/*
 * Function responsible for Display more One character on LCD
 */
void LCD_displayString(const sint8 *Str) {
    1f3e:	cf 93       	push	r28
    1f40:	df 93       	push	r29
    1f42:	00 d0       	rcall	.+0      	; 0x1f44 <LCD_displayString+0x6>
    1f44:	cd b7       	in	r28, 0x3d	; 61
    1f46:	de b7       	in	r29, 0x3e	; 62
    1f48:	9a 83       	std	Y+2, r25	; 0x02
    1f4a:	89 83       	std	Y+1, r24	; 0x01
	while (*Str != '\0') {
    1f4c:	0b c0       	rjmp	.+22     	; 0x1f64 <LCD_displayString+0x26>
		LCD_displayCharacter(*Str);
    1f4e:	89 81       	ldd	r24, Y+1	; 0x01
    1f50:	9a 81       	ldd	r25, Y+2	; 0x02
    1f52:	fc 01       	movw	r30, r24
    1f54:	80 81       	ld	r24, Z
    1f56:	0e 94 7d 0a 	call	0x14fa	; 0x14fa <LCD_displayCharacter>
		Str++;
    1f5a:	89 81       	ldd	r24, Y+1	; 0x01
    1f5c:	9a 81       	ldd	r25, Y+2	; 0x02
    1f5e:	01 96       	adiw	r24, 0x01	; 1
    1f60:	9a 83       	std	Y+2, r25	; 0x02
    1f62:	89 83       	std	Y+1, r24	; 0x01
	while (*Str != '\0') {
    1f64:	89 81       	ldd	r24, Y+1	; 0x01
    1f66:	9a 81       	ldd	r25, Y+2	; 0x02
    1f68:	fc 01       	movw	r30, r24
    1f6a:	80 81       	ld	r24, Z
    1f6c:	88 23       	and	r24, r24
    1f6e:	79 f7       	brne	.-34     	; 0x1f4e <LCD_displayString+0x10>
	 LCD_displayCharacter(Str[i]);
	 i++;
	 }
	 ************************************************************/

	return;
    1f70:	00 00       	nop

}
    1f72:	0f 90       	pop	r0
    1f74:	0f 90       	pop	r0
    1f76:	df 91       	pop	r29
    1f78:	cf 91       	pop	r28
    1f7a:	08 95       	ret

00001f7c <LCD_init>:

/*
 * Function responsible to initialize LCD pins and mode .... etc .
 */
void LCD_init(void) {
    1f7c:	cf 93       	push	r28
    1f7e:	df 93       	push	r29
    1f80:	cd b7       	in	r28, 0x3d	; 61
    1f82:	de b7       	in	r29, 0x3e	; 62
    1f84:	a2 97       	sbiw	r28, 0x22	; 34
    1f86:	0f b6       	in	r0, 0x3f	; 63
    1f88:	f8 94       	cli
    1f8a:	de bf       	out	0x3e, r29	; 62
    1f8c:	0f be       	out	0x3f, r0	; 63
    1f8e:	cd bf       	out	0x3d, r28	; 61
	RS_DIR = 1; /* select RS pin output pin */
    1f90:	81 e3       	ldi	r24, 0x31	; 49
    1f92:	90 e0       	ldi	r25, 0x00	; 0
    1f94:	dc 01       	movw	r26, r24
    1f96:	2c 91       	ld	r18, X
    1f98:	20 61       	ori	r18, 0x10	; 16
    1f9a:	fc 01       	movw	r30, r24
    1f9c:	20 83       	st	Z, r18
	RW_DIR = 1; /* select RW pin output pin */
    1f9e:	81 e3       	ldi	r24, 0x31	; 49
    1fa0:	90 e0       	ldi	r25, 0x00	; 0
    1fa2:	dc 01       	movw	r26, r24
    1fa4:	2c 91       	ld	r18, X
    1fa6:	20 62       	ori	r18, 0x20	; 32
    1fa8:	fc 01       	movw	r30, r24
    1faa:	20 83       	st	Z, r18
	E_DIR = 1; /* select Enable pin output pin */
    1fac:	81 e3       	ldi	r24, 0x31	; 49
    1fae:	90 e0       	ldi	r25, 0x00	; 0
    1fb0:	dc 01       	movw	r26, r24
    1fb2:	2c 91       	ld	r18, X
    1fb4:	20 64       	ori	r18, 0x40	; 64
    1fb6:	fc 01       	movw	r30, r24
    1fb8:	20 83       	st	Z, r18
	LCD_sendCommand(TWO_LINE_LCD_Eight_BIT_MODE);
#endif

#if (DATA_MODE == 4)
	/* LCD Configuration Mode of number of DATA line = 4 lines */
	LCD_sendCommand(FOUR_BITS_MODE); /* initialize LCD in 4-bit mode */
    1fba:	82 e0       	ldi	r24, 0x02	; 2
    1fbc:	0e 94 5b 05 	call	0xab6	; 0xab6 <LCD_sendCommand>
	LCD_sendCommand(TWO_LINE_LCD_Four_BIT_MODE);
    1fc0:	88 e2       	ldi	r24, 0x28	; 40
    1fc2:	0e 94 5b 05 	call	0xab6	; 0xab6 <LCD_sendCommand>
#ifdef UPPER_MODE_BITS
	DATA_DIR |= 0xF0; /* select highest 4 bits as a output pins */
#endif

#ifdef LOWER_MODE_BITS
	DATA_DIR |= 0x0F;	/* select first 4 bits as a output pins */
    1fc6:	84 e3       	ldi	r24, 0x34	; 52
    1fc8:	90 e0       	ldi	r25, 0x00	; 0
    1fca:	dc 01       	movw	r26, r24
    1fcc:	2c 91       	ld	r18, X
    1fce:	84 e3       	ldi	r24, 0x34	; 52
    1fd0:	90 e0       	ldi	r25, 0x00	; 0
    1fd2:	2f 60       	ori	r18, 0x0F	; 15
    1fd4:	fc 01       	movw	r30, r24
    1fd6:	20 83       	st	Z, r18
#endif
#endif
	LCD_sendCommand(CURSOR_OFF); /* hide cursor from LCD */
    1fd8:	8c e0       	ldi	r24, 0x0C	; 12
    1fda:	0e 94 5b 05 	call	0xab6	; 0xab6 <LCD_sendCommand>
	LCD_sendCommand(AUTO_INCREMENT); /* hide cursor from LCD */
    1fde:	86 e0       	ldi	r24, 0x06	; 6
    1fe0:	0e 94 5b 05 	call	0xab6	; 0xab6 <LCD_sendCommand>
	LCD_sendCommand(CLEAR_SCREEN); /* clear LCD screen */
    1fe4:	81 e0       	ldi	r24, 0x01	; 1
    1fe6:	0e 94 5b 05 	call	0xab6	; 0xab6 <LCD_sendCommand>
    1fea:	80 e0       	ldi	r24, 0x00	; 0
    1fec:	90 e0       	ldi	r25, 0x00	; 0
    1fee:	a0 e0       	ldi	r26, 0x00	; 0
    1ff0:	b0 e4       	ldi	r27, 0x40	; 64
    1ff2:	89 83       	std	Y+1, r24	; 0x01
    1ff4:	9a 83       	std	Y+2, r25	; 0x02
    1ff6:	ab 83       	std	Y+3, r26	; 0x03
    1ff8:	bc 83       	std	Y+4, r27	; 0x04
	__tmp = ((F_CPU) / 4e3) * __ms;
    1ffa:	20 e0       	ldi	r18, 0x00	; 0
    1ffc:	30 e0       	ldi	r19, 0x00	; 0
    1ffe:	4a e7       	ldi	r20, 0x7A	; 122
    2000:	53 e4       	ldi	r21, 0x43	; 67
    2002:	69 81       	ldd	r22, Y+1	; 0x01
    2004:	7a 81       	ldd	r23, Y+2	; 0x02
    2006:	8b 81       	ldd	r24, Y+3	; 0x03
    2008:	9c 81       	ldd	r25, Y+4	; 0x04
    200a:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <__mulsf3>
    200e:	6b 8b       	std	Y+19, r22	; 0x13
    2010:	7c 8b       	std	Y+20, r23	; 0x14
    2012:	8d 8b       	std	Y+21, r24	; 0x15
    2014:	9e 8b       	std	Y+22, r25	; 0x16
    2016:	8b 89       	ldd	r24, Y+19	; 0x13
    2018:	9c 89       	ldd	r25, Y+20	; 0x14
    201a:	ad 89       	ldd	r26, Y+21	; 0x15
    201c:	be 89       	ldd	r27, Y+22	; 0x16
    201e:	8d 83       	std	Y+5, r24	; 0x05
    2020:	9e 83       	std	Y+6, r25	; 0x06
    2022:	af 83       	std	Y+7, r26	; 0x07
    2024:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    2026:	20 e0       	ldi	r18, 0x00	; 0
    2028:	30 e0       	ldi	r19, 0x00	; 0
    202a:	40 e8       	ldi	r20, 0x80	; 128
    202c:	5f e3       	ldi	r21, 0x3F	; 63
    202e:	6d 81       	ldd	r22, Y+5	; 0x05
    2030:	7e 81       	ldd	r23, Y+6	; 0x06
    2032:	8f 81       	ldd	r24, Y+7	; 0x07
    2034:	98 85       	ldd	r25, Y+8	; 0x08
    2036:	0e 94 cb 13 	call	0x2796	; 0x2796 <__cmpsf2>
    203a:	88 23       	and	r24, r24
    203c:	2c f4       	brge	.+10     	; 0x2048 <LCD_init+0xcc>
		__ticks = 1;
    203e:	81 e0       	ldi	r24, 0x01	; 1
    2040:	90 e0       	ldi	r25, 0x00	; 0
    2042:	9a 87       	std	Y+10, r25	; 0x0a
    2044:	89 87       	std	Y+9, r24	; 0x09
    2046:	54 c0       	rjmp	.+168    	; 0x20f0 <LCD_init+0x174>
	else if (__tmp > 65535)
    2048:	20 e0       	ldi	r18, 0x00	; 0
    204a:	3f ef       	ldi	r19, 0xFF	; 255
    204c:	4f e7       	ldi	r20, 0x7F	; 127
    204e:	57 e4       	ldi	r21, 0x47	; 71
    2050:	6d 81       	ldd	r22, Y+5	; 0x05
    2052:	7e 81       	ldd	r23, Y+6	; 0x06
    2054:	8f 81       	ldd	r24, Y+7	; 0x07
    2056:	98 85       	ldd	r25, Y+8	; 0x08
    2058:	0e 94 e6 14 	call	0x29cc	; 0x29cc <__gesf2>
    205c:	18 16       	cp	r1, r24
    205e:	d4 f5       	brge	.+116    	; 0x20d4 <LCD_init+0x158>
		__ticks = (uint16_t) (__ms * 10.0);
    2060:	20 e0       	ldi	r18, 0x00	; 0
    2062:	30 e0       	ldi	r19, 0x00	; 0
    2064:	40 e2       	ldi	r20, 0x20	; 32
    2066:	51 e4       	ldi	r21, 0x41	; 65
    2068:	69 81       	ldd	r22, Y+1	; 0x01
    206a:	7a 81       	ldd	r23, Y+2	; 0x02
    206c:	8b 81       	ldd	r24, Y+3	; 0x03
    206e:	9c 81       	ldd	r25, Y+4	; 0x04
    2070:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <__mulsf3>
    2074:	6f 8b       	std	Y+23, r22	; 0x17
    2076:	78 8f       	std	Y+24, r23	; 0x18
    2078:	89 8f       	std	Y+25, r24	; 0x19
    207a:	9a 8f       	std	Y+26, r25	; 0x1a
    207c:	8f 89       	ldd	r24, Y+23	; 0x17
    207e:	98 8d       	ldd	r25, Y+24	; 0x18
    2080:	a9 8d       	ldd	r26, Y+25	; 0x19
    2082:	ba 8d       	ldd	r27, Y+26	; 0x1a
    2084:	8f 87       	std	Y+15, r24	; 0x0f
    2086:	98 8b       	std	Y+16, r25	; 0x10
    2088:	a9 8b       	std	Y+17, r26	; 0x11
    208a:	ba 8b       	std	Y+18, r27	; 0x12
    208c:	6f 85       	ldd	r22, Y+15	; 0x0f
    208e:	78 89       	ldd	r23, Y+16	; 0x10
    2090:	89 89       	ldd	r24, Y+17	; 0x11
    2092:	9a 89       	ldd	r25, Y+18	; 0x12
    2094:	0e 94 42 14 	call	0x2884	; 0x2884 <__fixunssfsi>
    2098:	6b 8f       	std	Y+27, r22	; 0x1b
    209a:	7c 8f       	std	Y+28, r23	; 0x1c
    209c:	8d 8f       	std	Y+29, r24	; 0x1d
    209e:	9e 8f       	std	Y+30, r25	; 0x1e
    20a0:	ab 8d       	ldd	r26, Y+27	; 0x1b
    20a2:	bc 8d       	ldd	r27, Y+28	; 0x1c
    20a4:	ba 87       	std	Y+10, r27	; 0x0a
    20a6:	a9 87       	std	Y+9, r26	; 0x09
		while(__ticks)
    20a8:	10 c0       	rjmp	.+32     	; 0x20ca <LCD_init+0x14e>
    20aa:	89 e1       	ldi	r24, 0x19	; 25
    20ac:	90 e0       	ldi	r25, 0x00	; 0
    20ae:	9c 87       	std	Y+12, r25	; 0x0c
    20b0:	8b 87       	std	Y+11, r24	; 0x0b
	__asm__ volatile (
    20b2:	8b 85       	ldd	r24, Y+11	; 0x0b
    20b4:	9c 85       	ldd	r25, Y+12	; 0x0c
    20b6:	01 97       	sbiw	r24, 0x01	; 1
    20b8:	f1 f7       	brne	.-4      	; 0x20b6 <LCD_init+0x13a>
    20ba:	9c 87       	std	Y+12, r25	; 0x0c
    20bc:	8b 87       	std	Y+11, r24	; 0x0b
}
    20be:	00 00       	nop
			__ticks --;
    20c0:	89 85       	ldd	r24, Y+9	; 0x09
    20c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    20c4:	01 97       	sbiw	r24, 0x01	; 1
    20c6:	9a 87       	std	Y+10, r25	; 0x0a
    20c8:	89 87       	std	Y+9, r24	; 0x09
		while(__ticks)
    20ca:	89 85       	ldd	r24, Y+9	; 0x09
    20cc:	9a 85       	ldd	r25, Y+10	; 0x0a
    20ce:	89 2b       	or	r24, r25
    20d0:	61 f7       	brne	.-40     	; 0x20aa <LCD_init+0x12e>
		return;
    20d2:	19 c0       	rjmp	.+50     	; 0x2106 <LCD_init+0x18a>
		__ticks = (uint16_t)__tmp;
    20d4:	6d 81       	ldd	r22, Y+5	; 0x05
    20d6:	7e 81       	ldd	r23, Y+6	; 0x06
    20d8:	8f 81       	ldd	r24, Y+7	; 0x07
    20da:	98 85       	ldd	r25, Y+8	; 0x08
    20dc:	0e 94 42 14 	call	0x2884	; 0x2884 <__fixunssfsi>
    20e0:	6f 8f       	std	Y+31, r22	; 0x1f
    20e2:	78 a3       	std	Y+32, r23	; 0x20
    20e4:	89 a3       	std	Y+33, r24	; 0x21
    20e6:	9a a3       	std	Y+34, r25	; 0x22
    20e8:	ef 8d       	ldd	r30, Y+31	; 0x1f
    20ea:	f8 a1       	ldd	r31, Y+32	; 0x20
    20ec:	fa 87       	std	Y+10, r31	; 0x0a
    20ee:	e9 87       	std	Y+9, r30	; 0x09
    20f0:	89 85       	ldd	r24, Y+9	; 0x09
    20f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    20f4:	9e 87       	std	Y+14, r25	; 0x0e
    20f6:	8d 87       	std	Y+13, r24	; 0x0d
	__asm__ volatile (
    20f8:	8d 85       	ldd	r24, Y+13	; 0x0d
    20fa:	9e 85       	ldd	r25, Y+14	; 0x0e
    20fc:	01 97       	sbiw	r24, 0x01	; 1
    20fe:	f1 f7       	brne	.-4      	; 0x20fc <LCD_init+0x180>
    2100:	9e 87       	std	Y+14, r25	; 0x0e
    2102:	8d 87       	std	Y+13, r24	; 0x0d
}
    2104:	00 00       	nop
	_delay_ms(2);
	LCD_sendCommand(CURSOR_HOME_LOCATION);
    2106:	80 e8       	ldi	r24, 0x80	; 128
    2108:	0e 94 5b 05 	call	0xab6	; 0xab6 <LCD_sendCommand>
	return;
    210c:	00 00       	nop
}
    210e:	a2 96       	adiw	r28, 0x22	; 34
    2110:	0f b6       	in	r0, 0x3f	; 63
    2112:	f8 94       	cli
    2114:	de bf       	out	0x3e, r29	; 62
    2116:	0f be       	out	0x3f, r0	; 63
    2118:	cd bf       	out	0x3d, r28	; 61
    211a:	df 91       	pop	r29
    211c:	cf 91       	pop	r28
    211e:	08 95       	ret

00002120 <LCD_clearScreen>:

/*
 * Function responsible to send clear command to LCD
 */
void LCD_clearScreen(void) {
    2120:	cf 93       	push	r28
    2122:	df 93       	push	r29
    2124:	cd b7       	in	r28, 0x3d	; 61
    2126:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(CLEAR_SCREEN); /* clear LCD screen */
    2128:	81 e0       	ldi	r24, 0x01	; 1
    212a:	0e 94 5b 05 	call	0xab6	; 0xab6 <LCD_sendCommand>
	LCD_sendCommand(CURSOR_HOME_LOCATION);
    212e:	80 e8       	ldi	r24, 0x80	; 128
    2130:	0e 94 5b 05 	call	0xab6	; 0xab6 <LCD_sendCommand>
	return;
    2134:	00 00       	nop
}
    2136:	df 91       	pop	r29
    2138:	cf 91       	pop	r28
    213a:	08 95       	ret

0000213c <LCD_displayStringRowColumn>:

/*
 * Function responsible for Display more One character on LCD & select place on screen
 */
void LCD_displayStringRowColumn(uint8 row, uint8 col, const sint8 *Str) {
    213c:	cf 93       	push	r28
    213e:	df 93       	push	r29
    2140:	00 d0       	rcall	.+0      	; 0x2142 <LCD_displayStringRowColumn+0x6>
    2142:	00 d0       	rcall	.+0      	; 0x2144 <LCD_displayStringRowColumn+0x8>
    2144:	cd b7       	in	r28, 0x3d	; 61
    2146:	de b7       	in	r29, 0x3e	; 62
    2148:	89 83       	std	Y+1, r24	; 0x01
    214a:	6a 83       	std	Y+2, r22	; 0x02
    214c:	5c 83       	std	Y+4, r21	; 0x04
    214e:	4b 83       	std	Y+3, r20	; 0x03
	/* call LCD_goToRowColumn function to select cursor location */
	LCD_goToRowColumn(row, col);
    2150:	6a 81       	ldd	r22, Y+2	; 0x02
    2152:	89 81       	ldd	r24, Y+1	; 0x01
    2154:	0e 94 b8 10 	call	0x2170	; 0x2170 <LCD_goToRowColumn>
	/* call LCD_displayString function to display string on LCD */
	LCD_displayString(Str);
    2158:	8b 81       	ldd	r24, Y+3	; 0x03
    215a:	9c 81       	ldd	r25, Y+4	; 0x04
    215c:	0e 94 9f 0f 	call	0x1f3e	; 0x1f3e <LCD_displayString>
	return;
    2160:	00 00       	nop
}
    2162:	0f 90       	pop	r0
    2164:	0f 90       	pop	r0
    2166:	0f 90       	pop	r0
    2168:	0f 90       	pop	r0
    216a:	df 91       	pop	r29
    216c:	cf 91       	pop	r28
    216e:	08 95       	ret

00002170 <LCD_goToRowColumn>:

/*
 * Function responsible to select place on screen
 */
void LCD_goToRowColumn(uint8 row, uint8 col) {
    2170:	cf 93       	push	r28
    2172:	df 93       	push	r29
    2174:	00 d0       	rcall	.+0      	; 0x2176 <LCD_goToRowColumn+0x6>
    2176:	0f 92       	push	r0
    2178:	cd b7       	in	r28, 0x3d	; 61
    217a:	de b7       	in	r29, 0x3e	; 62
    217c:	8a 83       	std	Y+2, r24	; 0x02
    217e:	6b 83       	std	Y+3, r22	; 0x03
	uint8 address;
	switch (row) {
    2180:	8a 81       	ldd	r24, Y+2	; 0x02
    2182:	88 2f       	mov	r24, r24
    2184:	90 e0       	ldi	r25, 0x00	; 0
    2186:	83 30       	cpi	r24, 0x03	; 3
    2188:	91 05       	cpc	r25, r1
    218a:	d1 f0       	breq	.+52     	; 0x21c0 <LCD_goToRowColumn+0x50>
    218c:	84 30       	cpi	r24, 0x04	; 4
    218e:	91 05       	cpc	r25, r1
    2190:	dc f4       	brge	.+54     	; 0x21c8 <LCD_goToRowColumn+0x58>
    2192:	82 30       	cpi	r24, 0x02	; 2
    2194:	91 05       	cpc	r25, r1
    2196:	81 f0       	breq	.+32     	; 0x21b8 <LCD_goToRowColumn+0x48>
    2198:	83 30       	cpi	r24, 0x03	; 3
    219a:	91 05       	cpc	r25, r1
    219c:	ac f4       	brge	.+42     	; 0x21c8 <LCD_goToRowColumn+0x58>
    219e:	00 97       	sbiw	r24, 0x00	; 0
    21a0:	19 f0       	breq	.+6      	; 0x21a8 <LCD_goToRowColumn+0x38>
    21a2:	01 97       	sbiw	r24, 0x01	; 1
    21a4:	29 f0       	breq	.+10     	; 0x21b0 <LCD_goToRowColumn+0x40>
    21a6:	10 c0       	rjmp	.+32     	; 0x21c8 <LCD_goToRowColumn+0x58>
	case 0:
		address =0x80 | col; /* first address in first line in LCD = 0x00 */
    21a8:	8b 81       	ldd	r24, Y+3	; 0x03
    21aa:	80 68       	ori	r24, 0x80	; 128
    21ac:	89 83       	std	Y+1, r24	; 0x01
		break;
    21ae:	0c c0       	rjmp	.+24     	; 0x21c8 <LCD_goToRowColumn+0x58>
	case 1:
		address = col | 0xC0; /* first address in second line in LCD = 0x40 */
    21b0:	8b 81       	ldd	r24, Y+3	; 0x03
    21b2:	80 6c       	ori	r24, 0xC0	; 192
    21b4:	89 83       	std	Y+1, r24	; 0x01
		break;
    21b6:	08 c0       	rjmp	.+16     	; 0x21c8 <LCD_goToRowColumn+0x58>
	case 2:
		address = col | 0x10; /* first address in 3th line in LCD = 0x10 */
    21b8:	8b 81       	ldd	r24, Y+3	; 0x03
    21ba:	80 61       	ori	r24, 0x10	; 16
    21bc:	89 83       	std	Y+1, r24	; 0x01
		break;
    21be:	04 c0       	rjmp	.+8      	; 0x21c8 <LCD_goToRowColumn+0x58>
	case 3:
		address = col | 0x50; /* first address in 4th line in LCD = 0x50 */
    21c0:	8b 81       	ldd	r24, Y+3	; 0x03
    21c2:	80 65       	ori	r24, 0x50	; 80
    21c4:	89 83       	std	Y+1, r24	; 0x01
		break;
    21c6:	00 00       	nop
	}
	/* to write to a specific address in the LCD
	 * we need to apply the corresponding command 0x80+Address */
	LCD_sendCommand(address | CURSOR_HOME_LOCATION);
    21c8:	89 81       	ldd	r24, Y+1	; 0x01
    21ca:	80 68       	ori	r24, 0x80	; 128
    21cc:	0e 94 5b 05 	call	0xab6	; 0xab6 <LCD_sendCommand>
}
    21d0:	00 00       	nop
    21d2:	0f 90       	pop	r0
    21d4:	0f 90       	pop	r0
    21d6:	0f 90       	pop	r0
    21d8:	df 91       	pop	r29
    21da:	cf 91       	pop	r28
    21dc:	08 95       	ret

000021de <LCD_intgerToString>:

/*
 * Function that transform number to string and display to LCD
 */
void LCD_intgerToString(int data) {
    21de:	cf 93       	push	r28
    21e0:	df 93       	push	r29
    21e2:	cd b7       	in	r28, 0x3d	; 61
    21e4:	de b7       	in	r29, 0x3e	; 62
    21e6:	62 97       	sbiw	r28, 0x12	; 18
    21e8:	0f b6       	in	r0, 0x3f	; 63
    21ea:	f8 94       	cli
    21ec:	de bf       	out	0x3e, r29	; 62
    21ee:	0f be       	out	0x3f, r0	; 63
    21f0:	cd bf       	out	0x3d, r28	; 61
    21f2:	9a 8b       	std	Y+18, r25	; 0x12
    21f4:	89 8b       	std	Y+17, r24	; 0x11
	char buff[16]; /* String to hold the ASCII result */
	itoa(data, buff, 10); /* 10 for decimal */
    21f6:	89 89       	ldd	r24, Y+17	; 0x11
    21f8:	9a 89       	ldd	r25, Y+18	; 0x12
    21fa:	4a e0       	ldi	r20, 0x0A	; 10
    21fc:	50 e0       	ldi	r21, 0x00	; 0
    21fe:	9e 01       	movw	r18, r28
    2200:	2f 5f       	subi	r18, 0xFF	; 255
    2202:	3f 4f       	sbci	r19, 0xFF	; 255
    2204:	b9 01       	movw	r22, r18
    2206:	0e 94 58 15 	call	0x2ab0	; 0x2ab0 <itoa>
	LCD_displayString(buff);
    220a:	ce 01       	movw	r24, r28
    220c:	01 96       	adiw	r24, 0x01	; 1
    220e:	0e 94 9f 0f 	call	0x1f3e	; 0x1f3e <LCD_displayString>
}
    2212:	00 00       	nop
    2214:	62 96       	adiw	r28, 0x12	; 18
    2216:	0f b6       	in	r0, 0x3f	; 63
    2218:	f8 94       	cli
    221a:	de bf       	out	0x3e, r29	; 62
    221c:	0f be       	out	0x3f, r0	; 63
    221e:	cd bf       	out	0x3d, r28	; 61
    2220:	df 91       	pop	r29
    2222:	cf 91       	pop	r28
    2224:	08 95       	ret

00002226 <LCD_creatCustomChar>:

/*
* Function that Create Custom Character in CGRAM
*/
void LCD_creatCustomChar(unsigned char loc, unsigned char *msg) {
    2226:	cf 93       	push	r28
    2228:	df 93       	push	r29
    222a:	00 d0       	rcall	.+0      	; 0x222c <LCD_creatCustomChar+0x6>
    222c:	00 d0       	rcall	.+0      	; 0x222e <LCD_creatCustomChar+0x8>
    222e:	cd b7       	in	r28, 0x3d	; 61
    2230:	de b7       	in	r29, 0x3e	; 62
    2232:	8a 83       	std	Y+2, r24	; 0x02
    2234:	7c 83       	std	Y+4, r23	; 0x04
    2236:	6b 83       	std	Y+3, r22	; 0x03
	unsigned char i;
	if (loc < 8) {
    2238:	8a 81       	ldd	r24, Y+2	; 0x02
    223a:	88 30       	cpi	r24, 0x08	; 8
    223c:	d0 f4       	brcc	.+52     	; 0x2272 <LCD_creatCustomChar+0x4c>
		LCD_sendCommand(0x40 | (loc * 8)); /* Command 0x40 and onwards forces
    223e:	8a 81       	ldd	r24, Y+2	; 0x02
    2240:	88 0f       	add	r24, r24
    2242:	88 0f       	add	r24, r24
    2244:	88 0f       	add	r24, r24
    2246:	80 64       	ori	r24, 0x40	; 64
    2248:	0e 94 5b 05 	call	0xab6	; 0xab6 <LCD_sendCommand>
		 the device to point CGRAM address */
		for (i = 0; i < 8; i++) { /* Write 8 byte for generation of 1 character */
    224c:	19 82       	std	Y+1, r1	; 0x01
    224e:	0e c0       	rjmp	.+28     	; 0x226c <LCD_creatCustomChar+0x46>
			LCD_displayCustomChar(msg[i]);
    2250:	89 81       	ldd	r24, Y+1	; 0x01
    2252:	88 2f       	mov	r24, r24
    2254:	90 e0       	ldi	r25, 0x00	; 0
    2256:	2b 81       	ldd	r18, Y+3	; 0x03
    2258:	3c 81       	ldd	r19, Y+4	; 0x04
    225a:	82 0f       	add	r24, r18
    225c:	93 1f       	adc	r25, r19
    225e:	fc 01       	movw	r30, r24
    2260:	80 81       	ld	r24, Z
    2262:	0e 94 41 11 	call	0x2282	; 0x2282 <LCD_displayCustomChar>
		for (i = 0; i < 8; i++) { /* Write 8 byte for generation of 1 character */
    2266:	89 81       	ldd	r24, Y+1	; 0x01
    2268:	8f 5f       	subi	r24, 0xFF	; 255
    226a:	89 83       	std	Y+1, r24	; 0x01
    226c:	89 81       	ldd	r24, Y+1	; 0x01
    226e:	88 30       	cpi	r24, 0x08	; 8
    2270:	78 f3       	brcs	.-34     	; 0x2250 <LCD_creatCustomChar+0x2a>
		}
	}
}
    2272:	00 00       	nop
    2274:	0f 90       	pop	r0
    2276:	0f 90       	pop	r0
    2278:	0f 90       	pop	r0
    227a:	0f 90       	pop	r0
    227c:	df 91       	pop	r29
    227e:	cf 91       	pop	r28
    2280:	08 95       	ret

00002282 <LCD_displayCustomChar>:

/*
* Function that Display Custom Character in CGRAM
*/
void LCD_displayCustomChar(unsigned char char_data) /* LCD data write function */
{
    2282:	cf 93       	push	r28
    2284:	df 93       	push	r29
    2286:	cd b7       	in	r28, 0x3d	; 61
    2288:	de b7       	in	r29, 0x3e	; 62
    228a:	cb 56       	subi	r28, 0x6B	; 107
    228c:	d1 09       	sbc	r29, r1
    228e:	0f b6       	in	r0, 0x3f	; 63
    2290:	f8 94       	cli
    2292:	de bf       	out	0x3e, r29	; 62
    2294:	0f be       	out	0x3f, r0	; 63
    2296:	cd bf       	out	0x3d, r28	; 61
    2298:	8f a7       	std	Y+47, r24	; 0x2f
	DATA_OUT = char_data;
    229a:	85 e3       	ldi	r24, 0x35	; 53
    229c:	90 e0       	ldi	r25, 0x00	; 0
    229e:	2f a5       	ldd	r18, Y+47	; 0x2f
    22a0:	dc 01       	movw	r26, r24
    22a2:	2c 93       	st	X, r18
	RS = 1;/* RS=1 Data reg. */
    22a4:	82 e3       	ldi	r24, 0x32	; 50
    22a6:	90 e0       	ldi	r25, 0x00	; 0
    22a8:	fc 01       	movw	r30, r24
    22aa:	20 81       	ld	r18, Z
    22ac:	20 61       	ori	r18, 0x10	; 16
    22ae:	dc 01       	movw	r26, r24
    22b0:	2c 93       	st	X, r18
	RW = 0; /* RW=0 write operation */
    22b2:	82 e3       	ldi	r24, 0x32	; 50
    22b4:	90 e0       	ldi	r25, 0x00	; 0
    22b6:	fc 01       	movw	r30, r24
    22b8:	20 81       	ld	r18, Z
    22ba:	2f 7d       	andi	r18, 0xDF	; 223
    22bc:	dc 01       	movw	r26, r24
    22be:	2c 93       	st	X, r18
	E = 1; /* Enable Pulse */
    22c0:	82 e3       	ldi	r24, 0x32	; 50
    22c2:	90 e0       	ldi	r25, 0x00	; 0
    22c4:	fc 01       	movw	r30, r24
    22c6:	20 81       	ld	r18, Z
    22c8:	20 64       	ori	r18, 0x40	; 64
    22ca:	dc 01       	movw	r26, r24
    22cc:	2c 93       	st	X, r18
    22ce:	80 e0       	ldi	r24, 0x00	; 0
    22d0:	90 e0       	ldi	r25, 0x00	; 0
    22d2:	a0 e8       	ldi	r26, 0x80	; 128
    22d4:	bf e3       	ldi	r27, 0x3F	; 63
    22d6:	8f 87       	std	Y+15, r24	; 0x0f
    22d8:	98 8b       	std	Y+16, r25	; 0x10
    22da:	a9 8b       	std	Y+17, r26	; 0x11
    22dc:	ba 8b       	std	Y+18, r27	; 0x12
	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint8_t __ticks;
	double __tmp2 ;
	__tmp = ((F_CPU) / 3e6) * __us;
    22de:	2b ea       	ldi	r18, 0xAB	; 171
    22e0:	3a ea       	ldi	r19, 0xAA	; 170
    22e2:	4a ea       	ldi	r20, 0xAA	; 170
    22e4:	5e e3       	ldi	r21, 0x3E	; 62
    22e6:	6f 85       	ldd	r22, Y+15	; 0x0f
    22e8:	78 89       	ldd	r23, Y+16	; 0x10
    22ea:	89 89       	ldd	r24, Y+17	; 0x11
    22ec:	9a 89       	ldd	r25, Y+18	; 0x12
    22ee:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <__mulsf3>
    22f2:	68 af       	std	Y+56, r22	; 0x38
    22f4:	79 af       	std	Y+57, r23	; 0x39
    22f6:	8a af       	std	Y+58, r24	; 0x3a
    22f8:	9b af       	std	Y+59, r25	; 0x3b
    22fa:	88 ad       	ldd	r24, Y+56	; 0x38
    22fc:	99 ad       	ldd	r25, Y+57	; 0x39
    22fe:	aa ad       	ldd	r26, Y+58	; 0x3a
    2300:	bb ad       	ldd	r27, Y+59	; 0x3b
    2302:	8b 8b       	std	Y+19, r24	; 0x13
    2304:	9c 8b       	std	Y+20, r25	; 0x14
    2306:	ad 8b       	std	Y+21, r26	; 0x15
    2308:	be 8b       	std	Y+22, r27	; 0x16
	__tmp2 = ((F_CPU) / 4e6) * __us;
    230a:	20 e0       	ldi	r18, 0x00	; 0
    230c:	30 e0       	ldi	r19, 0x00	; 0
    230e:	40 e8       	ldi	r20, 0x80	; 128
    2310:	5e e3       	ldi	r21, 0x3E	; 62
    2312:	6f 85       	ldd	r22, Y+15	; 0x0f
    2314:	78 89       	ldd	r23, Y+16	; 0x10
    2316:	89 89       	ldd	r24, Y+17	; 0x11
    2318:	9a 89       	ldd	r25, Y+18	; 0x12
    231a:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <__mulsf3>
    231e:	6c af       	std	Y+60, r22	; 0x3c
    2320:	7d af       	std	Y+61, r23	; 0x3d
    2322:	8e af       	std	Y+62, r24	; 0x3e
    2324:	9f af       	std	Y+63, r25	; 0x3f
    2326:	8c ad       	ldd	r24, Y+60	; 0x3c
    2328:	9d ad       	ldd	r25, Y+61	; 0x3d
    232a:	ae ad       	ldd	r26, Y+62	; 0x3e
    232c:	bf ad       	ldd	r27, Y+63	; 0x3f
    232e:	8f 8b       	std	Y+23, r24	; 0x17
    2330:	98 8f       	std	Y+24, r25	; 0x18
    2332:	a9 8f       	std	Y+25, r26	; 0x19
    2334:	ba 8f       	std	Y+26, r27	; 0x1a
	if (__tmp < 1.0)
    2336:	20 e0       	ldi	r18, 0x00	; 0
    2338:	30 e0       	ldi	r19, 0x00	; 0
    233a:	40 e8       	ldi	r20, 0x80	; 128
    233c:	5f e3       	ldi	r21, 0x3F	; 63
    233e:	6b 89       	ldd	r22, Y+19	; 0x13
    2340:	7c 89       	ldd	r23, Y+20	; 0x14
    2342:	8d 89       	ldd	r24, Y+21	; 0x15
    2344:	9e 89       	ldd	r25, Y+22	; 0x16
    2346:	0e 94 cb 13 	call	0x2796	; 0x2796 <__cmpsf2>
    234a:	88 23       	and	r24, r24
    234c:	1c f4       	brge	.+6      	; 0x2354 <LCD_displayCustomChar+0xd2>
		__ticks = 1;
    234e:	81 e0       	ldi	r24, 0x01	; 1
    2350:	8b 8f       	std	Y+27, r24	; 0x1b
    2352:	f8 c0       	rjmp	.+496    	; 0x2544 <LCD_displayCustomChar+0x2c2>
	else if (__tmp2 > 65535)
    2354:	20 e0       	ldi	r18, 0x00	; 0
    2356:	3f ef       	ldi	r19, 0xFF	; 255
    2358:	4f e7       	ldi	r20, 0x7F	; 127
    235a:	57 e4       	ldi	r21, 0x47	; 71
    235c:	6f 89       	ldd	r22, Y+23	; 0x17
    235e:	78 8d       	ldd	r23, Y+24	; 0x18
    2360:	89 8d       	ldd	r24, Y+25	; 0x19
    2362:	9a 8d       	ldd	r25, Y+26	; 0x1a
    2364:	0e 94 e6 14 	call	0x29cc	; 0x29cc <__gesf2>
    2368:	18 16       	cp	r1, r24
    236a:	0c f0       	brlt	.+2      	; 0x236e <LCD_displayCustomChar+0xec>
    236c:	b1 c0       	rjmp	.+354    	; 0x24d0 <LCD_displayCustomChar+0x24e>
	{
		_delay_ms(__us / 1000.0);
    236e:	20 e0       	ldi	r18, 0x00	; 0
    2370:	30 e0       	ldi	r19, 0x00	; 0
    2372:	4a e7       	ldi	r20, 0x7A	; 122
    2374:	54 e4       	ldi	r21, 0x44	; 68
    2376:	6f 85       	ldd	r22, Y+15	; 0x0f
    2378:	78 89       	ldd	r23, Y+16	; 0x10
    237a:	89 89       	ldd	r24, Y+17	; 0x11
    237c:	9a 89       	ldd	r25, Y+18	; 0x12
    237e:	0e 94 d0 13 	call	0x27a0	; 0x27a0 <__divsf3>
    2382:	24 96       	adiw	r28, 0x04	; 4
    2384:	6c af       	std	Y+60, r22	; 0x3c
    2386:	7d af       	std	Y+61, r23	; 0x3d
    2388:	8e af       	std	Y+62, r24	; 0x3e
    238a:	9f af       	std	Y+63, r25	; 0x3f
    238c:	24 97       	sbiw	r28, 0x04	; 4
    238e:	24 96       	adiw	r28, 0x04	; 4
    2390:	8c ad       	ldd	r24, Y+60	; 0x3c
    2392:	9d ad       	ldd	r25, Y+61	; 0x3d
    2394:	ae ad       	ldd	r26, Y+62	; 0x3e
    2396:	bf ad       	ldd	r27, Y+63	; 0x3f
    2398:	24 97       	sbiw	r28, 0x04	; 4
    239a:	8c 8f       	std	Y+28, r24	; 0x1c
    239c:	9d 8f       	std	Y+29, r25	; 0x1d
    239e:	ae 8f       	std	Y+30, r26	; 0x1e
    23a0:	bf 8f       	std	Y+31, r27	; 0x1f
	__tmp = ((F_CPU) / 4e3) * __ms;
    23a2:	20 e0       	ldi	r18, 0x00	; 0
    23a4:	30 e0       	ldi	r19, 0x00	; 0
    23a6:	4a e7       	ldi	r20, 0x7A	; 122
    23a8:	53 e4       	ldi	r21, 0x43	; 67
    23aa:	6c 8d       	ldd	r22, Y+28	; 0x1c
    23ac:	7d 8d       	ldd	r23, Y+29	; 0x1d
    23ae:	8e 8d       	ldd	r24, Y+30	; 0x1e
    23b0:	9f 8d       	ldd	r25, Y+31	; 0x1f
    23b2:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <__mulsf3>
    23b6:	28 96       	adiw	r28, 0x08	; 8
    23b8:	6c af       	std	Y+60, r22	; 0x3c
    23ba:	7d af       	std	Y+61, r23	; 0x3d
    23bc:	8e af       	std	Y+62, r24	; 0x3e
    23be:	9f af       	std	Y+63, r25	; 0x3f
    23c0:	28 97       	sbiw	r28, 0x08	; 8
    23c2:	28 96       	adiw	r28, 0x08	; 8
    23c4:	8c ad       	ldd	r24, Y+60	; 0x3c
    23c6:	9d ad       	ldd	r25, Y+61	; 0x3d
    23c8:	ae ad       	ldd	r26, Y+62	; 0x3e
    23ca:	bf ad       	ldd	r27, Y+63	; 0x3f
    23cc:	28 97       	sbiw	r28, 0x08	; 8
    23ce:	88 a3       	std	Y+32, r24	; 0x20
    23d0:	99 a3       	std	Y+33, r25	; 0x21
    23d2:	aa a3       	std	Y+34, r26	; 0x22
    23d4:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    23d6:	20 e0       	ldi	r18, 0x00	; 0
    23d8:	30 e0       	ldi	r19, 0x00	; 0
    23da:	40 e8       	ldi	r20, 0x80	; 128
    23dc:	5f e3       	ldi	r21, 0x3F	; 63
    23de:	68 a1       	ldd	r22, Y+32	; 0x20
    23e0:	79 a1       	ldd	r23, Y+33	; 0x21
    23e2:	8a a1       	ldd	r24, Y+34	; 0x22
    23e4:	9b a1       	ldd	r25, Y+35	; 0x23
    23e6:	0e 94 cb 13 	call	0x2796	; 0x2796 <__cmpsf2>
    23ea:	88 23       	and	r24, r24
    23ec:	2c f4       	brge	.+10     	; 0x23f8 <LCD_displayCustomChar+0x176>
		__ticks = 1;
    23ee:	81 e0       	ldi	r24, 0x01	; 1
    23f0:	90 e0       	ldi	r25, 0x00	; 0
    23f2:	9d a3       	std	Y+37, r25	; 0x25
    23f4:	8c a3       	std	Y+36, r24	; 0x24
    23f6:	61 c0       	rjmp	.+194    	; 0x24ba <LCD_displayCustomChar+0x238>
	else if (__tmp > 65535)
    23f8:	20 e0       	ldi	r18, 0x00	; 0
    23fa:	3f ef       	ldi	r19, 0xFF	; 255
    23fc:	4f e7       	ldi	r20, 0x7F	; 127
    23fe:	57 e4       	ldi	r21, 0x47	; 71
    2400:	68 a1       	ldd	r22, Y+32	; 0x20
    2402:	79 a1       	ldd	r23, Y+33	; 0x21
    2404:	8a a1       	ldd	r24, Y+34	; 0x22
    2406:	9b a1       	ldd	r25, Y+35	; 0x23
    2408:	0e 94 e6 14 	call	0x29cc	; 0x29cc <__gesf2>
    240c:	18 16       	cp	r1, r24
    240e:	0c f0       	brlt	.+2      	; 0x2412 <LCD_displayCustomChar+0x190>
    2410:	42 c0       	rjmp	.+132    	; 0x2496 <LCD_displayCustomChar+0x214>
		__ticks = (uint16_t) (__ms * 10.0);
    2412:	20 e0       	ldi	r18, 0x00	; 0
    2414:	30 e0       	ldi	r19, 0x00	; 0
    2416:	40 e2       	ldi	r20, 0x20	; 32
    2418:	51 e4       	ldi	r21, 0x41	; 65
    241a:	6c 8d       	ldd	r22, Y+28	; 0x1c
    241c:	7d 8d       	ldd	r23, Y+29	; 0x1d
    241e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2420:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2422:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <__mulsf3>
    2426:	2c 96       	adiw	r28, 0x0c	; 12
    2428:	6c af       	std	Y+60, r22	; 0x3c
    242a:	7d af       	std	Y+61, r23	; 0x3d
    242c:	8e af       	std	Y+62, r24	; 0x3e
    242e:	9f af       	std	Y+63, r25	; 0x3f
    2430:	2c 97       	sbiw	r28, 0x0c	; 12
    2432:	2c 96       	adiw	r28, 0x0c	; 12
    2434:	8c ad       	ldd	r24, Y+60	; 0x3c
    2436:	9d ad       	ldd	r25, Y+61	; 0x3d
    2438:	ae ad       	ldd	r26, Y+62	; 0x3e
    243a:	bf ad       	ldd	r27, Y+63	; 0x3f
    243c:	2c 97       	sbiw	r28, 0x0c	; 12
    243e:	8c ab       	std	Y+52, r24	; 0x34
    2440:	9d ab       	std	Y+53, r25	; 0x35
    2442:	ae ab       	std	Y+54, r26	; 0x36
    2444:	bf ab       	std	Y+55, r27	; 0x37
    2446:	6c a9       	ldd	r22, Y+52	; 0x34
    2448:	7d a9       	ldd	r23, Y+53	; 0x35
    244a:	8e a9       	ldd	r24, Y+54	; 0x36
    244c:	9f a9       	ldd	r25, Y+55	; 0x37
    244e:	0e 94 42 14 	call	0x2884	; 0x2884 <__fixunssfsi>
    2452:	60 96       	adiw	r28, 0x10	; 16
    2454:	6c af       	std	Y+60, r22	; 0x3c
    2456:	7d af       	std	Y+61, r23	; 0x3d
    2458:	8e af       	std	Y+62, r24	; 0x3e
    245a:	9f af       	std	Y+63, r25	; 0x3f
    245c:	60 97       	sbiw	r28, 0x10	; 16
    245e:	2e 96       	adiw	r28, 0x0e	; 14
    2460:	ae ad       	ldd	r26, Y+62	; 0x3e
    2462:	bf ad       	ldd	r27, Y+63	; 0x3f
    2464:	2e 97       	sbiw	r28, 0x0e	; 14
    2466:	bd a3       	std	Y+37, r27	; 0x25
    2468:	ac a3       	std	Y+36, r26	; 0x24
		while(__ticks)
    246a:	10 c0       	rjmp	.+32     	; 0x248c <LCD_displayCustomChar+0x20a>
    246c:	89 e1       	ldi	r24, 0x19	; 25
    246e:	90 e0       	ldi	r25, 0x00	; 0
    2470:	9f a3       	std	Y+39, r25	; 0x27
    2472:	8e a3       	std	Y+38, r24	; 0x26
	__asm__ volatile (
    2474:	8e a1       	ldd	r24, Y+38	; 0x26
    2476:	9f a1       	ldd	r25, Y+39	; 0x27
    2478:	01 97       	sbiw	r24, 0x01	; 1
    247a:	f1 f7       	brne	.-4      	; 0x2478 <LCD_displayCustomChar+0x1f6>
    247c:	9f a3       	std	Y+39, r25	; 0x27
    247e:	8e a3       	std	Y+38, r24	; 0x26
}
    2480:	00 00       	nop
			__ticks --;
    2482:	8c a1       	ldd	r24, Y+36	; 0x24
    2484:	9d a1       	ldd	r25, Y+37	; 0x25
    2486:	01 97       	sbiw	r24, 0x01	; 1
    2488:	9d a3       	std	Y+37, r25	; 0x25
    248a:	8c a3       	std	Y+36, r24	; 0x24
		while(__ticks)
    248c:	8c a1       	ldd	r24, Y+36	; 0x24
    248e:	9d a1       	ldd	r25, Y+37	; 0x25
    2490:	89 2b       	or	r24, r25
    2492:	61 f7       	brne	.-40     	; 0x246c <LCD_displayCustomChar+0x1ea>
		return;
    2494:	57 c0       	rjmp	.+174    	; 0x2544 <LCD_displayCustomChar+0x2c2>
		__ticks = (uint16_t)__tmp;
    2496:	68 a1       	ldd	r22, Y+32	; 0x20
    2498:	79 a1       	ldd	r23, Y+33	; 0x21
    249a:	8a a1       	ldd	r24, Y+34	; 0x22
    249c:	9b a1       	ldd	r25, Y+35	; 0x23
    249e:	0e 94 42 14 	call	0x2884	; 0x2884 <__fixunssfsi>
    24a2:	64 96       	adiw	r28, 0x14	; 20
    24a4:	6c af       	std	Y+60, r22	; 0x3c
    24a6:	7d af       	std	Y+61, r23	; 0x3d
    24a8:	8e af       	std	Y+62, r24	; 0x3e
    24aa:	9f af       	std	Y+63, r25	; 0x3f
    24ac:	64 97       	sbiw	r28, 0x14	; 20
    24ae:	62 96       	adiw	r28, 0x12	; 18
    24b0:	ee ad       	ldd	r30, Y+62	; 0x3e
    24b2:	ff ad       	ldd	r31, Y+63	; 0x3f
    24b4:	62 97       	sbiw	r28, 0x12	; 18
    24b6:	fd a3       	std	Y+37, r31	; 0x25
    24b8:	ec a3       	std	Y+36, r30	; 0x24
    24ba:	8c a1       	ldd	r24, Y+36	; 0x24
    24bc:	9d a1       	ldd	r25, Y+37	; 0x25
    24be:	99 a7       	std	Y+41, r25	; 0x29
    24c0:	88 a7       	std	Y+40, r24	; 0x28
	__asm__ volatile (
    24c2:	88 a5       	ldd	r24, Y+40	; 0x28
    24c4:	99 a5       	ldd	r25, Y+41	; 0x29
    24c6:	01 97       	sbiw	r24, 0x01	; 1
    24c8:	f1 f7       	brne	.-4      	; 0x24c6 <LCD_displayCustomChar+0x244>
    24ca:	99 a7       	std	Y+41, r25	; 0x29
    24cc:	88 a7       	std	Y+40, r24	; 0x28
}
    24ce:	3a c0       	rjmp	.+116    	; 0x2544 <LCD_displayCustomChar+0x2c2>
	}
	else if (__tmp > 255)
    24d0:	20 e0       	ldi	r18, 0x00	; 0
    24d2:	30 e0       	ldi	r19, 0x00	; 0
    24d4:	4f e7       	ldi	r20, 0x7F	; 127
    24d6:	53 e4       	ldi	r21, 0x43	; 67
    24d8:	6b 89       	ldd	r22, Y+19	; 0x13
    24da:	7c 89       	ldd	r23, Y+20	; 0x14
    24dc:	8d 89       	ldd	r24, Y+21	; 0x15
    24de:	9e 89       	ldd	r25, Y+22	; 0x16
    24e0:	0e 94 e6 14 	call	0x29cc	; 0x29cc <__gesf2>
    24e4:	18 16       	cp	r1, r24
    24e6:	f4 f4       	brge	.+60     	; 0x2524 <LCD_displayCustomChar+0x2a2>
	{
		uint16_t __ticks=(uint16_t)__tmp2;
    24e8:	6f 89       	ldd	r22, Y+23	; 0x17
    24ea:	78 8d       	ldd	r23, Y+24	; 0x18
    24ec:	89 8d       	ldd	r24, Y+25	; 0x19
    24ee:	9a 8d       	ldd	r25, Y+26	; 0x1a
    24f0:	0e 94 42 14 	call	0x2884	; 0x2884 <__fixunssfsi>
    24f4:	68 96       	adiw	r28, 0x18	; 24
    24f6:	6c af       	std	Y+60, r22	; 0x3c
    24f8:	7d af       	std	Y+61, r23	; 0x3d
    24fa:	8e af       	std	Y+62, r24	; 0x3e
    24fc:	9f af       	std	Y+63, r25	; 0x3f
    24fe:	68 97       	sbiw	r28, 0x18	; 24
    2500:	66 96       	adiw	r28, 0x16	; 22
    2502:	8e ad       	ldd	r24, Y+62	; 0x3e
    2504:	9f ad       	ldd	r25, Y+63	; 0x3f
    2506:	66 97       	sbiw	r28, 0x16	; 22
    2508:	9b a7       	std	Y+43, r25	; 0x2b
    250a:	8a a7       	std	Y+42, r24	; 0x2a
    250c:	8a a5       	ldd	r24, Y+42	; 0x2a
    250e:	9b a5       	ldd	r25, Y+43	; 0x2b
    2510:	9d a7       	std	Y+45, r25	; 0x2d
    2512:	8c a7       	std	Y+44, r24	; 0x2c
	__asm__ volatile (
    2514:	8c a5       	ldd	r24, Y+44	; 0x2c
    2516:	9d a5       	ldd	r25, Y+45	; 0x2d
    2518:	01 97       	sbiw	r24, 0x01	; 1
    251a:	f1 f7       	brne	.-4      	; 0x2518 <LCD_displayCustomChar+0x296>
    251c:	9d a7       	std	Y+45, r25	; 0x2d
    251e:	8c a7       	std	Y+44, r24	; 0x2c
}
    2520:	00 00       	nop
		_delay_loop_2(__ticks);
		return;
    2522:	17 c0       	rjmp	.+46     	; 0x2552 <LCD_displayCustomChar+0x2d0>
	}
	else
		__ticks = (uint8_t)__tmp;
    2524:	6b 89       	ldd	r22, Y+19	; 0x13
    2526:	7c 89       	ldd	r23, Y+20	; 0x14
    2528:	8d 89       	ldd	r24, Y+21	; 0x15
    252a:	9e 89       	ldd	r25, Y+22	; 0x16
    252c:	0e 94 42 14 	call	0x2884	; 0x2884 <__fixunssfsi>
    2530:	6c 96       	adiw	r28, 0x1c	; 28
    2532:	6c af       	std	Y+60, r22	; 0x3c
    2534:	7d af       	std	Y+61, r23	; 0x3d
    2536:	8e af       	std	Y+62, r24	; 0x3e
    2538:	9f af       	std	Y+63, r25	; 0x3f
    253a:	6c 97       	sbiw	r28, 0x1c	; 28
    253c:	69 96       	adiw	r28, 0x19	; 25
    253e:	9f ad       	ldd	r25, Y+63	; 0x3f
    2540:	69 97       	sbiw	r28, 0x19	; 25
    2542:	9b 8f       	std	Y+27, r25	; 0x1b
    2544:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2546:	8e a7       	std	Y+46, r24	; 0x2e
	__asm__ volatile (
    2548:	8e a5       	ldd	r24, Y+46	; 0x2e
    254a:	8a 95       	dec	r24
    254c:	f1 f7       	brne	.-4      	; 0x254a <LCD_displayCustomChar+0x2c8>
    254e:	8e a7       	std	Y+46, r24	; 0x2e
}
    2550:	00 00       	nop
	_delay_us(1);
	E = 0;
    2552:	82 e3       	ldi	r24, 0x32	; 50
    2554:	90 e0       	ldi	r25, 0x00	; 0
    2556:	dc 01       	movw	r26, r24
    2558:	2c 91       	ld	r18, X
    255a:	2f 7b       	andi	r18, 0xBF	; 191
    255c:	fc 01       	movw	r30, r24
    255e:	20 83       	st	Z, r18
    2560:	80 e0       	ldi	r24, 0x00	; 0
    2562:	90 e0       	ldi	r25, 0x00	; 0
    2564:	a0 e0       	ldi	r26, 0x00	; 0
    2566:	b0 e4       	ldi	r27, 0x40	; 64
    2568:	89 83       	std	Y+1, r24	; 0x01
    256a:	9a 83       	std	Y+2, r25	; 0x02
    256c:	ab 83       	std	Y+3, r26	; 0x03
    256e:	bc 83       	std	Y+4, r27	; 0x04
	__tmp = ((F_CPU) / 4e3) * __ms;
    2570:	20 e0       	ldi	r18, 0x00	; 0
    2572:	30 e0       	ldi	r19, 0x00	; 0
    2574:	4a e7       	ldi	r20, 0x7A	; 122
    2576:	53 e4       	ldi	r21, 0x43	; 67
    2578:	69 81       	ldd	r22, Y+1	; 0x01
    257a:	7a 81       	ldd	r23, Y+2	; 0x02
    257c:	8b 81       	ldd	r24, Y+3	; 0x03
    257e:	9c 81       	ldd	r25, Y+4	; 0x04
    2580:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <__mulsf3>
    2584:	a0 96       	adiw	r28, 0x20	; 32
    2586:	6c af       	std	Y+60, r22	; 0x3c
    2588:	7d af       	std	Y+61, r23	; 0x3d
    258a:	8e af       	std	Y+62, r24	; 0x3e
    258c:	9f af       	std	Y+63, r25	; 0x3f
    258e:	a0 97       	sbiw	r28, 0x20	; 32
    2590:	a0 96       	adiw	r28, 0x20	; 32
    2592:	8c ad       	ldd	r24, Y+60	; 0x3c
    2594:	9d ad       	ldd	r25, Y+61	; 0x3d
    2596:	ae ad       	ldd	r26, Y+62	; 0x3e
    2598:	bf ad       	ldd	r27, Y+63	; 0x3f
    259a:	a0 97       	sbiw	r28, 0x20	; 32
    259c:	8d 83       	std	Y+5, r24	; 0x05
    259e:	9e 83       	std	Y+6, r25	; 0x06
    25a0:	af 83       	std	Y+7, r26	; 0x07
    25a2:	b8 87       	std	Y+8, r27	; 0x08
	if (__tmp < 1.0)
    25a4:	20 e0       	ldi	r18, 0x00	; 0
    25a6:	30 e0       	ldi	r19, 0x00	; 0
    25a8:	40 e8       	ldi	r20, 0x80	; 128
    25aa:	5f e3       	ldi	r21, 0x3F	; 63
    25ac:	6d 81       	ldd	r22, Y+5	; 0x05
    25ae:	7e 81       	ldd	r23, Y+6	; 0x06
    25b0:	8f 81       	ldd	r24, Y+7	; 0x07
    25b2:	98 85       	ldd	r25, Y+8	; 0x08
    25b4:	0e 94 cb 13 	call	0x2796	; 0x2796 <__cmpsf2>
    25b8:	88 23       	and	r24, r24
    25ba:	2c f4       	brge	.+10     	; 0x25c6 <LCD_displayCustomChar+0x344>
		__ticks = 1;
    25bc:	81 e0       	ldi	r24, 0x01	; 1
    25be:	90 e0       	ldi	r25, 0x00	; 0
    25c0:	9a 87       	std	Y+10, r25	; 0x0a
    25c2:	89 87       	std	Y+9, r24	; 0x09
    25c4:	61 c0       	rjmp	.+194    	; 0x2688 <LCD_displayCustomChar+0x406>
	else if (__tmp > 65535)
    25c6:	20 e0       	ldi	r18, 0x00	; 0
    25c8:	3f ef       	ldi	r19, 0xFF	; 255
    25ca:	4f e7       	ldi	r20, 0x7F	; 127
    25cc:	57 e4       	ldi	r21, 0x47	; 71
    25ce:	6d 81       	ldd	r22, Y+5	; 0x05
    25d0:	7e 81       	ldd	r23, Y+6	; 0x06
    25d2:	8f 81       	ldd	r24, Y+7	; 0x07
    25d4:	98 85       	ldd	r25, Y+8	; 0x08
    25d6:	0e 94 e6 14 	call	0x29cc	; 0x29cc <__gesf2>
    25da:	18 16       	cp	r1, r24
    25dc:	0c f0       	brlt	.+2      	; 0x25e0 <LCD_displayCustomChar+0x35e>
    25de:	42 c0       	rjmp	.+132    	; 0x2664 <LCD_displayCustomChar+0x3e2>
		__ticks = (uint16_t) (__ms * 10.0);
    25e0:	20 e0       	ldi	r18, 0x00	; 0
    25e2:	30 e0       	ldi	r19, 0x00	; 0
    25e4:	40 e2       	ldi	r20, 0x20	; 32
    25e6:	51 e4       	ldi	r21, 0x41	; 65
    25e8:	69 81       	ldd	r22, Y+1	; 0x01
    25ea:	7a 81       	ldd	r23, Y+2	; 0x02
    25ec:	8b 81       	ldd	r24, Y+3	; 0x03
    25ee:	9c 81       	ldd	r25, Y+4	; 0x04
    25f0:	0e 94 eb 14 	call	0x29d6	; 0x29d6 <__mulsf3>
    25f4:	a4 96       	adiw	r28, 0x24	; 36
    25f6:	6c af       	std	Y+60, r22	; 0x3c
    25f8:	7d af       	std	Y+61, r23	; 0x3d
    25fa:	8e af       	std	Y+62, r24	; 0x3e
    25fc:	9f af       	std	Y+63, r25	; 0x3f
    25fe:	a4 97       	sbiw	r28, 0x24	; 36
    2600:	a4 96       	adiw	r28, 0x24	; 36
    2602:	8c ad       	ldd	r24, Y+60	; 0x3c
    2604:	9d ad       	ldd	r25, Y+61	; 0x3d
    2606:	ae ad       	ldd	r26, Y+62	; 0x3e
    2608:	bf ad       	ldd	r27, Y+63	; 0x3f
    260a:	a4 97       	sbiw	r28, 0x24	; 36
    260c:	88 ab       	std	Y+48, r24	; 0x30
    260e:	99 ab       	std	Y+49, r25	; 0x31
    2610:	aa ab       	std	Y+50, r26	; 0x32
    2612:	bb ab       	std	Y+51, r27	; 0x33
    2614:	68 a9       	ldd	r22, Y+48	; 0x30
    2616:	79 a9       	ldd	r23, Y+49	; 0x31
    2618:	8a a9       	ldd	r24, Y+50	; 0x32
    261a:	9b a9       	ldd	r25, Y+51	; 0x33
    261c:	0e 94 42 14 	call	0x2884	; 0x2884 <__fixunssfsi>
    2620:	a8 96       	adiw	r28, 0x28	; 40
    2622:	6c af       	std	Y+60, r22	; 0x3c
    2624:	7d af       	std	Y+61, r23	; 0x3d
    2626:	8e af       	std	Y+62, r24	; 0x3e
    2628:	9f af       	std	Y+63, r25	; 0x3f
    262a:	a8 97       	sbiw	r28, 0x28	; 40
    262c:	a6 96       	adiw	r28, 0x26	; 38
    262e:	ae ad       	ldd	r26, Y+62	; 0x3e
    2630:	bf ad       	ldd	r27, Y+63	; 0x3f
    2632:	a6 97       	sbiw	r28, 0x26	; 38
    2634:	ba 87       	std	Y+10, r27	; 0x0a
    2636:	a9 87       	std	Y+9, r26	; 0x09
		while(__ticks)
    2638:	10 c0       	rjmp	.+32     	; 0x265a <LCD_displayCustomChar+0x3d8>
    263a:	89 e1       	ldi	r24, 0x19	; 25
    263c:	90 e0       	ldi	r25, 0x00	; 0
    263e:	9c 87       	std	Y+12, r25	; 0x0c
    2640:	8b 87       	std	Y+11, r24	; 0x0b
	__asm__ volatile (
    2642:	8b 85       	ldd	r24, Y+11	; 0x0b
    2644:	9c 85       	ldd	r25, Y+12	; 0x0c
    2646:	01 97       	sbiw	r24, 0x01	; 1
    2648:	f1 f7       	brne	.-4      	; 0x2646 <LCD_displayCustomChar+0x3c4>
    264a:	9c 87       	std	Y+12, r25	; 0x0c
    264c:	8b 87       	std	Y+11, r24	; 0x0b
}
    264e:	00 00       	nop
			__ticks --;
    2650:	89 85       	ldd	r24, Y+9	; 0x09
    2652:	9a 85       	ldd	r25, Y+10	; 0x0a
    2654:	01 97       	sbiw	r24, 0x01	; 1
    2656:	9a 87       	std	Y+10, r25	; 0x0a
    2658:	89 87       	std	Y+9, r24	; 0x09
		while(__ticks)
    265a:	89 85       	ldd	r24, Y+9	; 0x09
    265c:	9a 85       	ldd	r25, Y+10	; 0x0a
    265e:	89 2b       	or	r24, r25
    2660:	61 f7       	brne	.-40     	; 0x263a <LCD_displayCustomChar+0x3b8>
		return;
    2662:	1d c0       	rjmp	.+58     	; 0x269e <LCD_displayCustomChar+0x41c>
		__ticks = (uint16_t)__tmp;
    2664:	6d 81       	ldd	r22, Y+5	; 0x05
    2666:	7e 81       	ldd	r23, Y+6	; 0x06
    2668:	8f 81       	ldd	r24, Y+7	; 0x07
    266a:	98 85       	ldd	r25, Y+8	; 0x08
    266c:	0e 94 42 14 	call	0x2884	; 0x2884 <__fixunssfsi>
    2670:	ac 96       	adiw	r28, 0x2c	; 44
    2672:	6c af       	std	Y+60, r22	; 0x3c
    2674:	7d af       	std	Y+61, r23	; 0x3d
    2676:	8e af       	std	Y+62, r24	; 0x3e
    2678:	9f af       	std	Y+63, r25	; 0x3f
    267a:	ac 97       	sbiw	r28, 0x2c	; 44
    267c:	aa 96       	adiw	r28, 0x2a	; 42
    267e:	ee ad       	ldd	r30, Y+62	; 0x3e
    2680:	ff ad       	ldd	r31, Y+63	; 0x3f
    2682:	aa 97       	sbiw	r28, 0x2a	; 42
    2684:	fa 87       	std	Y+10, r31	; 0x0a
    2686:	e9 87       	std	Y+9, r30	; 0x09
    2688:	89 85       	ldd	r24, Y+9	; 0x09
    268a:	9a 85       	ldd	r25, Y+10	; 0x0a
    268c:	9e 87       	std	Y+14, r25	; 0x0e
    268e:	8d 87       	std	Y+13, r24	; 0x0d
	__asm__ volatile (
    2690:	8d 85       	ldd	r24, Y+13	; 0x0d
    2692:	9e 85       	ldd	r25, Y+14	; 0x0e
    2694:	01 97       	sbiw	r24, 0x01	; 1
    2696:	f1 f7       	brne	.-4      	; 0x2694 <LCD_displayCustomChar+0x412>
    2698:	9e 87       	std	Y+14, r25	; 0x0e
    269a:	8d 87       	std	Y+13, r24	; 0x0d
}
    269c:	00 00       	nop
	_delay_ms(2); /* Data write delay */
}
    269e:	00 00       	nop
    26a0:	c5 59       	subi	r28, 0x95	; 149
    26a2:	df 4f       	sbci	r29, 0xFF	; 255
    26a4:	0f b6       	in	r0, 0x3f	; 63
    26a6:	f8 94       	cli
    26a8:	de bf       	out	0x3e, r29	; 62
    26aa:	0f be       	out	0x3f, r0	; 63
    26ac:	cd bf       	out	0x3d, r28	; 61
    26ae:	df 91       	pop	r29
    26b0:	cf 91       	pop	r28
    26b2:	08 95       	ret

000026b4 <__mulsi3>:
    26b4:	db 01       	movw	r26, r22
    26b6:	8f 93       	push	r24
    26b8:	9f 93       	push	r25
    26ba:	0e 94 8f 13 	call	0x271e	; 0x271e <__muluhisi3>
    26be:	bf 91       	pop	r27
    26c0:	af 91       	pop	r26
    26c2:	a2 9f       	mul	r26, r18
    26c4:	80 0d       	add	r24, r0
    26c6:	91 1d       	adc	r25, r1
    26c8:	a3 9f       	mul	r26, r19
    26ca:	90 0d       	add	r25, r0
    26cc:	b2 9f       	mul	r27, r18
    26ce:	90 0d       	add	r25, r0
    26d0:	11 24       	eor	r1, r1
    26d2:	08 95       	ret

000026d4 <__divmodsi4>:
    26d4:	05 2e       	mov	r0, r21
    26d6:	97 fb       	bst	r25, 7
    26d8:	1e f4       	brtc	.+6      	; 0x26e0 <__divmodsi4+0xc>
    26da:	00 94       	com	r0
    26dc:	0e 94 81 13 	call	0x2702	; 0x2702 <__negsi2>
    26e0:	57 fd       	sbrc	r21, 7
    26e2:	07 d0       	rcall	.+14     	; 0x26f2 <__divmodsi4_neg2>
    26e4:	0e 94 9a 13 	call	0x2734	; 0x2734 <__udivmodsi4>
    26e8:	07 fc       	sbrc	r0, 7
    26ea:	03 d0       	rcall	.+6      	; 0x26f2 <__divmodsi4_neg2>
    26ec:	4e f4       	brtc	.+18     	; 0x2700 <__divmodsi4_exit>
    26ee:	0c 94 81 13 	jmp	0x2702	; 0x2702 <__negsi2>

000026f2 <__divmodsi4_neg2>:
    26f2:	50 95       	com	r21
    26f4:	40 95       	com	r20
    26f6:	30 95       	com	r19
    26f8:	21 95       	neg	r18
    26fa:	3f 4f       	sbci	r19, 0xFF	; 255
    26fc:	4f 4f       	sbci	r20, 0xFF	; 255
    26fe:	5f 4f       	sbci	r21, 0xFF	; 255

00002700 <__divmodsi4_exit>:
    2700:	08 95       	ret

00002702 <__negsi2>:
    2702:	90 95       	com	r25
    2704:	80 95       	com	r24
    2706:	70 95       	com	r23
    2708:	61 95       	neg	r22
    270a:	7f 4f       	sbci	r23, 0xFF	; 255
    270c:	8f 4f       	sbci	r24, 0xFF	; 255
    270e:	9f 4f       	sbci	r25, 0xFF	; 255
    2710:	08 95       	ret

00002712 <__tablejump2__>:
    2712:	ee 0f       	add	r30, r30
    2714:	ff 1f       	adc	r31, r31
    2716:	05 90       	lpm	r0, Z+
    2718:	f4 91       	lpm	r31, Z
    271a:	e0 2d       	mov	r30, r0
    271c:	09 94       	ijmp

0000271e <__muluhisi3>:
    271e:	0e 94 bc 13 	call	0x2778	; 0x2778 <__umulhisi3>
    2722:	a5 9f       	mul	r26, r21
    2724:	90 0d       	add	r25, r0
    2726:	b4 9f       	mul	r27, r20
    2728:	90 0d       	add	r25, r0
    272a:	a4 9f       	mul	r26, r20
    272c:	80 0d       	add	r24, r0
    272e:	91 1d       	adc	r25, r1
    2730:	11 24       	eor	r1, r1
    2732:	08 95       	ret

00002734 <__udivmodsi4>:
    2734:	a1 e2       	ldi	r26, 0x21	; 33
    2736:	1a 2e       	mov	r1, r26
    2738:	aa 1b       	sub	r26, r26
    273a:	bb 1b       	sub	r27, r27
    273c:	fd 01       	movw	r30, r26
    273e:	0d c0       	rjmp	.+26     	; 0x275a <__udivmodsi4_ep>

00002740 <__udivmodsi4_loop>:
    2740:	aa 1f       	adc	r26, r26
    2742:	bb 1f       	adc	r27, r27
    2744:	ee 1f       	adc	r30, r30
    2746:	ff 1f       	adc	r31, r31
    2748:	a2 17       	cp	r26, r18
    274a:	b3 07       	cpc	r27, r19
    274c:	e4 07       	cpc	r30, r20
    274e:	f5 07       	cpc	r31, r21
    2750:	20 f0       	brcs	.+8      	; 0x275a <__udivmodsi4_ep>
    2752:	a2 1b       	sub	r26, r18
    2754:	b3 0b       	sbc	r27, r19
    2756:	e4 0b       	sbc	r30, r20
    2758:	f5 0b       	sbc	r31, r21

0000275a <__udivmodsi4_ep>:
    275a:	66 1f       	adc	r22, r22
    275c:	77 1f       	adc	r23, r23
    275e:	88 1f       	adc	r24, r24
    2760:	99 1f       	adc	r25, r25
    2762:	1a 94       	dec	r1
    2764:	69 f7       	brne	.-38     	; 0x2740 <__udivmodsi4_loop>
    2766:	60 95       	com	r22
    2768:	70 95       	com	r23
    276a:	80 95       	com	r24
    276c:	90 95       	com	r25
    276e:	9b 01       	movw	r18, r22
    2770:	ac 01       	movw	r20, r24
    2772:	bd 01       	movw	r22, r26
    2774:	cf 01       	movw	r24, r30
    2776:	08 95       	ret

00002778 <__umulhisi3>:
    2778:	a2 9f       	mul	r26, r18
    277a:	b0 01       	movw	r22, r0
    277c:	b3 9f       	mul	r27, r19
    277e:	c0 01       	movw	r24, r0
    2780:	a3 9f       	mul	r26, r19
    2782:	70 0d       	add	r23, r0
    2784:	81 1d       	adc	r24, r1
    2786:	11 24       	eor	r1, r1
    2788:	91 1d       	adc	r25, r1
    278a:	b2 9f       	mul	r27, r18
    278c:	70 0d       	add	r23, r0
    278e:	81 1d       	adc	r24, r1
    2790:	11 24       	eor	r1, r1
    2792:	91 1d       	adc	r25, r1
    2794:	08 95       	ret

00002796 <__cmpsf2>:
    2796:	0e 94 71 14 	call	0x28e2	; 0x28e2 <__fp_cmp>
    279a:	08 f4       	brcc	.+2      	; 0x279e <__cmpsf2+0x8>
    279c:	81 e0       	ldi	r24, 0x01	; 1
    279e:	08 95       	ret

000027a0 <__divsf3>:
    27a0:	0e 94 e4 13 	call	0x27c8	; 0x27c8 <__divsf3x>
    27a4:	0c 94 ac 14 	jmp	0x2958	; 0x2958 <__fp_round>
    27a8:	0e 94 a5 14 	call	0x294a	; 0x294a <__fp_pscB>
    27ac:	58 f0       	brcs	.+22     	; 0x27c4 <__divsf3+0x24>
    27ae:	0e 94 9e 14 	call	0x293c	; 0x293c <__fp_pscA>
    27b2:	40 f0       	brcs	.+16     	; 0x27c4 <__divsf3+0x24>
    27b4:	29 f4       	brne	.+10     	; 0x27c0 <__divsf3+0x20>
    27b6:	5f 3f       	cpi	r21, 0xFF	; 255
    27b8:	29 f0       	breq	.+10     	; 0x27c4 <__divsf3+0x24>
    27ba:	0c 94 95 14 	jmp	0x292a	; 0x292a <__fp_inf>
    27be:	51 11       	cpse	r21, r1
    27c0:	0c 94 e0 14 	jmp	0x29c0	; 0x29c0 <__fp_szero>
    27c4:	0c 94 9b 14 	jmp	0x2936	; 0x2936 <__fp_nan>

000027c8 <__divsf3x>:
    27c8:	0e 94 bd 14 	call	0x297a	; 0x297a <__fp_split3>
    27cc:	68 f3       	brcs	.-38     	; 0x27a8 <__divsf3+0x8>

000027ce <__divsf3_pse>:
    27ce:	99 23       	and	r25, r25
    27d0:	b1 f3       	breq	.-20     	; 0x27be <__divsf3+0x1e>
    27d2:	55 23       	and	r21, r21
    27d4:	91 f3       	breq	.-28     	; 0x27ba <__divsf3+0x1a>
    27d6:	95 1b       	sub	r25, r21
    27d8:	55 0b       	sbc	r21, r21
    27da:	bb 27       	eor	r27, r27
    27dc:	aa 27       	eor	r26, r26
    27de:	62 17       	cp	r22, r18
    27e0:	73 07       	cpc	r23, r19
    27e2:	84 07       	cpc	r24, r20
    27e4:	38 f0       	brcs	.+14     	; 0x27f4 <__divsf3_pse+0x26>
    27e6:	9f 5f       	subi	r25, 0xFF	; 255
    27e8:	5f 4f       	sbci	r21, 0xFF	; 255
    27ea:	22 0f       	add	r18, r18
    27ec:	33 1f       	adc	r19, r19
    27ee:	44 1f       	adc	r20, r20
    27f0:	aa 1f       	adc	r26, r26
    27f2:	a9 f3       	breq	.-22     	; 0x27de <__divsf3_pse+0x10>
    27f4:	35 d0       	rcall	.+106    	; 0x2860 <__divsf3_pse+0x92>
    27f6:	0e 2e       	mov	r0, r30
    27f8:	3a f0       	brmi	.+14     	; 0x2808 <__divsf3_pse+0x3a>
    27fa:	e0 e8       	ldi	r30, 0x80	; 128
    27fc:	32 d0       	rcall	.+100    	; 0x2862 <__divsf3_pse+0x94>
    27fe:	91 50       	subi	r25, 0x01	; 1
    2800:	50 40       	sbci	r21, 0x00	; 0
    2802:	e6 95       	lsr	r30
    2804:	00 1c       	adc	r0, r0
    2806:	ca f7       	brpl	.-14     	; 0x27fa <__divsf3_pse+0x2c>
    2808:	2b d0       	rcall	.+86     	; 0x2860 <__divsf3_pse+0x92>
    280a:	fe 2f       	mov	r31, r30
    280c:	29 d0       	rcall	.+82     	; 0x2860 <__divsf3_pse+0x92>
    280e:	66 0f       	add	r22, r22
    2810:	77 1f       	adc	r23, r23
    2812:	88 1f       	adc	r24, r24
    2814:	bb 1f       	adc	r27, r27
    2816:	26 17       	cp	r18, r22
    2818:	37 07       	cpc	r19, r23
    281a:	48 07       	cpc	r20, r24
    281c:	ab 07       	cpc	r26, r27
    281e:	b0 e8       	ldi	r27, 0x80	; 128
    2820:	09 f0       	breq	.+2      	; 0x2824 <__divsf3_pse+0x56>
    2822:	bb 0b       	sbc	r27, r27
    2824:	80 2d       	mov	r24, r0
    2826:	bf 01       	movw	r22, r30
    2828:	ff 27       	eor	r31, r31
    282a:	93 58       	subi	r25, 0x83	; 131
    282c:	5f 4f       	sbci	r21, 0xFF	; 255
    282e:	3a f0       	brmi	.+14     	; 0x283e <__divsf3_pse+0x70>
    2830:	9e 3f       	cpi	r25, 0xFE	; 254
    2832:	51 05       	cpc	r21, r1
    2834:	78 f0       	brcs	.+30     	; 0x2854 <__divsf3_pse+0x86>
    2836:	0c 94 95 14 	jmp	0x292a	; 0x292a <__fp_inf>
    283a:	0c 94 e0 14 	jmp	0x29c0	; 0x29c0 <__fp_szero>
    283e:	5f 3f       	cpi	r21, 0xFF	; 255
    2840:	e4 f3       	brlt	.-8      	; 0x283a <__divsf3_pse+0x6c>
    2842:	98 3e       	cpi	r25, 0xE8	; 232
    2844:	d4 f3       	brlt	.-12     	; 0x283a <__divsf3_pse+0x6c>
    2846:	86 95       	lsr	r24
    2848:	77 95       	ror	r23
    284a:	67 95       	ror	r22
    284c:	b7 95       	ror	r27
    284e:	f7 95       	ror	r31
    2850:	9f 5f       	subi	r25, 0xFF	; 255
    2852:	c9 f7       	brne	.-14     	; 0x2846 <__divsf3_pse+0x78>
    2854:	88 0f       	add	r24, r24
    2856:	91 1d       	adc	r25, r1
    2858:	96 95       	lsr	r25
    285a:	87 95       	ror	r24
    285c:	97 f9       	bld	r25, 7
    285e:	08 95       	ret
    2860:	e1 e0       	ldi	r30, 0x01	; 1
    2862:	66 0f       	add	r22, r22
    2864:	77 1f       	adc	r23, r23
    2866:	88 1f       	adc	r24, r24
    2868:	bb 1f       	adc	r27, r27
    286a:	62 17       	cp	r22, r18
    286c:	73 07       	cpc	r23, r19
    286e:	84 07       	cpc	r24, r20
    2870:	ba 07       	cpc	r27, r26
    2872:	20 f0       	brcs	.+8      	; 0x287c <__divsf3_pse+0xae>
    2874:	62 1b       	sub	r22, r18
    2876:	73 0b       	sbc	r23, r19
    2878:	84 0b       	sbc	r24, r20
    287a:	ba 0b       	sbc	r27, r26
    287c:	ee 1f       	adc	r30, r30
    287e:	88 f7       	brcc	.-30     	; 0x2862 <__divsf3_pse+0x94>
    2880:	e0 95       	com	r30
    2882:	08 95       	ret

00002884 <__fixunssfsi>:
    2884:	0e 94 c5 14 	call	0x298a	; 0x298a <__fp_splitA>
    2888:	88 f0       	brcs	.+34     	; 0x28ac <__fixunssfsi+0x28>
    288a:	9f 57       	subi	r25, 0x7F	; 127
    288c:	98 f0       	brcs	.+38     	; 0x28b4 <__fixunssfsi+0x30>
    288e:	b9 2f       	mov	r27, r25
    2890:	99 27       	eor	r25, r25
    2892:	b7 51       	subi	r27, 0x17	; 23
    2894:	b0 f0       	brcs	.+44     	; 0x28c2 <__fixunssfsi+0x3e>
    2896:	e1 f0       	breq	.+56     	; 0x28d0 <__fixunssfsi+0x4c>
    2898:	66 0f       	add	r22, r22
    289a:	77 1f       	adc	r23, r23
    289c:	88 1f       	adc	r24, r24
    289e:	99 1f       	adc	r25, r25
    28a0:	1a f0       	brmi	.+6      	; 0x28a8 <__fixunssfsi+0x24>
    28a2:	ba 95       	dec	r27
    28a4:	c9 f7       	brne	.-14     	; 0x2898 <__fixunssfsi+0x14>
    28a6:	14 c0       	rjmp	.+40     	; 0x28d0 <__fixunssfsi+0x4c>
    28a8:	b1 30       	cpi	r27, 0x01	; 1
    28aa:	91 f0       	breq	.+36     	; 0x28d0 <__fixunssfsi+0x4c>
    28ac:	0e 94 df 14 	call	0x29be	; 0x29be <__fp_zero>
    28b0:	b1 e0       	ldi	r27, 0x01	; 1
    28b2:	08 95       	ret
    28b4:	0c 94 df 14 	jmp	0x29be	; 0x29be <__fp_zero>
    28b8:	67 2f       	mov	r22, r23
    28ba:	78 2f       	mov	r23, r24
    28bc:	88 27       	eor	r24, r24
    28be:	b8 5f       	subi	r27, 0xF8	; 248
    28c0:	39 f0       	breq	.+14     	; 0x28d0 <__fixunssfsi+0x4c>
    28c2:	b9 3f       	cpi	r27, 0xF9	; 249
    28c4:	cc f3       	brlt	.-14     	; 0x28b8 <__fixunssfsi+0x34>
    28c6:	86 95       	lsr	r24
    28c8:	77 95       	ror	r23
    28ca:	67 95       	ror	r22
    28cc:	b3 95       	inc	r27
    28ce:	d9 f7       	brne	.-10     	; 0x28c6 <__fixunssfsi+0x42>
    28d0:	3e f4       	brtc	.+14     	; 0x28e0 <__fixunssfsi+0x5c>
    28d2:	90 95       	com	r25
    28d4:	80 95       	com	r24
    28d6:	70 95       	com	r23
    28d8:	61 95       	neg	r22
    28da:	7f 4f       	sbci	r23, 0xFF	; 255
    28dc:	8f 4f       	sbci	r24, 0xFF	; 255
    28de:	9f 4f       	sbci	r25, 0xFF	; 255
    28e0:	08 95       	ret

000028e2 <__fp_cmp>:
    28e2:	99 0f       	add	r25, r25
    28e4:	00 08       	sbc	r0, r0
    28e6:	55 0f       	add	r21, r21
    28e8:	aa 0b       	sbc	r26, r26
    28ea:	e0 e8       	ldi	r30, 0x80	; 128
    28ec:	fe ef       	ldi	r31, 0xFE	; 254
    28ee:	16 16       	cp	r1, r22
    28f0:	17 06       	cpc	r1, r23
    28f2:	e8 07       	cpc	r30, r24
    28f4:	f9 07       	cpc	r31, r25
    28f6:	c0 f0       	brcs	.+48     	; 0x2928 <__fp_cmp+0x46>
    28f8:	12 16       	cp	r1, r18
    28fa:	13 06       	cpc	r1, r19
    28fc:	e4 07       	cpc	r30, r20
    28fe:	f5 07       	cpc	r31, r21
    2900:	98 f0       	brcs	.+38     	; 0x2928 <__fp_cmp+0x46>
    2902:	62 1b       	sub	r22, r18
    2904:	73 0b       	sbc	r23, r19
    2906:	84 0b       	sbc	r24, r20
    2908:	95 0b       	sbc	r25, r21
    290a:	39 f4       	brne	.+14     	; 0x291a <__fp_cmp+0x38>
    290c:	0a 26       	eor	r0, r26
    290e:	61 f0       	breq	.+24     	; 0x2928 <__fp_cmp+0x46>
    2910:	23 2b       	or	r18, r19
    2912:	24 2b       	or	r18, r20
    2914:	25 2b       	or	r18, r21
    2916:	21 f4       	brne	.+8      	; 0x2920 <__fp_cmp+0x3e>
    2918:	08 95       	ret
    291a:	0a 26       	eor	r0, r26
    291c:	09 f4       	brne	.+2      	; 0x2920 <__fp_cmp+0x3e>
    291e:	a1 40       	sbci	r26, 0x01	; 1
    2920:	a6 95       	lsr	r26
    2922:	8f ef       	ldi	r24, 0xFF	; 255
    2924:	81 1d       	adc	r24, r1
    2926:	81 1d       	adc	r24, r1
    2928:	08 95       	ret

0000292a <__fp_inf>:
    292a:	97 f9       	bld	r25, 7
    292c:	9f 67       	ori	r25, 0x7F	; 127
    292e:	80 e8       	ldi	r24, 0x80	; 128
    2930:	70 e0       	ldi	r23, 0x00	; 0
    2932:	60 e0       	ldi	r22, 0x00	; 0
    2934:	08 95       	ret

00002936 <__fp_nan>:
    2936:	9f ef       	ldi	r25, 0xFF	; 255
    2938:	80 ec       	ldi	r24, 0xC0	; 192
    293a:	08 95       	ret

0000293c <__fp_pscA>:
    293c:	00 24       	eor	r0, r0
    293e:	0a 94       	dec	r0
    2940:	16 16       	cp	r1, r22
    2942:	17 06       	cpc	r1, r23
    2944:	18 06       	cpc	r1, r24
    2946:	09 06       	cpc	r0, r25
    2948:	08 95       	ret

0000294a <__fp_pscB>:
    294a:	00 24       	eor	r0, r0
    294c:	0a 94       	dec	r0
    294e:	12 16       	cp	r1, r18
    2950:	13 06       	cpc	r1, r19
    2952:	14 06       	cpc	r1, r20
    2954:	05 06       	cpc	r0, r21
    2956:	08 95       	ret

00002958 <__fp_round>:
    2958:	09 2e       	mov	r0, r25
    295a:	03 94       	inc	r0
    295c:	00 0c       	add	r0, r0
    295e:	11 f4       	brne	.+4      	; 0x2964 <__fp_round+0xc>
    2960:	88 23       	and	r24, r24
    2962:	52 f0       	brmi	.+20     	; 0x2978 <__fp_round+0x20>
    2964:	bb 0f       	add	r27, r27
    2966:	40 f4       	brcc	.+16     	; 0x2978 <__fp_round+0x20>
    2968:	bf 2b       	or	r27, r31
    296a:	11 f4       	brne	.+4      	; 0x2970 <__fp_round+0x18>
    296c:	60 ff       	sbrs	r22, 0
    296e:	04 c0       	rjmp	.+8      	; 0x2978 <__fp_round+0x20>
    2970:	6f 5f       	subi	r22, 0xFF	; 255
    2972:	7f 4f       	sbci	r23, 0xFF	; 255
    2974:	8f 4f       	sbci	r24, 0xFF	; 255
    2976:	9f 4f       	sbci	r25, 0xFF	; 255
    2978:	08 95       	ret

0000297a <__fp_split3>:
    297a:	57 fd       	sbrc	r21, 7
    297c:	90 58       	subi	r25, 0x80	; 128
    297e:	44 0f       	add	r20, r20
    2980:	55 1f       	adc	r21, r21
    2982:	59 f0       	breq	.+22     	; 0x299a <__fp_splitA+0x10>
    2984:	5f 3f       	cpi	r21, 0xFF	; 255
    2986:	71 f0       	breq	.+28     	; 0x29a4 <__fp_splitA+0x1a>
    2988:	47 95       	ror	r20

0000298a <__fp_splitA>:
    298a:	88 0f       	add	r24, r24
    298c:	97 fb       	bst	r25, 7
    298e:	99 1f       	adc	r25, r25
    2990:	61 f0       	breq	.+24     	; 0x29aa <__fp_splitA+0x20>
    2992:	9f 3f       	cpi	r25, 0xFF	; 255
    2994:	79 f0       	breq	.+30     	; 0x29b4 <__fp_splitA+0x2a>
    2996:	87 95       	ror	r24
    2998:	08 95       	ret
    299a:	12 16       	cp	r1, r18
    299c:	13 06       	cpc	r1, r19
    299e:	14 06       	cpc	r1, r20
    29a0:	55 1f       	adc	r21, r21
    29a2:	f2 cf       	rjmp	.-28     	; 0x2988 <__fp_split3+0xe>
    29a4:	46 95       	lsr	r20
    29a6:	f1 df       	rcall	.-30     	; 0x298a <__fp_splitA>
    29a8:	08 c0       	rjmp	.+16     	; 0x29ba <__fp_splitA+0x30>
    29aa:	16 16       	cp	r1, r22
    29ac:	17 06       	cpc	r1, r23
    29ae:	18 06       	cpc	r1, r24
    29b0:	99 1f       	adc	r25, r25
    29b2:	f1 cf       	rjmp	.-30     	; 0x2996 <__fp_splitA+0xc>
    29b4:	86 95       	lsr	r24
    29b6:	71 05       	cpc	r23, r1
    29b8:	61 05       	cpc	r22, r1
    29ba:	08 94       	sec
    29bc:	08 95       	ret

000029be <__fp_zero>:
    29be:	e8 94       	clt

000029c0 <__fp_szero>:
    29c0:	bb 27       	eor	r27, r27
    29c2:	66 27       	eor	r22, r22
    29c4:	77 27       	eor	r23, r23
    29c6:	cb 01       	movw	r24, r22
    29c8:	97 f9       	bld	r25, 7
    29ca:	08 95       	ret

000029cc <__gesf2>:
    29cc:	0e 94 71 14 	call	0x28e2	; 0x28e2 <__fp_cmp>
    29d0:	08 f4       	brcc	.+2      	; 0x29d4 <__gesf2+0x8>
    29d2:	8f ef       	ldi	r24, 0xFF	; 255
    29d4:	08 95       	ret

000029d6 <__mulsf3>:
    29d6:	0e 94 fe 14 	call	0x29fc	; 0x29fc <__mulsf3x>
    29da:	0c 94 ac 14 	jmp	0x2958	; 0x2958 <__fp_round>
    29de:	0e 94 9e 14 	call	0x293c	; 0x293c <__fp_pscA>
    29e2:	38 f0       	brcs	.+14     	; 0x29f2 <__mulsf3+0x1c>
    29e4:	0e 94 a5 14 	call	0x294a	; 0x294a <__fp_pscB>
    29e8:	20 f0       	brcs	.+8      	; 0x29f2 <__mulsf3+0x1c>
    29ea:	95 23       	and	r25, r21
    29ec:	11 f0       	breq	.+4      	; 0x29f2 <__mulsf3+0x1c>
    29ee:	0c 94 95 14 	jmp	0x292a	; 0x292a <__fp_inf>
    29f2:	0c 94 9b 14 	jmp	0x2936	; 0x2936 <__fp_nan>
    29f6:	11 24       	eor	r1, r1
    29f8:	0c 94 e0 14 	jmp	0x29c0	; 0x29c0 <__fp_szero>

000029fc <__mulsf3x>:
    29fc:	0e 94 bd 14 	call	0x297a	; 0x297a <__fp_split3>
    2a00:	70 f3       	brcs	.-36     	; 0x29de <__mulsf3+0x8>

00002a02 <__mulsf3_pse>:
    2a02:	95 9f       	mul	r25, r21
    2a04:	c1 f3       	breq	.-16     	; 0x29f6 <__mulsf3+0x20>
    2a06:	95 0f       	add	r25, r21
    2a08:	50 e0       	ldi	r21, 0x00	; 0
    2a0a:	55 1f       	adc	r21, r21
    2a0c:	62 9f       	mul	r22, r18
    2a0e:	f0 01       	movw	r30, r0
    2a10:	72 9f       	mul	r23, r18
    2a12:	bb 27       	eor	r27, r27
    2a14:	f0 0d       	add	r31, r0
    2a16:	b1 1d       	adc	r27, r1
    2a18:	63 9f       	mul	r22, r19
    2a1a:	aa 27       	eor	r26, r26
    2a1c:	f0 0d       	add	r31, r0
    2a1e:	b1 1d       	adc	r27, r1
    2a20:	aa 1f       	adc	r26, r26
    2a22:	64 9f       	mul	r22, r20
    2a24:	66 27       	eor	r22, r22
    2a26:	b0 0d       	add	r27, r0
    2a28:	a1 1d       	adc	r26, r1
    2a2a:	66 1f       	adc	r22, r22
    2a2c:	82 9f       	mul	r24, r18
    2a2e:	22 27       	eor	r18, r18
    2a30:	b0 0d       	add	r27, r0
    2a32:	a1 1d       	adc	r26, r1
    2a34:	62 1f       	adc	r22, r18
    2a36:	73 9f       	mul	r23, r19
    2a38:	b0 0d       	add	r27, r0
    2a3a:	a1 1d       	adc	r26, r1
    2a3c:	62 1f       	adc	r22, r18
    2a3e:	83 9f       	mul	r24, r19
    2a40:	a0 0d       	add	r26, r0
    2a42:	61 1d       	adc	r22, r1
    2a44:	22 1f       	adc	r18, r18
    2a46:	74 9f       	mul	r23, r20
    2a48:	33 27       	eor	r19, r19
    2a4a:	a0 0d       	add	r26, r0
    2a4c:	61 1d       	adc	r22, r1
    2a4e:	23 1f       	adc	r18, r19
    2a50:	84 9f       	mul	r24, r20
    2a52:	60 0d       	add	r22, r0
    2a54:	21 1d       	adc	r18, r1
    2a56:	82 2f       	mov	r24, r18
    2a58:	76 2f       	mov	r23, r22
    2a5a:	6a 2f       	mov	r22, r26
    2a5c:	11 24       	eor	r1, r1
    2a5e:	9f 57       	subi	r25, 0x7F	; 127
    2a60:	50 40       	sbci	r21, 0x00	; 0
    2a62:	9a f0       	brmi	.+38     	; 0x2a8a <__mulsf3_pse+0x88>
    2a64:	f1 f0       	breq	.+60     	; 0x2aa2 <__mulsf3_pse+0xa0>
    2a66:	88 23       	and	r24, r24
    2a68:	4a f0       	brmi	.+18     	; 0x2a7c <__mulsf3_pse+0x7a>
    2a6a:	ee 0f       	add	r30, r30
    2a6c:	ff 1f       	adc	r31, r31
    2a6e:	bb 1f       	adc	r27, r27
    2a70:	66 1f       	adc	r22, r22
    2a72:	77 1f       	adc	r23, r23
    2a74:	88 1f       	adc	r24, r24
    2a76:	91 50       	subi	r25, 0x01	; 1
    2a78:	50 40       	sbci	r21, 0x00	; 0
    2a7a:	a9 f7       	brne	.-22     	; 0x2a66 <__mulsf3_pse+0x64>
    2a7c:	9e 3f       	cpi	r25, 0xFE	; 254
    2a7e:	51 05       	cpc	r21, r1
    2a80:	80 f0       	brcs	.+32     	; 0x2aa2 <__mulsf3_pse+0xa0>
    2a82:	0c 94 95 14 	jmp	0x292a	; 0x292a <__fp_inf>
    2a86:	0c 94 e0 14 	jmp	0x29c0	; 0x29c0 <__fp_szero>
    2a8a:	5f 3f       	cpi	r21, 0xFF	; 255
    2a8c:	e4 f3       	brlt	.-8      	; 0x2a86 <__mulsf3_pse+0x84>
    2a8e:	98 3e       	cpi	r25, 0xE8	; 232
    2a90:	d4 f3       	brlt	.-12     	; 0x2a86 <__mulsf3_pse+0x84>
    2a92:	86 95       	lsr	r24
    2a94:	77 95       	ror	r23
    2a96:	67 95       	ror	r22
    2a98:	b7 95       	ror	r27
    2a9a:	f7 95       	ror	r31
    2a9c:	e7 95       	ror	r30
    2a9e:	9f 5f       	subi	r25, 0xFF	; 255
    2aa0:	c1 f7       	brne	.-16     	; 0x2a92 <__mulsf3_pse+0x90>
    2aa2:	fe 2b       	or	r31, r30
    2aa4:	88 0f       	add	r24, r24
    2aa6:	91 1d       	adc	r25, r1
    2aa8:	96 95       	lsr	r25
    2aaa:	87 95       	ror	r24
    2aac:	97 f9       	bld	r25, 7
    2aae:	08 95       	ret

00002ab0 <itoa>:
    2ab0:	45 32       	cpi	r20, 0x25	; 37
    2ab2:	51 05       	cpc	r21, r1
    2ab4:	20 f4       	brcc	.+8      	; 0x2abe <itoa+0xe>
    2ab6:	42 30       	cpi	r20, 0x02	; 2
    2ab8:	10 f0       	brcs	.+4      	; 0x2abe <itoa+0xe>
    2aba:	0c 94 63 15 	jmp	0x2ac6	; 0x2ac6 <__itoa_ncheck>
    2abe:	fb 01       	movw	r30, r22
    2ac0:	10 82       	st	Z, r1
    2ac2:	cb 01       	movw	r24, r22
    2ac4:	08 95       	ret

00002ac6 <__itoa_ncheck>:
    2ac6:	bb 27       	eor	r27, r27
    2ac8:	4a 30       	cpi	r20, 0x0A	; 10
    2aca:	31 f4       	brne	.+12     	; 0x2ad8 <__itoa_ncheck+0x12>
    2acc:	99 23       	and	r25, r25
    2ace:	22 f4       	brpl	.+8      	; 0x2ad8 <__itoa_ncheck+0x12>
    2ad0:	bd e2       	ldi	r27, 0x2D	; 45
    2ad2:	90 95       	com	r25
    2ad4:	81 95       	neg	r24
    2ad6:	9f 4f       	sbci	r25, 0xFF	; 255
    2ad8:	0c 94 6f 15 	jmp	0x2ade	; 0x2ade <__utoa_common>

00002adc <__utoa_ncheck>:
    2adc:	bb 27       	eor	r27, r27

00002ade <__utoa_common>:
    2ade:	fb 01       	movw	r30, r22
    2ae0:	55 27       	eor	r21, r21
    2ae2:	aa 27       	eor	r26, r26
    2ae4:	88 0f       	add	r24, r24
    2ae6:	99 1f       	adc	r25, r25
    2ae8:	aa 1f       	adc	r26, r26
    2aea:	a4 17       	cp	r26, r20
    2aec:	10 f0       	brcs	.+4      	; 0x2af2 <__utoa_common+0x14>
    2aee:	a4 1b       	sub	r26, r20
    2af0:	83 95       	inc	r24
    2af2:	50 51       	subi	r21, 0x10	; 16
    2af4:	b9 f7       	brne	.-18     	; 0x2ae4 <__utoa_common+0x6>
    2af6:	a0 5d       	subi	r26, 0xD0	; 208
    2af8:	aa 33       	cpi	r26, 0x3A	; 58
    2afa:	08 f0       	brcs	.+2      	; 0x2afe <__utoa_common+0x20>
    2afc:	a9 5d       	subi	r26, 0xD9	; 217
    2afe:	a1 93       	st	Z+, r26
    2b00:	00 97       	sbiw	r24, 0x00	; 0
    2b02:	79 f7       	brne	.-34     	; 0x2ae2 <__utoa_common+0x4>
    2b04:	b1 11       	cpse	r27, r1
    2b06:	b1 93       	st	Z+, r27
    2b08:	11 92       	st	Z+, r1
    2b0a:	cb 01       	movw	r24, r22
    2b0c:	0c 94 88 15 	jmp	0x2b10	; 0x2b10 <strrev>

00002b10 <strrev>:
    2b10:	dc 01       	movw	r26, r24
    2b12:	fc 01       	movw	r30, r24
    2b14:	67 2f       	mov	r22, r23
    2b16:	71 91       	ld	r23, Z+
    2b18:	77 23       	and	r23, r23
    2b1a:	e1 f7       	brne	.-8      	; 0x2b14 <strrev+0x4>
    2b1c:	32 97       	sbiw	r30, 0x02	; 2
    2b1e:	04 c0       	rjmp	.+8      	; 0x2b28 <strrev+0x18>
    2b20:	7c 91       	ld	r23, X
    2b22:	6d 93       	st	X+, r22
    2b24:	70 83       	st	Z, r23
    2b26:	62 91       	ld	r22, -Z
    2b28:	ae 17       	cp	r26, r30
    2b2a:	bf 07       	cpc	r27, r31
    2b2c:	c8 f3       	brcs	.-14     	; 0x2b20 <strrev+0x10>
    2b2e:	08 95       	ret

00002b30 <_exit>:
    2b30:	f8 94       	cli

00002b32 <__stop_program>:
    2b32:	ff cf       	rjmp	.-2      	; 0x2b32 <__stop_program>
    2b34:	36 05       	cpc	r19, r6
    2b36:	38 05       	cpc	r19, r8
    2b38:	3a 05       	cpc	r19, r10
    2b3a:	3c 05       	cpc	r19, r12
    2b3c:	3e 05       	cpc	r19, r14
    2b3e:	40 05       	cpc	r20, r0
    2b40:	42 05       	cpc	r20, r2
    2b42:	44 05       	cpc	r20, r4
    2b44:	46 05       	cpc	r20, r6
    2b46:	48 05       	cpc	r20, r8
    2b48:	4a 05       	cpc	r20, r10
    2b4a:	4c 05       	cpc	r20, r12
    2b4c:	4e 05       	cpc	r20, r14
    2b4e:	50 05       	cpc	r21, r0
    2b50:	52 05       	cpc	r21, r2
    2b52:	54 05       	cpc	r21, r4
